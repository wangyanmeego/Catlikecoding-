{"compress":true,"commitItems":[["86a921f2-2d2c-4bec-98f8-0f77f05cd490",1575355361026,"> 扰动法线模拟凹凸\n>\n> 从高度场计算法线\n>\n> 采样和混合法线\n>\n> 从切线空间转换为世界空间\n\n这是渲染教程系列的第6部分。前一部分增加了对更复杂的照明的支持。这一次，我们将创建更复杂表面的错觉。\n\n本教程是用Unity 5.4.0f3制作的。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/tutorial-image.jpg)\n\n# 凹凸映射\n\n我们可以使用反照率纹理来创建具有复杂颜色图案的材质。我们可以用法线来调整表面的曲率。有了这些工具，我们可以制造出各种各样的表面。然而，一个三角形的表面总是光滑的。它只能在三个法向量之间插值。所以它不能代表粗糙或多变的表面。当放弃反照率纹理而只使用一种纯色时，这一点就很明显了。\n\n体现平滑度的一个很好的例子是一个简单的四边形。添加一个到场景中，通过沿着x轴旋转90°，并使它指向上方。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/flat.png)\n\n因为默认的天空盒非常亮，很难看到其他灯光的作用。在本教程中，我们将其关闭。你可以通过在照明设置中将环境强度降低到零来做到这一点。然后只开启主方向灯。在场景视图中找到一个好的视角，这样你就可以在四边形上看到一些光线的差异。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/ambient-intensity.png)\n\n![scene](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/no-ambient.png)\n\n我们怎样才能使这个四边形看起来不平坦呢？我们可以通过在反照率纹理中加入烘焙阴影来模拟粗糙度。然而，这将是完全静态的。如果灯光改变了，或者物体移动了，阴影也应该改变。否则，假象就会破灭。在镜面反射的情况下，甚至相机都不允许移动。\n\n我们可以改变法线来创建曲面的错觉。但是每四个顶点只有四个法线。这只能产生平滑的过渡。如果我们想要一个多变而粗糙的表面，我们需要更多的法线。\n\n我们可以把四边形分成更小的四边形。这给了我们更多的法线。事实上，一旦我们有更多的顶点，我们也可以移动它们。那么我们就不需要表面粗糙的假象了，我们可以做出一个真正粗糙的表面！但是子四边形仍然有同样的问题。我们还要再细分吗？这将导致大量的网格与大量的三角形。这在创建3D模型时是可行的，但在游戏中并不可行。\n\n## 高度纹理\n\n与平面相比，粗糙的表面具有不均匀的仰角。如果我们将这些高度数据存储在纹理中，我们可能会使用它生成的每个片段的法向量，而不是每个顶点。这个想法被称为凹凸映射，是由James Blinn首先提出的。\n\n这是一个高度贴图，以配合我们的大理石纹理。它是一个RGB纹理，每个通道都设置相同的值。使用默认导入设置其导入到项目中。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/marble-heights.png)\n\n添加一个_HeightMap纹理属性到*My First Lighting Shader*。因为它将使用与我们的反照率相同的UV，所以它不需要自己的缩放和偏移参数。默认的纹理并不重要，只要它是一致的。灰色的就可以了。\n\n```c\n\tProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/heights-inspector.png)\n\n将匹配的变量添加到My Lighting 包含文件中，这样我们就可以访问纹理了。让我们看看它是怎样的，把它与反照率相乘。\n\n```c\nfloat4 _Tint;\nsampler2D _MainTex;\nfloat4 _MainTex_ST;\n\nsampler2D _HeightMap;\n\n…\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\ti.normal = normalize(i.normal);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-color.png)\n\n## 调整法线\n\n因为我们的片段法线将变得更加复杂，我们将它们的初始化移到一个单独的函数中。另外，去掉高度纹理测试代码。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = normalize(i.normal);\n}\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\tInitializeFragmentNormal(i);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n//\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n因为我们现在处理的是一个位于XZ平面上的四边形，它的法向量总是（0，1，0），所以我们可以使用一个常数法向量，忽略顶点数据。我们先做这个，稍后再考虑不同的朝向。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = float3(0, 1, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n我们怎么把高度数据包含进来呢？一种简单的方法是在归一化之前使用高度作为法线的Y分量。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat h = tex2D(_HeightMap, i.uv);\n\ti.normal = float3(0, h, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-normal.png)\n\n这是行不通的，因为归一化会把每个向量都转换回（0，1，0）.我们需要一个不同的方法。\n\n## 有限差分\n\n因为我们处理的是纹理数据，我们有二维数据。有U维度和V维度。这些高度可以被认为是在三维空间中向上的。我们可以说纹理代表了一个函数，f(u,v)=h。我们先把自己限制在U维度上。所以这个函数被简化为f（u）=h。我们能从这个函数推出法向量吗？\n\n如果我们知道函数的斜率，然后我们就可以用它来计算任意点的法向量。斜率由h的变化率决定。这是它的导数。h′。因为h是一个函数的结果，h‘同样也是一个函数的结果。我们有导数函数f’(u)=h‘。\n\n不幸的是，我们不知道这些函数是什么。但是我们可以近似它们。我们可以比较纹理中两个不同点的高度。例如，在极端情况下，使用U坐标0和1。这两个样本之间的插值就是坐标之间的变化率，用函数表示，即f(1)-f(0)。我们可以使用它来构建一个切线向量，![1574845121482](1574845121482.png)。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent-diagram.png)\n\n![1574845208030](1574845208030.png)\n\n这当然是对切向量的粗略近似。它把整个纹理当作一个线性的斜率。我们可以通过采样两个距离更近的点来做得更好。例如，U坐标取0和1/2.在两个点之间的变化率是f(1/2 )-f(0)。半个单位的U。因为处理每整个单位的变化率比较简单，我们用它除以两点之间的距离。所以我们得到![1574847363057](1574847363057.png)。这就得到了切向量![1574847393342](1574847393342.png)。\n\n一般来说，我们要做的是相对于我们渲染的每个片段的U坐标。到下一点的距离由一个常数定义。它的导数是通过![1574849122811](1574849122811.png)来近似。\n\nδ越小，我们近似的导数就越接近于真实。当然它不可能变成零，但当达到理论极限时，你得到![1574849339141](1574849339141.png)。这种近似导数的方法称为有限差分法。有了它，我们可以构造任意点的切向量，![1574850029282](1574850029282.png)。\n\n## 从切线到法线\n\n在我们的着色器代码中，可以用什么值去当作是δ 。最小的感知差异将覆盖我们纹理的单个像素。我们可以通过一个带有_TexelSize后缀float4类型的变量在着色器中获取这些信息。Unity设置那些变量，类似于__ST变量。\n\n**_TexelSize变量中存储了什么？**\n\n> 它的前两个分量包含了Texel的大小，就像U和V一样。其他两个分量包含像素的数量。例如，在256×128大小的纹理中，它将包含(0.00390625, 0.0078125, 256, 128)。\n\n现在我们可以对纹理采样两次，计算高度导数，并构造一个切向量。我们直接用它作为法向量。\n\n```c\n    float2 delta = float2(_HeightMap_TexelSize.x, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(1, (h2 - h1) / delta.x, 0);\n\n\ti.normal = normalize(i.normal);\n```\n\n事实上，因为我们会归一化。我们可以扩展我们的切向量δ。这消除了除法并提高了精度。\n\n```c\ni.normal = float3(delta.x, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent.png)\n\n我们得到了一个非常明显的结果。这是因为这些高度只有一个单位范围，这就产生了非常陡峭的斜坡。由于扰动的法线并不会改变表面，所以我们不希望有如此大的差异。我们可以用任意因子来缩放高度。让我们将范围缩小到单个Texel。我们可以通过乘以δ的高度差，或简单地在切向处用1取代δ。\n\n```c\n\ti.normal = float3(1, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/scaled-height.png)\n\n这看起来不错，但是灯光不对。这看起来太暗了。因为我们直接用正切作为法向量。为了把它变成一个向上的法向量，我们必须绕Z轴旋转tangent 90°。\n\n```c\ni.normal = float3(h1 - h2, 1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/rotated.png)\n\n**矢量旋转是如何工作的？**\n\n你可以通过交换向量的X和Y向量，以及翻转新的X分量的符号来逆时针旋转一个2D向量90°。最后得到![1575016532726](1575016532726.png)\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/vector-rotation.png)\n\n## 中心差分\n\n我们已经使用有限差分近似来创建法向量。具体来说，是通过使用正向差分法。我们取一个点，然后看一个方向来确定斜率。结果，法线是偏向那个方向的。为了得到法向的更好的近似值，我们可以在两个方向上偏移采样点。这种方法将线性逼近集中在当前点上，称为中心差分法。这就把导数变成了![1575017187421](1575017187421.png)。\n\n```c\n\tfloat2 delta = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv - delta);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(h1 - h2, 1, 0);\n```\n\n这稍微移动了凹凸点，使它们更好地与高度场对齐。除此之外，它们的形状不会改变。\n\n## 使用两个维度\n\n我们创建的法线只考虑沿U方向的变化。我们已经使用了函数f(u,v)关于u的偏微分。就是![1575018677399](1575018677399.png)，或者简写为 f<sub>u</sub><sup>‘</sup>。我们可以通过使用f<sub>u</sub><sup>’</sup>沿着V创建法线。在这种情况下，那么切向量是![1575020057277](1575020057277.png)并且法向量是![1575020086626](1575020086626.png)。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\ti.normal = float3(u1 - u2, 1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\ti.normal = float3(0, 1, v1 - v2);\n\n\ti.normal = normalize(i.normal);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/other-dimension.png)\n\n我们现在可以得到U和V的切线。这些向量一起描述了在片段处表面的高度场。通过计算他们的外积，我们的得到了二维高度场的法向量。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\tfloat3 tv = float3(0, v2 - v1, 1);\n\n\ti.normal = cross(tv, tu);\n\ti.normal = normalize(i.normal);\n```\n\n![quad](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals.png)\n\n![details](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals-details.png)\n\n当你计算切向量的外积时，你会看到![1575021052831](1575021052831.png)。\t所以我们可以直接构造这个向量，而不是依赖于叉乘函数。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n//\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n//\tfloat3 tv = float3(0, v2 - v1, 1);\n\n//\ti.normal = cross(tv, tu);\n\ti.normal = float3(u1 - u2, 1, v1 - v2);\n\ti.normal = normalize(i.normal);\n}\n```\n\n# 法线映射\n\n当凹凸贴图工作时，我们必须执行多个纹理样本和有限差分计算。这似乎是一种浪费，因为结果的法线应该总是相同的。为什么每帧做所有这些工作？我们可以只做一次，将法线存储在一个纹理中。\n\n这意味着我们需要一个法线贴图。我可以提供一个，但我们可以让Unity为我们做这些工作。将高度贴图的纹理类型改为法线贴图。Unity自动切换纹理去使用三线性过滤，并假设我们想要使用灰度图像数据来生成一个法线贴图。这正是我们想要的。但是将凹凸度为更低的值，比如0.05。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/inspector.png)\n\n![preview](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/preview.png)\n\n应用了导入设置后，Unity将计算法线贴图。原始的高度地图仍然存在，但Unity内部使用生成的地图。\n\n就像我们在法线可视化为颜色时所做的那样，它们必须进行调整以适应0-1的范围。所以它们被存储为 $x^4$\n\n",[[1575355345399,["wangy@DESKTOP-LU247VS",[[-1,8759," $x^4$"]],[8759,8765],[8759,8759]]],[1575355410171,["wangy@DESKTOP-LU247VS",[[1,8761,"$$\nx = \\frac{N+1}{2}\n$$\n\n"]],[8759,8759],[8786,8786]]],[1575355486818,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"."]],[8786,8786],[8786,8786]]],[1575355488156,["wangy@DESKTOP-LU247VS",[[-1,8785,"."],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355488757,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786," "]],[8785,8785],[8786,8786]]],[1575355489577,["wangy@DESKTOP-LU247VS",[[-1,8785," "],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355490681,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"."]],[8785,8785],[8786,8786]]],[1575355491287,["wangy@DESKTOP-LU247VS",[[-1,8785,"."],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355491818,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"。"]],[8785,8785],[8786,8786]]],[1575355501434,["wangy@DESKTOP-LU247VS",[[-1,8785,"。"],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355537172,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"zh"]],[8785,8785],[8784,8787]]],[1575355541437,["wangy@DESKTOP-LU247VS",[[-1,8784,"\nzh"],[1,8787,"这意味着"]],[8784,8784],[8788,8788]]],[1575355542457,["wangy@DESKTOP-LU247VS",[[-1,8784,"这意味着"]],[8788,8788],[8784,8784]]],[1575355543111,["wangy@DESKTOP-LU247VS",[[1,8784,"\n\n"]],[8784,8784],[8785,8785]]],[1575355543734,["wangy@DESKTOP-LU247VS",[[1,8786,"\n"]],[8785,8785],[8786,8786]]],[1575355550048,["wangy@DESKTOP-LU247VS",[[-1,8786,"\n"],[1,8787,"这意味着"]],[8786,8786],[8790,8790]]],[1575355587639,["wangy@DESKTOP-LU247VS",[[1,8790,"平坦区域会 呈现浅绿色。然而，它们却呈现淡蓝色"]],[8790,8790],[8813,8813]]],[1575355640606,["wangy@DESKTOP-LU247VS",[[-1,8786,"这意味着"]],[8790,8790],[8786,8786]]],[1575355644795,["wangy@DESKTOP-LU247VS",[[1,8786,"这假设"]],[8786,8786],[8789,8789]]],[1575355647921,["wangy@DESKTOP-LU247VS",[[-1,8794," "]],[8795,8795],[8794,8794]]],[1575355653667,["wangy@DESKTOP-LU247VS",[[1,8808,"为"]],[8808,8808],[8809,8809]]],[1575355656777,["wangy@DESKTOP-LU247VS",[[1,8812,"。"]],[8812,8812],[8813,8813]]],[1575355718191,["wangy@DESKTOP-LU247VS",[[1,8813,"这是因为法向映射最常见的约定是将"]],[8813,8813],[8829,8829]]],[1575355724037,["wangy@DESKTOP-LU247VS",[[1,8829,"向上的方向"]],[8829,8829],[8834,8834]]],[1575355739762,["wangy@DESKTOP-LU247VS",[[-1,8819,"映射"]],[8821,8821],[8819,8819]]],[1575355741815,["wangy@DESKTOP-LU247VS",[[1,8819,"纹理"]],[8819,8819],[8821,8821]]],[1575355775162,["wangy@DESKTOP-LU247VS",[[1,8834,"存储在z分量中。在Unity看来"]],[8834,8834],[8850,8850]]],[1575355796624,["wangy@DESKTOP-LU247VS",[[1,8850,"，Y和Z坐标是交换的。"]],[8850,8850],[8861,8861]]],[1575355797910,["wangy@DESKTOP-LU247VS",[[1,8861,"\n\n"]],[8861,8861],[8862,8862]]],[1575355799006,["wangy@DESKTOP-LU247VS",[[1,8863,"\n"]],[8862,8862],[8863,8863]]],[1575355824621,["wangy@DESKTOP-LU247VS",[[1,8863,"## 对法线纹理"]],[8863,8863],[8871,8871]]],[1575355825405,["wangy@DESKTOP-LU247VS",[[-1,8869,"纹理"]],[8871,8871],[8869,8869]]],[1575355828470,["wangy@DESKTOP-LU247VS",[[1,8869,"贴图采样"]],[8869,8869],[8873,8873]]],[1575355830638,["wangy@DESKTOP-LU247VS",[[1,8874,"\n"]],[8873,8873],[8874,8874]]],[1575355831318,["wangy@DESKTOP-LU247VS",[[1,8875,"\n"]],[8874,8874],[8875,8875]]],[1575355849678,["wangy@DESKTOP-LU247VS",[[-1,8875,"\n"],[1,8876,"因为"]],[8875,8875],[8877,8877]]],[1575355899169,["wangy@DESKTOP-LU247VS",[[1,8877,"法线贴图和高度贴图有很大的不同，要相应地重命名"]],[8877,8877],[8900,8900]]],[1575355904280,["wangy@DESKTOP-LU247VS",[[1,8900,"着色器属性。"]],[8900,8900],[8906,8906]]],[1575355905926,["wangy@DESKTOP-LU247VS",[[1,8906,"\n\n"]],[8906,8906],[8907,8907]]],[1575355911190,["wangy@DESKTOP-LU247VS",[[1,8908,"\n"]],[8907,8907],[8908,8908]]],[1575355912707,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"],[1,8909,"·"]],[8908,8908],[8909,8909]]],[1575355913320,["wangy@DESKTOP-LU247VS",[[-1,8908,"·"],[1,8909,"\n"]],[8909,8909],[8908,8908]]],[1575355913969,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"],[1,8909,"`"]],[8908,8908],[8909,8909]]],[1575355914160,["wangy@DESKTOP-LU247VS",[[1,8909,"`"]],[8909,8909],[8910,8910]]],[1575355916279,["wangy@DESKTOP-LU247VS",[[-1,8909,"`"]],[8910,8910],[8909,8909]]],[1575355916465,["wangy@DESKTOP-LU247VS",[[-1,8908,"`"],[1,8909,"\n"]],[8909,8909],[8908,8908]]],[1575355916688,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"]],[8908,8908],[8907,8907]]],[1575355917670,["wangy@DESKTOP-LU247VS",[[1,8908,"\n"]],[8907,8907],[8908,8908]]],[1575355918227,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"],[1,8909,"`"]],[8908,8908],[8909,8909]]],[1575355920696,["wangy@DESKTOP-LU247VS",[[1,8909,"`c"]],[8909,8909],[8911,8911]]],[1575355922696,["wangy@DESKTOP-LU247VS",[[-1,8910,"c"]],[8911,8911],[8910,8910]]],[1575355923649,["wangy@DESKTOP-LU247VS",[[1,8910,"`"]],[8910,8910],[8911,8911]]],[1575355923714,["wangy@DESKTOP-LU247VS",[[1,8911,"language\n```\n"]],[8911,8911],[8911,8919]]],[1575355925104,["wangy@DESKTOP-LU247VS",[[-1,8911,"language"],[1,8919,"c"]],[8911,8919],[8912,8912]]],[1575355925997,["wangy@DESKTOP-LU247VS",[[1,8913,"\n"]],[8912,8912],[8913,8913]]],[1575355927016,["wangy@DESKTOP-LU247VS",[[1,8913,"**Properties** {\n\t\t_Tint (\"Tint\", **Color**) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n~~//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}~~\n\t\t[Gamma] _Metallic (\"Metallic\", **Range**(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", **Range**(0, 1)) = 0.1\n\t}"]],[8913,8913],[9240,9240]]],[1575355929356,["wangy@DESKTOP-LU247VS",[[-1,8913,"**Properties** {\n\t\t_Tint (\"Tint\", **Color**) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n~~//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}~~\n\t\t[Gamma] _Metallic (\"Metallic\", **Range**(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", **Range**(0, 1)) = 0.1\n\t}"]],[9240,9240],[8913,8913]]],[1575355933144,["wangy@DESKTOP-LU247VS",[[1,8913,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}"]],[8913,8913],[9220,9220]]],[1575355935179,["wangy@DESKTOP-LU247VS",[[-1,8913,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}"]],[9220,9220],[8913,8913]]],[1575355943873,["wangy@DESKTOP-LU247VS",[[1,8914,"\n"]],[8913,8913],[8914,8914]]],[1575355945434,["wangy@DESKTOP-LU247VS",[[-1,8914,"\n"]],[8914,8914],[8913,8913]]],[1575355956425,["wangy@DESKTOP-LU247VS",[[1,8913,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}"]],[8913,8913],[9220,9220]]],[1575355970638,["wangy@DESKTOP-LU247VS",[[1,9225,"\n"]],[9224,9224],[9225,9225]]],[1575355970806,["wangy@DESKTOP-LU247VS",[[1,9226,"\n"]],[9225,9225],[9226,9226]]],[1575355978542,["wangy@DESKTOP-LU247VS",[[1,9226,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/material-with-normal-map.png)"]],[9226,9226],[9333,9333]]],[1575355987712,["wangy@DESKTOP-LU247VS",[[1,9228,"shiyong"]],[9228,9228],[9235,9235]]],[1575355989231,["wangy@DESKTOP-LU247VS",[[-1,9228,"shiyong"]],[9235,9235],[9228,9228]]],[1575355998047,["wangy@DESKTOP-LU247VS",[[1,9228,"使用一个法线贴图"]],[9228,9228],[9236,9236]]],[1575356001399,["wangy@DESKTOP-LU247VS",[[1,9342,"\n"]],[9341,9341],[9342,9342]]],[1575356001543,["wangy@DESKTOP-LU247VS",[[1,9343,"\n"]],[9342,9342],[9343,9343]]],[1575356011575,["wangy@DESKTOP-LU247VS",[[-1,9343,"\n"],[1,9344,"我们"]],[9343,9343],[9345,9345]]],[1575356016805,["wangy@DESKTOP-LU247VS",[[1,9345,"可以删除所有的"]],[9345,9345],[9352,9352]]],[1575356078162,["wangy@DESKTOP-LU247VS",[[1,9352,"高度贴图代码，并将其替换为一个纹理采样，然后进行归一化。"]],[9352,9352],[9380,9380]]],[1575356079247,["wangy@DESKTOP-LU247VS",[[1,9380,"\n\n"]],[9380,9380],[9381,9381]]],[1575356085872,["wangy@DESKTOP-LU247VS",[[1,9382,"\n"]],[9381,9381],[9382,9382]]],[1575356086088,["wangy@DESKTOP-LU247VS",[[-1,9382,"\n"],[1,9383,"`"]],[9382,9382],[9383,9383]]],[1575356086457,["wangy@DESKTOP-LU247VS",[[1,9383,"``"]],[9383,9383],[9385,9385]]],[1575356086509,["wangy@DESKTOP-LU247VS",[[1,9385,"language\n```\n"]],[9385,9385],[9385,9393]]],[1575356089280,["wangy@DESKTOP-LU247VS",[[-1,9385,"language"],[1,9393,"c"]],[9385,9393],[9386,9386]]],[1575356089566,["wangy@DESKTOP-LU247VS",[[1,9387,"\n"]],[9386,9386],[9387,9387]]],[1575356090937,["wangy@DESKTOP-LU247VS",[[1,9387,"sampler2D _NormalMap;\n\n//sampler2D _HeightMap;\n//float4 _HeightMap_TexelSize;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = tex2D(_NormalMap, i.uv).rgb;\n\ti.normal = normalize(i.normal);\n}"]],[9387,9387],[9599,9599]]],[1575356094654,["wangy@DESKTOP-LU247VS",[[1,9604,"\n"]],[9603,9603],[9604,9604]]],[1575356094838,["wangy@DESKTOP-LU247VS",[[1,9605,"\n"]],[9604,9604],[9605,9605]]],[1575356102233,["wangy@DESKTOP-LU247VS",[[-1,9605,"\n"],[1,9606,"d"]],[9605,9605],[9606,9606]]],[1575356103027,["wangy@DESKTOP-LU247VS",[[-1,9605,"d"],[1,9606,"\n"]],[9606,9606],[9605,9605]]],[1575356104201,["wangy@DESKTOP-LU247VS",[[-1,9605,"\n"]],[9605,9605],[0,0]]],[1575356104514,["wangy@DESKTOP-LU247VS",[[-1,9604,"\n"],[1,9605,"d"]],[0,0],[9604,9605]]],[1575356104602,["wangy@DESKTOP-LU247VS",[[1,9605,"a"]],[9604,9604],[9603,9606]]],[1575356108211,["wangy@DESKTOP-LU247VS",[[-1,9603,"\nda"]],[9603,9603],[9603,9603]]],[1575356108495,["wangy@DESKTOP-LU247VS",[[1,9603,"\n\n"]],[9603,9603],[9604,9604]]],[1575356108807,["wangy@DESKTOP-LU247VS",[[1,9605,"\n"]],[9604,9604],[9605,9605]]],[1575356110744,["wangy@DESKTOP-LU247VS",[[-1,9605,"\n"],[1,9606,"当然"]],[9605,9605],[9607,9607]]],[1575356138111,["wangy@DESKTOP-LU247VS",[[1,9607,"，我们必须通过计算2N-1来将法线转换回它们"]],[9607,9607],[9629,9629]]],[1575356153185,["wangy@DESKTOP-LU247VS",[[1,9631,"的-1~1的范围。"]],[9631,9631],[9640,9640]]],[1575356153638,["wangy@DESKTOP-LU247VS",[[1,9640,"\n\n"]],[9640,9640],[9641,9641]]],[1575356159807,["wangy@DESKTOP-LU247VS",[[1,9642,"\n"]],[9641,9641],[9642,9642]]],[1575356160376,["wangy@DESKTOP-LU247VS",[[-1,9642,"\n"],[1,9643,"`"]],[9642,9642],[9643,9643]]],[1575356160720,["wangy@DESKTOP-LU247VS",[[1,9643,"``"]],[9643,9643],[9645,9645]]],[1575356160779,["wangy@DESKTOP-LU247VS",[[1,9645,"language\n```\n"]],[9645,9645],[9645,9653]]],[1575356162312,["wangy@DESKTOP-LU247VS",[[-1,9645,"language"],[1,9653,"c"]],[9645,9653],[9646,9646]]],[1575356163063,["wangy@DESKTOP-LU247VS",[[1,9647,"\n"]],[9646,9646],[9647,9647]]],[1575356164160,["wangy@DESKTOP-LU247VS",[[1,9647,"i.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;"]],[9647,9647],[9694,9694]]],[1575356166021,["wangy@DESKTOP-LU247VS",[[1,9699,"\n"]],[9698,9698],[9699,9699]]],[1575356166382,["wangy@DESKTOP-LU247VS",[[1,9700,"\n"]],[9699,9699],[9700,9700]]],[1575356174664,["wangy@DESKTOP-LU247VS",[[-1,9700,"\n"],[1,9701,"s"]],[9700,9700],[9701,9701]]],[1575356175207,["wangy@DESKTOP-LU247VS",[[-1,9700,"s"],[1,9701,"\n"]],[9701,9701],[9700,9700]]],[1575356176509,["wangy@DESKTOP-LU247VS",[[-1,9700,"\n"]],[9700,9700],[0,0]]],[1575356177454,["wangy@DESKTOP-LU247VS",[[1,0,"\n"]],[0,0],[1,1]]],[1575356183814,["wangy@DESKTOP-LU247VS",[[1,9701,"\n"]],[9700,9700],[9701,9701]]],[1575356186166,["wangy@DESKTOP-LU247VS",[[-1,9701,"\n"],[1,9702,"此外"]],[9701,9701],[9703,9703]]],[1575356196212,["wangy@DESKTOP-LU247VS",[[1,9703,"，记得要交换Y和Z。"]],[9703,9703],[9713,9713]]],[1575356197990,["wangy@DESKTOP-LU247VS",[[1,9713,"\n\n"]],[9713,9713],[9714,9714]]],[1575356216477,[null,[[1,9630,"原来"],[-1,9641,"\n"],[-1,9645,"lc`"],[1,9648,"c\n"],[-1,9698,"\n"],[1,9699,"`"]],[9630,9630],[9700,9700]]],[1575356216478,[null,[[-1,9630,"原来"],[1,9643,"\n"],[1,9646,"lc`"],[-1,9646,"c\n"],[1,9698,"\n"],[-1,9698,"`"]],[9700,9700],[9630,9630]]],[1575356203998,["wangy@DESKTOP-LU247VS",[[1,9715,"\n"]],[9714,9714],[9715,9715]]],[1575356204218,["wangy@DESKTOP-LU247VS",[[-1,9715,"\n"],[1,9716,"`"]],[9715,9715],[9716,9716]]],[1575356204560,["wangy@DESKTOP-LU247VS",[[1,9716,"``"]],[9716,9716],[9718,9718]]],[1575356204643,["wangy@DESKTOP-LU247VS",[[1,9718,"language\n```\n"]],[9718,9718],[9718,9726]]],[1575356205464,["wangy@DESKTOP-LU247VS",[[-1,9718,"language"],[1,9726,"c"]],[9718,9726],[9719,9719]]],[1575356205916,["wangy@DESKTOP-LU247VS",[[1,9720,"\n"]],[9719,9719],[9720,9720]]],[1575356206628,["wangy@DESKTOP-LU247VS",[[1,9720,"i.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;\n\ti.normal = i.normal.xzy;"]],[9720,9720],[9793,9793]]],[1575356214750,["wangy@DESKTOP-LU247VS",[[1,9720,"    "]],[9720,9720],[9724,9724]]],[1575356249680,[null,[[1,9630,"原来"],[-1,9641,"\n"],[-1,9645,"lc`"],[1,9648,"c\n"],[-1,9698,"\n"],[1,9699,"`"]],[9630,9630],[9700,9700]]],[1575356249680,[null,[[-1,9630,"原来"],[1,9643,"\n"],[1,9646,"lc`"],[-1,9646,"c\n"],[1,9698,"\n"],[-1,9698,"`"]],[9700,9700],[9630,9630]]],[1575356218142,["wangy@DESKTOP-LU247VS",[[1,9802,"\n"]],[9801,9801],[9802,9802]]],[1575356218286,["wangy@DESKTOP-LU247VS",[[1,9803,"\n"]],[9802,9802],[9803,9803]]],[1575356222178,["wangy@DESKTOP-LU247VS",[[1,9803,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/normals.png)"]],[9803,9803],[9893,9893]]],[1575356227699,["wangy@DESKTOP-LU247VS",[[1,9805,"s"]],[9805,9805],[9806,9806]]],[1575356228423,["wangy@DESKTOP-LU247VS",[[-1,9805,"s"]],[9806,9806],[9805,9805]]],[1575356235793,["wangy@DESKTOP-LU247VS",[[1,9805,"使用一个纹理贴图"]],[9805,9805],[9813,9813]]],[1575356238648,["wangy@DESKTOP-LU247VS",[[-1,9809,"纹理"]],[9811,9811],[9809,9809]]],[1575356246268,["wangy@DESKTOP-LU247VS",[[1,9809,"法线"]],[9809,9809],[9811,9811]]]],null,"wangy@DESKTOP-LU247VS"],["014912c4-6a32-4b05-acee-60446a7df843",1575451738187,"\n> 扰动法线模拟凹凸\n>\n> 从高度场计算法线\n>\n> 采样和混合法线\n>\n> 从切线空间转换为世界空间\n\n这是渲染教程系列的第6部分。前一部分增加了对更复杂的照明的支持。这一次，我们将创建更复杂表面的错觉。\n\n本教程是用Unity 5.4.0f3制作的。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/tutorial-image.jpg)\n\n# 凹凸映射\n\n我们可以使用反照率纹理来创建具有复杂颜色图案的材质。我们可以用法线来调整表面的曲率。有了这些工具，我们可以制造出各种各样的表面。然而，一个三角形的表面总是光滑的。它只能在三个法向量之间插值。所以它不能代表粗糙或多变的表面。当放弃反照率纹理而只使用一种纯色时，这一点就很明显了。\n\n体现平滑度的一个很好的例子是一个简单的四边形。添加一个到场景中，通过沿着x轴旋转90°，并使它指向上方。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/flat.png)\n\n因为默认的天空盒非常亮，很难看到其他灯光的作用。在本教程中，我们将其关闭。你可以通过在照明设置中将环境强度降低到零来做到这一点。然后只开启主方向灯。在场景视图中找到一个好的视角，这样你就可以在四边形上看到一些光线的差异。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/ambient-intensity.png)\n\n![scene](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/no-ambient.png)\n\n我们怎样才能使这个四边形看起来不平坦呢？我们可以通过在反照率纹理中加入烘焙阴影来模拟粗糙度。然而，这将是完全静态的。如果灯光改变了，或者物体移动了，阴影也应该改变。否则，假象就会破灭。在镜面反射的情况下，甚至相机都不允许移动。\n\n我们可以改变法线来创建曲面的错觉。但是每四个顶点只有四个法线。这只能产生平滑的过渡。如果我们想要一个多变而粗糙的表面，我们需要更多的法线。\n\n我们可以把四边形分成更小的四边形。这给了我们更多的法线。事实上，一旦我们有更多的顶点，我们也可以移动它们。那么我们就不需要表面粗糙的假象了，我们可以做出一个真正粗糙的表面！但是子四边形仍然有同样的问题。我们还要再细分吗？这将导致大量的网格与大量的三角形。这在创建3D模型时是可行的，但在游戏中并不可行。\n\n## 高度纹理\n\n与平面相比，粗糙的表面具有不均匀的仰角。如果我们将这些高度数据存储在纹理中，我们可能会使用它生成的每个片段的法向量，而不是每个顶点。这个想法被称为凹凸映射，是由James Blinn首先提出的。\n\n这是一个高度贴图，以配合我们的大理石纹理。它是一个RGB纹理，每个通道都设置相同的值。使用默认导入设置其导入到项目中。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/marble-heights.png)\n\n添加一个_HeightMap纹理属性到*My First Lighting Shader*。因为它将使用与我们的反照率相同的UV，所以它不需要自己的缩放和偏移参数。默认的纹理并不重要，只要它是一致的。灰色的就可以了。\n\n```c\n\tProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/heights-inspector.png)\n\n将匹配的变量添加到My Lighting 包含文件中，这样我们就可以访问纹理了。让我们看看它是怎样的，把它与反照率相乘。\n\n```c\nfloat4 _Tint;\nsampler2D _MainTex;\nfloat4 _MainTex_ST;\n\nsampler2D _HeightMap;\n\n…\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\ti.normal = normalize(i.normal);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-color.png)\n\n## 调整法线\n\n因为我们的片段法线将变得更加复杂，我们将它们的初始化移到一个单独的函数中。另外，去掉高度纹理测试代码。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = normalize(i.normal);\n}\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\tInitializeFragmentNormal(i);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n//\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n因为我们现在处理的是一个位于XZ平面上的四边形，它的法向量总是（0，1，0），所以我们可以使用一个常数法向量，忽略顶点数据。我们先做这个，稍后再考虑不同的朝向。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = float3(0, 1, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n我们怎么把高度数据包含进来呢？一种简单的方法是在归一化之前使用高度作为法线的Y分量。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat h = tex2D(_HeightMap, i.uv);\n\ti.normal = float3(0, h, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-normal.png)\n\n这是行不通的，因为归一化会把每个向量都转换回（0，1，0）.我们需要一个不同的方法。\n\n## 有限差分\n\n因为我们处理的是纹理数据，我们有二维数据。有U维度和V维度。这些高度可以被认为是在三维空间中向上的。我们可以说纹理代表了一个函数，f(u,v)=h。我们先把自己限制在U维度上。所以这个函数被简化为f（u）=h。我们能从这个函数推出法向量吗？\n\n如果我们知道函数的斜率，然后我们就可以用它来计算任意点的法向量。斜率由h的变化率决定。这是它的导数。h′。因为h是一个函数的结果，h‘同样也是一个函数的结果。我们有导数函数f’(u)=h‘。\n\n不幸的是，我们不知道这些函数是什么。但是我们可以近似它们。我们可以比较纹理中两个不同点的高度。例如，在极端情况下，使用U坐标0和1。这两个样本之间的插值就是坐标之间的变化率，用函数表示，即f(1)-f(0)。我们可以使用它来构建一个切线向量，![1574845121482](1574845121482.png)。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent-diagram.png)\n\n![1574845208030](1574845208030.png)\n\n这当然是对切向量的粗略近似。它把整个纹理当作一个线性的斜率。我们可以通过采样两个距离更近的点来做得更好。例如，U坐标取0和1/2.在两个点之间的变化率是f(1/2 )-f(0)。半个单位的U。因为处理每整个单位的变化率比较简单，我们用它除以两点之间的距离。所以我们得到![1574847363057](1574847363057.png)。这就得到了切向量![1574847393342](1574847393342.png)。\n\n一般来说，我们要做的是相对于我们渲染的每个片段的U坐标。到下一点的距离由一个常数定义。它的导数是通过![1574849122811](1574849122811.png)来近似。\n\nδ越小，我们近似的导数就越接近于真实。当然它不可能变成零，但当达到理论极限时，你得到![1574849339141](1574849339141.png)。这种近似导数的方法称为有限差分法。有了它，我们可以构造任意点的切向量，![1574850029282](1574850029282.png)。\n\n## 从切线到法线\n\n在我们的着色器代码中，可以用什么值去当作是δ 。最小的感知差异将覆盖我们纹理的单个像素。我们可以通过一个带有_TexelSize后缀float4类型的变量在着色器中获取这些信息。Unity设置那些变量，类似于__ST变量。\n\n**_TexelSize变量中存储了什么？**\n\n> 它的前两个分量包含了Texel的大小，就像U和V一样。其他两个分量包含像素的数量。例如，在256×128大小的纹理中，它将包含(0.00390625, 0.0078125, 256, 128)。\n\n现在我们可以对纹理采样两次，计算高度导数，并构造一个切向量。我们直接用它作为法向量。\n\n```c\n    float2 delta = float2(_HeightMap_TexelSize.x, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(1, (h2 - h1) / delta.x, 0);\n\n\ti.normal = normalize(i.normal);\n```\n\n事实上，因为我们会归一化。我们可以扩展我们的切向量δ。这消除了除法并提高了精度。\n\n```c\ni.normal = float3(delta.x, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent.png)\n\n我们得到了一个非常明显的结果。这是因为这些高度只有一个单位范围，这就产生了非常陡峭的斜坡。由于扰动的法线并不会改变表面，所以我们不希望有如此大的差异。我们可以用任意因子来缩放高度。让我们将范围缩小到单个Texel。我们可以通过乘以δ的高度差，或简单地在切向处用1取代δ。\n\n```c\n\ti.normal = float3(1, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/scaled-height.png)\n\n这看起来不错，但是灯光不对。这看起来太暗了。因为我们直接用正切作为法向量。为了把它变成一个向上的法向量，我们必须绕Z轴旋转tangent 90°。\n\n```c\ni.normal = float3(h1 - h2, 1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/rotated.png)\n\n**矢量旋转是如何工作的？**\n\n你可以通过交换向量的X和Y向量，以及翻转新的X分量的符号来逆时针旋转一个2D向量90°。最后得到![1575016532726](1575016532726.png)\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/vector-rotation.png)\n\n## 中心差分\n\n我们已经使用有限差分近似来创建法向量。具体来说，是通过使用正向差分法。我们取一个点，然后看一个方向来确定斜率。结果，法线是偏向那个方向的。为了得到法向的更好的近似值，我们可以在两个方向上偏移采样点。这种方法将线性逼近集中在当前点上，称为中心差分法。这就把导数变成了![1575017187421](1575017187421.png)。\n\n```c\n\tfloat2 delta = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv - delta);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(h1 - h2, 1, 0);\n```\n\n这稍微移动了凹凸点，使它们更好地与高度场对齐。除此之外，它们的形状不会改变。\n\n## 使用两个维度\n\n我们创建的法线只考虑沿U方向的变化。我们已经使用了函数f(u,v)关于u的偏微分。就是![1575018677399](1575018677399.png)，或者简写为 f<sub>u</sub><sup>‘</sup>。我们可以通过使用f<sub>u</sub><sup>’</sup>沿着V创建法线。在这种情况下，那么切向量是![1575020057277](1575020057277.png)并且法向量是![1575020086626](1575020086626.png)。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\ti.normal = float3(u1 - u2, 1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\ti.normal = float3(0, 1, v1 - v2);\n\n\ti.normal = normalize(i.normal);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/other-dimension.png)\n\n我们现在可以得到U和V的切线。这些向量一起描述了在片段处表面的高度场。通过计算他们的外积，我们的得到了二维高度场的法向量。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\tfloat3 tv = float3(0, v2 - v1, 1);\n\n\ti.normal = cross(tv, tu);\n\ti.normal = normalize(i.normal);\n```\n\n![quad](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals.png)\n\n![details](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals-details.png)\n\n当你计算切向量的外积时，你会看到![1575021052831](1575021052831.png)。\t所以我们可以直接构造这个向量，而不是依赖于叉乘函数。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n//\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n//\tfloat3 tv = float3(0, v2 - v1, 1);\n\n//\ti.normal = cross(tv, tu);\n\ti.normal = float3(u1 - u2, 1, v1 - v2);\n\ti.normal = normalize(i.normal);\n}\n```\n\n# 法线映射\n\n当凹凸贴图工作时，我们必须执行多个纹理样本和有限差分计算。这似乎是一种浪费，因为结果的法线应该总是相同的。为什么每帧做所有这些工作？我们可以只做一次，将法线存储在一个纹理中。\n\n这意味着我们需要一个法线贴图。我可以提供一个，但我们可以让Unity为我们做这些工作。将高度贴图的纹理类型改为法线贴图。Unity自动切换纹理去使用三线性过滤，并假设我们想要使用灰度图像数据来生成一个法线贴图。这正是我们想要的。但是将凹凸度为更低的值，比如0.05。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/inspector.png)\n\n![preview](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/preview.png)\n\n应用了导入设置后，Unity将计算法线贴图。原始的高度地图仍然存在，但Unity内部使用生成的地图。\n\n就像我们在法线可视化为颜色时所做的那样，它们必须进行调整以适应0-1的范围。所以它们被存储为\n\n$$\nx = \\frac{N+1}{2}\n$$\n\n这假设平坦区域会呈现浅绿色。然而，它们却呈现为淡蓝色。这是因为法向纹理最常见的约定是将向上的方向存储在z分量中。在Unity看来，Y和Z坐标是交换的。\n\n## 对法线贴图采样\n\n因为法线贴图和高度贴图有很大的不同，要相应地重命名着色器属性。\n\n```c\nProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n![使用一个法线贴图](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/material-with-normal-map.png)\n\n我们可以删除所有的高度贴图代码，并将其替换为一个纹理采样，然后进行归一化。\n\n```c\nsampler2D _NormalMap;\n\n//sampler2D _HeightMap;\n//float4 _HeightMap_TexelSize;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = tex2D(_NormalMap, i.uv).rgb;\n\ti.normal = normalize(i.normal);\n}\n```\n\n当然，我们必须通过计算2N-1来将法线转换回它们原来的-1~1的范围。\n\n```c\ni.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;\n```\n\n此外，记得要交换Y和Z。\n\n```c\n    i.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;\n\ti.normal = i.normal.xzy;\n```\n\n![使用一个法线贴图](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/normals.png)\n\n",[[1575451688089,["wangy@DESKTOP-LU247VS",[[1,9903,"\n"]],[9902,9902],[9903,9903]]],[1575451724484,["wangy@DESKTOP-LU247VS",[[1,9903,"## DXT5nm"]],[9903,9903],[9912,9912]]],[1575451725477,["wangy@DESKTOP-LU247VS",[[1,9913,"\n"]],[9912,9912],[9913,9913]]],[1575451726599,["wangy@DESKTOP-LU247VS",[[1,9914,"\n"]],[9913,9913],[9914,9914]]],[1575451745466,["wangy@DESKTOP-LU247VS",[[-1,9914,"\n"],[1,9915,"我们"]],[9914,9914],[9916,9916]]],[1575451747560,["wangy@DESKTOP-LU247VS",[[1,9916,"得法线"]],[9916,9916],[9919,9919]]],[1575451757680,["wangy@DESKTOP-LU247VS",[[-1,9916,"得"]],[9917,9917],[9916,9916]]],[1575451758519,["wangy@DESKTOP-LU247VS",[[1,9916,"的"]],[9916,9916],[9917,9917]]],[1575451796959,["wangy@DESKTOP-LU247VS",[[1,9919,"肯定是有一些问题的。这是因为Unity最终以一种不同于我们预期"]],[9919,9919],[9950,9950]]],[1575451855115,["wangy@DESKTOP-LU247VS",[[1,9950,"的方式对法线进行编码。即使纹理预览是RGB编码。Unity"]],[9950,9950],[9979,9979]]],[1575451870602,["wangy@DESKTOP-LU247VS",[[1,9979,"实际上使用的是DXT5nm。"]],[9979,9979],[9993,9993]]],[1575451871494,["wangy@DESKTOP-LU247VS",[[1,9993,"\n\n"]],[9993,9993],[9994,9994]]],[1575451886326,["wangy@DESKTOP-LU247VS",[[1,9995,"\n"]],[9994,9994],[9995,9995]]],[1575451899064,["wangy@DESKTOP-LU247VS",[[-1,9995,"\n"],[1,9996,"DXT"]],[9995,9995],[9998,9998]]],[1575451913713,["wangy@DESKTOP-LU247VS",[[1,9998,"5nm格式只存储"]],[9998,9998],[10006,10006]]],[1575451938427,["wangy@DESKTOP-LU247VS",[[1,10006,"法线的X和Y分量。它的Z分量被丢弃了"]],[10006,10006],[10024,10024]]],[1575451939695,["wangy@DESKTOP-LU247VS",[[-1,10023,"了"]],[10024,10024],[10023,10023]]],[1575451974752,["wangy@DESKTOP-LU247VS",[[1,10023,"。正如你所期望的，Y分量存储在G通道中。但是，X分量存储在A"]],[10023,10023],[10053,10053]]],[1575451985933,["wangy@DESKTOP-LU247VS",[[1,10053,"通道中。但是，X"]],[10053,10053],[10061,10061]]],[1575451995877,["wangy@DESKTOP-LU247VS",[[-1,10057,"但是，X"]],[10061,10061],[10057,10057]]],[1575452009464,["wangy@DESKTOP-LU247VS",[[1,10057,"没有使用R和B通道。"]],[10057,10057],[10067,10067]]],[1575452009700,["wangy@DESKTOP-LU247VS",[[1,10067,"\n\n"]],[10067,10067],[10068,10068]]],[1575452047069,["wangy@DESKTOP-LU247VS",[[1,10069,"\n"]],[10068,10068],[10069,10069]]],[1575452056319,["wangy@DESKTOP-LU247VS",[[-1,10069,"\n"],[1,10070,"因此"]],[10069,10069],[10071,10071]]],[1575452085631,["wangy@DESKTOP-LU247VS",[[1,10071,"，当使用DXT5nm时，我们只能检索正常的前两个分量。"]],[10071,10071],[10098,10098]]],[1575452087662,["wangy@DESKTOP-LU247VS",[[1,10098,"\n\n"]],[10098,10098],[10099,10099]]],[1575452093950,["wangy@DESKTOP-LU247VS",[[1,10100,"\n"]],[10099,10099],[10100,10100]]],[1575452094903,["wangy@DESKTOP-LU247VS",[[-1,10100,"\n"],[1,10101,"`"]],[10100,10100],[10101,10101]]],[1575452095240,["wangy@DESKTOP-LU247VS",[[1,10101,"``"]],[10101,10101],[10103,10103]]],[1575452095280,["wangy@DESKTOP-LU247VS",[[1,10103,"language\n```\n"]],[10103,10103],[10103,10111]]],[1575452097215,["wangy@DESKTOP-LU247VS",[[-1,10103,"language"],[1,10111,"c"]],[10103,10111],[10104,10104]]],[1575452098437,["wangy@DESKTOP-LU247VS",[[1,10105,"\n"]],[10104,10104],[10105,10105]]],[1575452100366,["wangy@DESKTOP-LU247VS",[[1,10105,"\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;"]],[10105,10105],[10155,10155]]],[1575452118204,["wangy@DESKTOP-LU247VS",[[1,10160,"\n"]],[10159,10159],[10160,10160]]],[1575452118445,["wangy@DESKTOP-LU247VS",[[1,10161,"\n"]],[10160,10160],[10161,10161]]],[1575452446688,["wangy@DESKTOP-LU247VS",[[-1,10161,"\n"],[1,10162,"w"]],[10161,10161],[10162,10162]]],[1575452447117,["wangy@DESKTOP-LU247VS",[[1,10162,"omen"]],[10162,10162],[10166,10166]]],[1575452448050,["wangy@DESKTOP-LU247VS",[[-1,10162,"omen"]],[10166,10166],[10162,10162]]],[1575452448243,["wangy@DESKTOP-LU247VS",[[-1,10161,"w"],[1,10162,"\n"]],[10162,10162],[10161,10161]]],[1575452449896,["wangy@DESKTOP-LU247VS",[[-1,10161,"\n"],[1,10162,"我们"]],[10161,10161],[10163,10163]]],[1575452455223,["wangy@DESKTOP-LU247VS",[[1,10163,"必须从其他"]],[10163,10163],[10168,10168]]],[1575452481505,["wangy@DESKTOP-LU247VS",[[1,10168,"两项中推断出第三项。因为法向量是单位向量。"]],[10168,10168],[10189,10189]]],[1575452482851,["wangy@DESKTOP-LU247VS",[[1,10189,"\n\n"]],[10189,10189],[10190,10190]]],[1575452489444,["wangy@DESKTOP-LU247VS",[[1,10191,"\n"]],[10190,10190],[10191,10191]]],[1575452492959,["wangy@DESKTOP-LU247VS",[[-1,10191,"\n"],[1,10192,"$"]],[10191,10191],[10192,10192]]],[1575452493180,["wangy@DESKTOP-LU247VS",[[1,10192,"$\n\n$$\n"]],[10192,10192],[10194,10194]]],[1575452606694,["wangy@DESKTOP-LU247VS",[[1,10191,"\\"]],[10191,10191],[10192,10192]]],[1575452607787,["wangy@DESKTOP-LU247VS",[[-1,10191,"\\"]],[10192,10192],[10191,10191]]],[1575452643946,["wangy@DESKTOP-LU247VS",[[1,10194,"||N"]],[10194,10194],[10197,10197]]],[1575452654075,["wangy@DESKTOP-LU247VS",[[1,10196,"_"],[1,10197,"_"]],[10196,10197],[10196,10199]]],[1575452665319,["wangy@DESKTOP-LU247VS",[[1,10199,"||=||N"]],[10199,10199],[10205,10205]]],[1575452668541,["wangy@DESKTOP-LU247VS",[[1,10204,"_"],[1,10205,"_"]],[10204,10205],[10204,10207]]],[1575452686163,["wangy@DESKTOP-LU247VS",[[1,10207,"||^2="]],[10207,10207],[10212,10212]]],[1575453271507,["wangy@DESKTOP-LU247VS",[[-1,10196,"_"],[-1,10198,"_"],[-1,10201,"=||_N_||"],[1,10209,"^2=N_x^2+N_y^2+N_z"],[1,10212,"1。然后N_z=\\sqrt[]{1-N_x^2-N_y^2}。"],[1,10216,"\n"]],[10193,10193],[10255,10255]]],[1575453289564,["wangy@DESKTOP-LU247VS",[[1,10256,"\n"]],[10255,10255],[10256,10256]]],[1575453293715,["wangy@DESKTOP-LU247VS",[[-1,10256,"\n"],[1,10257,"`"]],[10256,10256],[10257,10257]]],[1575453294006,["wangy@DESKTOP-LU247VS",[[1,10257,"``"]],[10257,10257],[10259,10259]]],[1575453294045,["wangy@DESKTOP-LU247VS",[[1,10259,"language\n```\n"]],[10259,10259],[10259,10267]]],[1575453295271,["wangy@DESKTOP-LU247VS",[[-1,10259,"language"],[1,10267,"c"]],[10259,10267],[10260,10260]]],[1575453296083,["wangy@DESKTOP-LU247VS",[[1,10261,"\n"]],[10260,10260],[10261,10261]]],[1575453297053,["wangy@DESKTOP-LU247VS",[[1,10261,"i.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n\ti.normal.z = sqrt(1 - dot(i.normal.xy, i.normal.xy));\n\ti.normal = i.normal.xzy;"]],[10261,10261],[10391,10391]]],[1575453303301,["wangy@DESKTOP-LU247VS",[[1,10261,"        "]],[10261,10261],[10269,10269]]],[1575453306780,["wangy@DESKTOP-LU247VS",[[1,10404,"\n"]],[10403,10403],[10404,10404]]],[1575453306914,["wangy@DESKTOP-LU247VS",[[1,10405,"\n"]],[10404,10404],[10405,10405]]],[1575453312534,["wangy@DESKTOP-LU247VS",[[-1,10405,"\n"],[1,10406,"l"]],[10405,10405],[10406,10406]]],[1575453312643,["wangy@DESKTOP-LU247VS",[[1,10406,"i"]],[10406,10406],[10407,10407]]],[1575453312979,["wangy@DESKTOP-LU247VS",[[-1,10406,"i"]],[10407,10407],[10406,10406]]],[1575453313122,["wangy@DESKTOP-LU247VS",[[-1,10405,"l"],[1,10406,"\n"]],[10406,10406],[10405,10405]]],[1575453315895,["wangy@DESKTOP-LU247VS",[[-1,10405,"\n"],[1,10406,"理论上"]],[10405,10405],[10408,10408]]],[1575453354947,["wangy@DESKTOP-LU247VS",[[1,10408,"，结果应该等于原始的Z分量。但是，由于纹理的精度有限，而且由于纹理滤波"]],[10408,10408],[10443,10443]]],[1575453375251,["wangy@DESKTOP-LU247VS",[[1,10443,"，结果往往有所不同，不过一i纪念馆"]],[10443,10443],[10460,10460]]],[1575453380457,["wangy@DESKTOP-LU247VS",[[-1,10455,"一i纪念馆"]],[10460,10460],[10455,10455]]],[1575453386215,["wangy@DESKTOP-LU247VS",[[1,10455,"已经很接近了。"]],[10455,10455],[10462,10462]]],[1575453389931,["wangy@DESKTOP-LU247VS",[[1,10462,"\n\n"]],[10462,10462],[10463,10463]]],[1575453391570,["wangy@DESKTOP-LU247VS",[[1,10464,"\n"]],[10463,10463],[10464,10464]]],[1575453398666,["wangy@DESKTOP-LU247VS",[[-1,10464,"\n"],[1,10465,"此外"]],[10464,10464],[10466,10466]]],[1575453409999,["wangy@DESKTOP-LU247VS",[[1,10466,"，由于精度限制，"]],[10466,10466],[10474,10474]]],[1575453433232,["wangy@DESKTOP-LU247VS",[[1,10474,"$$ "]],[10474,10474],[10477,10477]]],[1575453434249,["wangy@DESKTOP-LU247VS",[[-1,10474,"$$ "]],[10477,10477],[10474,10474]]],[1575453501099,["wangy@DESKTOP-LU247VS",[[1,10474,"$N_x^2+N_y^2$"]],[10474,10474],[10487,10487]]],[1575453546018,["wangy@DESKTOP-LU247VS",[[1,10474,"\n"]],[10474,10474],[10475,10475]]],[1575453546690,["wangy@DESKTOP-LU247VS",[[1,10475,"\n"]],[10475,10475],[10476,10476]]],[1575453548768,["wangy@DESKTOP-LU247VS",[[1,10477,"$"]],[10476,10476],[10477,10477]]],[1575453551508,["wangy@DESKTOP-LU247VS",[[1,10478,"\n"]],[10478,10478],[10479,10479]]],[1575453557084,["wangy@DESKTOP-LU247VS",[[1,10490,"\n"]],[10490,10490],[10491,10491]]],[1575453558528,["wangy@DESKTOP-LU247VS",[[1,10492,"$"]],[10491,10491],[10492,10492]]],[1575453562442,["wangy@DESKTOP-LU247VS",[[-1,10475,"\n"]],[10475,10475],[10474,10474]]],[1575453572019,["wangy@DESKTOP-LU247VS",[[1,10492,"\n\n"]],[10492,10492],[10493,10493]]],[1575453572323,["wangy@DESKTOP-LU247VS",[[1,10494,"\n"]],[10493,10493],[10494,10494]]],[1575453591248,["wangy@DESKTOP-LU247VS",[[-1,10494,"\n"],[1,10495,"k"]],[10494,10494],[10495,10495]]],[1575453591789,["wangy@DESKTOP-LU247VS",[[1,10495,"eneng"]],[10495,10495],[10500,10500]]],[1575453592739,["wangy@DESKTOP-LU247VS",[[-1,10495,"eneng"]],[10500,10500],[10495,10495]]],[1575453592906,["wangy@DESKTOP-LU247VS",[[-1,10494,"k"],[1,10495,"\n"]],[10495,10495],[10494,10494]]],[1575453595393,["wangy@DESKTOP-LU247VS",[[-1,10494,"\n"],[1,10495,"可能"]],[10494,10494],[10496,10496]]],[1575453630348,["wangy@DESKTOP-LU247VS",[[1,10496,"会超过"]],[10496,10496],[10499,10499]]],[1575453630740,["wangy@DESKTOP-LU247VS",[[-1,10498,"过"]],[10499,10499],[10498,10498]]],[1575453642140,["wangy@DESKTOP-LU247VS",[[1,10498,"出界限。通过"]],[10498,10498],[10504,10504]]],[1575453665051,["wangy@DESKTOP-LU247VS",[[-1,10502,"通过"]],[10504,10504],[10502,10502]]],[1575453691987,["wangy@DESKTOP-LU247VS",[[1,10502,"通过限制点积，确保不会发生这种事情。"]],[10502,10502],[10520,10520]]],[1575453693355,["wangy@DESKTOP-LU247VS",[[1,10520,"\n\n"]],[10520,10520],[10521,10521]]],[1575453693826,["wangy@DESKTOP-LU247VS",[[1,10522,"\n"]],[10521,10521],[10522,10522]]],[1575453701397,["wangy@DESKTOP-LU247VS",[[1,10521,"```"]],[10521,10521],[10524,10524]]],[1575453701437,["wangy@DESKTOP-LU247VS",[[1,10524,"language\n```\n"]],[10524,10524],[10524,10532]]],[1575453703967,["wangy@DESKTOP-LU247VS",[[-1,10524,"language"],[1,10532,"c"]],[10524,10532],[10525,10525]]],[1575453704858,["wangy@DESKTOP-LU247VS",[[1,10526,"\n"]],[10525,10525],[10526,10526]]],[1575453705586,["wangy@DESKTOP-LU247VS",[[1,10526,"i.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));"]],[10526,10526],[10589,10589]]],[1575453708274,["wangy@DESKTOP-LU247VS",[[1,10521,"\n"]],[10520,10520],[10521,10521]]],[1575453712936,["wangy@DESKTOP-LU247VS",[[1,10596,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/dxt5nm.png)"]],[10596,10596],[10685,10685]]],[1575453737036,["wangy@DESKTOP-LU247VS",[[1,10598,"解码DXT5nm法线"]],[10598,10598],[10608,10608]]],[1575453742162,["wangy@DESKTOP-LU247VS",[[1,10696,"\n"]],[10695,10695],[10696,10696]]],[1575453742356,["wangy@DESKTOP-LU247VS",[[1,10697,"\n"]],[10696,10696],[10697,10697]]],[1575453755222,["wangy@DESKTOP-LU247VS",[[1,10697,"## 缩放凹凸"]],[10697,10697],[10704,10704]]],[1575453988707,["wangy@DESKTOP-LU247VS",[[1,10705,"\n"]],[10704,10704],[10705,10705]]],[1575453989114,["wangy@DESKTOP-LU247VS",[[1,10706,"\n"]],[10705,10705],[10706,10706]]],[1575454001683,["wangy@DESKTOP-LU247VS",[[-1,10706,"\n"],[1,10707,"因为"]],[10706,10706],[10708,10708]]],[1575454014163,["wangy@DESKTOP-LU247VS",[[1,10708,"我们把法线烘焙"]],[10708,10708],[10715,10715]]],[1575454049370,["wangy@DESKTOP-LU247VS",[[1,10715,"成纹理，我们不能在片段着色器中缩放它。"]],[10715,10715],[10734,10734]]],[1575454049642,["wangy@DESKTOP-LU247VS",[[1,10734,"\n\n"]],[10734,10734],[10735,10735]]],[1575454061482,["wangy@DESKTOP-LU247VS",[[1,10736,"\n"]],[10735,10735],[10736,10736]]],[1575454066955,["wangy@DESKTOP-LU247VS",[[-1,10736,"\n"],[1,10737,"我们"]],[10736,10736],[10738,10738]]],[1575454072913,["wangy@DESKTOP-LU247VS",[[1,10738,"可以在计算Z"]],[10738,10738],[10744,10744]]],[1575454135222,["wangy@DESKTOP-LU247VS",[[1,10744,"之前缩放法线的X和Y分量。如果我们减少X和Y，那么"]],[10744,10744],[10769,10769]]],[1575454157119,["wangy@DESKTOP-LU247VS",[[1,10769,"Z会变大，导致一个更平坦的"]],[10769,10769],[10782,10782]]],[1575454255666,["wangy@DESKTOP-LU247VS",[[1,10782,"表面。如果我们增加它们，相反的情况会发生"]],[10782,10782],[10802,10802]]],[1575454295418,["wangy@DESKTOP-LU247VS",[[1,10803,"我们可以这样调整凹凸度。因为我们已经限制和X和Y的平方，我们呢"]],[10803,10803],[10834,10834]]],[1575454296833,["wangy@DESKTOP-LU247VS",[[-1,10833,"呢"]],[10834,10834],[10833,10833]]],[1575454312667,["wangy@DESKTOP-LU247VS",[[1,10833,"永远不会得到无效的法线。"]],[10833,10833],[10845,10845]]],[1575454377197,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454377197,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454327224,["wangy@DESKTOP-LU247VS",[[1,10845,"\n\n"]],[10845,10845],[10846,10846]]],[1575454327752,["wangy@DESKTOP-LU247VS",[[1,10847,"\n"]],[10846,10846],[10847,10847]]],[1575454437201,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454437201,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454426365,["wangy@DESKTOP-LU247VS",[[-1,10847,"\n"],[1,10848,"让我们"]],[10847,10847],[10850,10850]]],[1575454435032,["wangy@DESKTOP-LU247VS",[[1,10850,"添加一个凹凸"]],[10850,10850],[10856,10856]]],[1575454497184,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454497184,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454446049,["wangy@DESKTOP-LU247VS",[[1,10856,"缩放属性"]],[10856,10856],[10860,10860]]],[1575454617202,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454617202,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454616738,["wangy@DESKTOP-LU247VS",[[1,10860,"到我们的着色器，就像Unity的标准"]],[10860,10860],[10878,10878]]],[1575454677201,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454677201,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454626255,["wangy@DESKTOP-LU247VS",[[1,10878,"着色器一样。"]],[10878,10878],[10884,10884]]],[1575454627561,["wangy@DESKTOP-LU247VS",[[1,10884,"\n\n"]],[10884,10884],[10885,10885]]],[1575454628034,["wangy@DESKTOP-LU247VS",[[1,10886,"\n"]],[10885,10885],[10886,10886]]],[1575454655455,["wangy@DESKTOP-LU247VS",[[-1,10886,"\n"],[1,10887,"`"]],[10886,10886],[10887,10887]]],[1575454655803,["wangy@DESKTOP-LU247VS",[[1,10887,"``"]],[10887,10887],[10889,10889]]],[1575454655843,["wangy@DESKTOP-LU247VS",[[1,10889,"language\n```\n"]],[10889,10889],[10889,10897]]],[1575454657363,["wangy@DESKTOP-LU247VS",[[-1,10889,"language"],[1,10897,"c"]],[10889,10897],[10890,10890]]],[1575454657944,["wangy@DESKTOP-LU247VS",[[1,10891,"\n"]],[10890,10890],[10891,10891]]],[1575454660360,["wangy@DESKTOP-LU247VS",[[1,10891,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n\t\t_BumpScale (\"Bump Scale\", Float) = 1\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}"]],[10891,10891],[11178,11178]]],[1575454663769,["wangy@DESKTOP-LU247VS",[[1,11183,"\n"]],[11182,11182],[11183,11183]]],[1575454663976,["wangy@DESKTOP-LU247VS",[[1,11184,"\n"]],[11183,11183],[11184,11184]]],[1575454737204,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454737204,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454689088,["wangy@DESKTOP-LU247VS",[[-1,11184,"\n"],[1,11185,"b"]],[11184,11184],[11185,11185]]],[1575454689218,["wangy@DESKTOP-LU247VS",[[1,11185,"a"]],[11185,11185],[11186,11186]]],[1575454689961,["wangy@DESKTOP-LU247VS",[[-1,11185,"a"]],[11186,11186],[11185,11185]]],[1575454690120,["wangy@DESKTOP-LU247VS",[[-1,11184,"b"],[1,11185,"\n"]],[11185,11185],[11184,11184]]],[1575454694747,["wangy@DESKTOP-LU247VS",[[-1,11184,"\n"],[1,11185,"把这个"]],[11184,11184],[11187,11187]]],[1575454706116,["wangy@DESKTOP-LU247VS",[[1,11187,"缩放纳入我们的正常计算。"]],[11187,11187],[11199,11199]]],[1575454706728,["wangy@DESKTOP-LU247VS",[[1,11199,"\n\n"]],[11199,11199],[11200,11200]]],[1575454707536,["wangy@DESKTOP-LU247VS",[[1,11201,"\n"]],[11200,11200],[11201,11201]]],[1575454713958,["wangy@DESKTOP-LU247VS",[[-1,11201,"\n"],[1,11202,"`"]],[11201,11201],[11202,11202]]],[1575454714299,["wangy@DESKTOP-LU247VS",[[1,11202,"``"]],[11202,11202],[11204,11204]]],[1575454714339,["wangy@DESKTOP-LU247VS",[[1,11204,"language\n```\n"]],[11204,11204],[11204,11212]]],[1575454715338,["wangy@DESKTOP-LU247VS",[[-1,11204,"language"],[1,11212,"c"]],[11204,11212],[11205,11205]]],[1575454715856,["wangy@DESKTOP-LU247VS",[[1,11206,"\n"]],[11205,11205],[11206,11206]]],[1575454717320,["wangy@DESKTOP-LU247VS",[[1,11206,"sampler2D _NormalMap;\nfloat _BumpScale;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n\ti.normal.xy *= _BumpScale;\n\ti.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}"]],[11206,11206],[11509,11509]]],[1575454720849,["wangy@DESKTOP-LU247VS",[[1,11514,"\n"]],[11513,11513],[11514,11514]]],[1575454721056,["wangy@DESKTOP-LU247VS",[[1,11515,"\n"]],[11514,11514],[11515,11515]]],[1575454797005,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454797005,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454746990,["wangy@DESKTOP-LU247VS",[[-1,11515,"\n"],[1,11516,"s"]],[11515,11515],[11516,11516]]],[1575454747520,["wangy@DESKTOP-LU247VS",[[-1,11515,"s"],[1,11516,"\n"]],[11516,11516],[11515,11515]]],[1575454748872,["wangy@DESKTOP-LU247VS",[[-1,11515,"\n"]],[11515,11515],[0,0]]],[1575454749730,["wangy@DESKTOP-LU247VS",[[1,0,"\n"]],[0,0],[1,1]]],[1575454755530,["wangy@DESKTOP-LU247VS",[[1,11516,"\n"]],[11515,11515],[11516,11516]]],[1575454762675,["wangy@DESKTOP-LU247VS",[[-1,11516,"\n"],[1,11517,"要得到"]],[11516,11516],[11519,11519]]],[1575454796276,["wangy@DESKTOP-LU247VS",[[1,11519,"和我们使用高度贴图时差不多的强度，把缩放降低到0.25左右。"]],[11519,11519],[11549,11549]]],[1575454857008,[null,[[1,10803,"。"],[-1,10833,"呢"]],[10803,10803],[10833,10833]]],[1575454857008,[null,[[-1,10803,"。"],[1,10834,"呢"]],[10833,10833],[10803,10803]]],[1575454798426,["wangy@DESKTOP-LU247VS",[[1,11549,"\n\n"]],[11549,11549],[11550,11550]]],[1575454799610,["wangy@DESKTOP-LU247VS",[[1,11551,"\n"]],[11550,11550],[11551,11551]]],[1575454803114,["wangy@DESKTOP-LU247VS",[[1,11551,"![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/bump-scale.png)"]],[11551,11551],[11653,11653]]],[1575454806353,["wangy@DESKTOP-LU247VS",[[1,11654,"\n"]],[11653,11653],[11654,11654]]],[1575454806969,["wangy@DESKTOP-LU247VS",[[1,11655,"\n"]],[11654,11654],[11655,11655]]],[1575454810762,["wangy@DESKTOP-LU247VS",[[1,11655,"![quad](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/scaled.png)"]],[11655,11655],[11748,11748]]],[1575454812761,["wangy@DESKTOP-LU247VS",[[1,11749,"\n"]],[11748,11748],[11749,11749]]],[1575454812914,["wangy@DESKTOP-LU247VS",[[1,11750,"\n"]],[11749,11749],[11750,11750]]],[1575454818747,["wangy@DESKTOP-LU247VS",[[1,11750,"![details](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/scaled-details.png)"]],[11750,11750],[11854,11854]]],[1575454820312,["wangy@DESKTOP-LU247VS",[[1,11855,"\n"]],[11854,11854],[11855,11855]]],[1575454820673,["wangy@DESKTOP-LU247VS",[[1,11856,"\n"]],[11855,11855],[11856,11856]]],[1575454832448,["wangy@DESKTOP-LU247VS",[[-1,11856,"\n"],[1,11857,"Unity"]],[11856,11856],[11861,11861]]],[1575454836889,["wangy@DESKTOP-LU247VS",[[1,11861,"Shader"]],[11861,11861],[11867,11867]]],[1575454840042,["wangy@DESKTOP-LU247VS",[[-1,11862,"hader"]],[11867,11867],[11862,11862]]],[1575454851402,["wangy@DESKTOP-LU247VS",[[1,11862,"tandardUtils"]],[11862,11862],[11874,11874]]],[1575454917038,[null,[[1,10803,"。"],[-1,10833,"呢"]],[10803,10803],[10833,10833]]],[1575454917038,[null,[[-1,10803,"。"],[1,10834,"呢"]],[10833,10833],[10803,10803]]],[1575454914455,["wangy@DESKTOP-LU247VS",[[1,11874,"包含了UnpackScaleNormal函数。它会自动地为法线贴图使用正确的编码，并且缩放法线。利用这个方便的函数 "]],[11874,11874],[11932,11932]]],[1575454916823,["wangy@DESKTOP-LU247VS",[[-1,11923,"用这个方便的函数 "]],[11932,11932],[11923,11923]]],[1575454977013,[null,[[1,10803,"。"],[-1,10833,"呢"]],[10803,10803],[10833,10833]]],[1575454977013,[null,[[-1,10803,"。"],[1,10834,"呢"]],[10833,10833],[10803,10803]]],[1575454928538,["wangy@DESKTOP-LU247VS",[[1,11922,"所以，让我们用这个方便的函数。"]],[11922,11922],[11937,11937]]],[1575454932584,["wangy@DESKTOP-LU247VS",[[1,11937,"\n\n"]],[11937,11937],[11938,11938]]],[1575454948688,["wangy@DESKTOP-LU247VS",[[1,11939,"\n"]],[11938,11938],[11939,11939]]],[1575454949155,["wangy@DESKTOP-LU247VS",[[-1,11939,"\n"],[1,11940,"`"]],[11939,11939],[11940,11940]]],[1575454949489,["wangy@DESKTOP-LU247VS",[[1,11940,"``"]],[11940,11940],[11942,11942]]],[1575454949537,["wangy@DESKTOP-LU247VS",[[1,11942,"language\n```\n"]],[11942,11942],[11942,11950]]],[1575454951661,["wangy@DESKTOP-LU247VS",[[-1,11942,"language"],[1,11950,"c"]],[11942,11950],[11943,11943]]],[1575454952496,["wangy@DESKTOP-LU247VS",[[1,11944,"\n"]],[11943,11943],[11944,11944]]],[1575454954051,["wangy@DESKTOP-LU247VS",[[1,11944,"void InitializeFragmentNormal(inout Interpolators i) {\n//\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n//\ti.normal.xy *= _BumpScale;\n//\ti.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));\n\ti.normal = UnpackScaleNormal(tex2D(_NormalMap, i.uv), _BumpScale);\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}"]],[11944,11944],[12277,12277]]],[1575454959447,["wangy@DESKTOP-LU247VS",[[1,12282,"\n"]],[12281,12281],[12282,12282]]],[1575454959647,["wangy@DESKTOP-LU247VS",[[1,12283,"\n"]],[12282,12282],[12283,12283]]],[1575454968158,["wangy@DESKTOP-LU247VS",[[1,12283,"## s"]],[12283,12283],[12287,12287]]],[1575454968713,["wangy@DESKTOP-LU247VS",[[-1,12286,"s"]],[12287,12287],[12286,12286]]],[1575454976733,["wangy@DESKTOP-LU247VS",[[1,12286,"合并反照率和凹凸"]],[12286,12286],[12294,12294]]],[1575455010993,[null,[[1,10803,"。"],[-1,10833,"呢"],[-1,12295,"利"]],[10803,10803],[12295,12295]]],[1575455010993,[null,[[-1,10803,"。"],[1,10834,"呢"],[1,12295,"利"]],[12295,12295],[10803,10803]]],[1575454978258,["wangy@DESKTOP-LU247VS",[[1,12295,"\n"]],[12294,12294],[12295,12295]]],[1575454978825,["wangy@DESKTOP-LU247VS",[[1,12296,"\n"]],[12295,12295],[12296,12296]]],[1575454986268,["wangy@DESKTOP-LU247VS",[[-1,12296,"\n"],[1,12297,"现在"]],[12296,12296],[12298,12298]]],[1575455009566,["wangy@DESKTOP-LU247VS",[[1,12298,"我们有了一个有功能的法线贴图。"]],[12298,12298],[12313,12313]]]],null,"wangy@DESKTOP-LU247VS"],["ec4f7fca-cfca-4c4b-b369-9487927b4af9",1575990799066,"\n\n> 扰动法线模拟凹凸\n>\n> 从高度场计算法线\n>\n> 采样和混合法线\n>\n> 从切线空间转换为世界空间\n\n这是渲染教程系列的第6部分。前一部分增加了对更复杂的照明的支持。这一次，我们将创建更复杂表面的错觉。\n\n本教程是用Unity 5.4.0f3制作的。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/tutorial-image.jpg)\n\n# 凹凸映射\n\n我们可以使用反照率纹理来创建具有复杂颜色图案的材质。我们可以用法线来调整表面的曲率。有了这些工具，我们可以制造出各种各样的表面。然而，一个三角形的表面总是光滑的。它只能在三个法向量之间插值。所以它不能代表粗糙或多变的表面。当放弃反照率纹理而只使用一种纯色时，这一点就很明显了。\n\n体现平滑度的一个很好的例子是一个简单的四边形。添加一个到场景中，通过沿着x轴旋转90°，并使它指向上方。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/flat.png)\n\n因为默认的天空盒非常亮，很难看到其他灯光的作用。在本教程中，我们将其关闭。你可以通过在照明设置中将环境强度降低到零来做到这一点。然后只开启主方向灯。在场景视图中找到一个好的视角，这样你就可以在四边形上看到一些光线的差异。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/ambient-intensity.png)\n\n![scene](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/no-ambient.png)\n\n我们怎样才能使这个四边形看起来不平坦呢？我们可以通过在反照率纹理中加入烘焙阴影来模拟粗糙度。然而，这将是完全静态的。如果灯光改变了，或者物体移动了，阴影也应该改变。否则，假象就会破灭。在镜面反射的情况下，甚至相机都不允许移动。\n\n我们可以改变法线来创建曲面的错觉。但是每四个顶点只有四个法线。这只能产生平滑的过渡。如果我们想要一个多变而粗糙的表面，我们需要更多的法线。\n\n我们可以把四边形分成更小的四边形。这给了我们更多的法线。事实上，一旦我们有更多的顶点，我们也可以移动它们。那么我们就不需要表面粗糙的假象了，我们可以做出一个真正粗糙的表面！但是子四边形仍然有同样的问题。我们还要再细分吗？这将导致大量的网格与大量的三角形。这在创建3D模型时是可行的，但在游戏中并不可行。\n\n## 高度纹理\n\n与平面相比，粗糙的表面具有不均匀的仰角。如果我们将这些高度数据存储在纹理中，我们可能会使用它生成的每个片段的法向量，而不是每个顶点。这个想法被称为凹凸映射，是由James Blinn首先提出的。\n\n这是一个高度贴图，以配合我们的大理石纹理。它是一个RGB纹理，每个通道都设置相同的值。使用默认导入设置其导入到项目中。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/marble-heights.png)\n\n添加一个_HeightMap纹理属性到*My First Lighting Shader*。因为它将使用与我们的反照率相同的UV，所以它不需要自己的缩放和偏移参数。默认的纹理并不重要，只要它是一致的。灰色的就可以了。\n\n```c\n\tProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/heights-inspector.png)\n\n将匹配的变量添加到My Lighting 包含文件中，这样我们就可以访问纹理了。让我们看看它是怎样的，把它与反照率相乘。\n\n```c\nfloat4 _Tint;\nsampler2D _MainTex;\nfloat4 _MainTex_ST;\n\nsampler2D _HeightMap;\n\n…\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\ti.normal = normalize(i.normal);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-color.png)\n\n## 调整法线\n\n因为我们的片段法线将变得更加复杂，我们将它们的初始化移到一个单独的函数中。另外，去掉高度纹理测试代码。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = normalize(i.normal);\n}\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\tInitializeFragmentNormal(i);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n//\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n因为我们现在处理的是一个位于XZ平面上的四边形，它的法向量总是（0，1，0），所以我们可以使用一个常数法向量，忽略顶点数据。我们先做这个，稍后再考虑不同的朝向。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = float3(0, 1, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n我们怎么把高度数据包含进来呢？一种简单的方法是在归一化之前使用高度作为法线的Y分量。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat h = tex2D(_HeightMap, i.uv);\n\ti.normal = float3(0, h, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-normal.png)\n\n这是行不通的，因为归一化会把每个向量都转换回（0，1，0）.我们需要一个不同的方法。\n\n## 有限差分\n\n因为我们处理的是纹理数据，我们有二维数据。有U维度和V维度。这些高度可以被认为是在三维空间中向上的。我们可以说纹理代表了一个函数，f(u,v)=h。我们先把自己限制在U维度上。所以这个函数被简化为f（u）=h。我们能从这个函数推出法向量吗？\n\n如果我们知道函数的斜率，然后我们就可以用它来计算任意点的法向量。斜率由h的变化率决定。这是它的导数。h′。因为h是一个函数的结果，h‘同样也是一个函数的结果。我们有导数函数f’(u)=h‘。\n\n不幸的是，我们不知道这些函数是什么。但是我们可以近似它们。我们可以比较纹理中两个不同点的高度。例如，在极端情况下，使用U坐标0和1。这两个样本之间的插值就是坐标之间的变化率，用函数表示，即f(1)-f(0)。我们可以使用它来构建一个切线向量，![1574845121482](1574845121482.png)。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent-diagram.png)\n\n![1574845208030](1574845208030.png)\n\n这当然是对切向量的粗略近似。它把整个纹理当作一个线性的斜率。我们可以通过采样两个距离更近的点来做得更好。例如，U坐标取0和1/2.在两个点之间的变化率是f(1/2 )-f(0)。半个单位的U。因为处理每整个单位的变化率比较简单，我们用它除以两点之间的距离。所以我们得到![1574847363057](1574847363057.png)。这就得到了切向量![1574847393342](1574847393342.png)。\n\n一般来说，我们要做的是相对于我们渲染的每个片段的U坐标。到下一点的距离由一个常数定义。它的导数是通过![1574849122811](1574849122811.png)来近似。\n\nδ越小，我们近似的导数就越接近于真实。当然它不可能变成零，但当达到理论极限时，你得到![1574849339141](1574849339141.png)。这种近似导数的方法称为有限差分法。有了它，我们可以构造任意点的切向量，![1574850029282](1574850029282.png)。\n\n## 从切线到法线\n\n在我们的着色器代码中，可以用什么值去当作是δ 。最小的感知差异将覆盖我们纹理的单个像素。我们可以通过一个带有_TexelSize后缀float4类型的变量在着色器中获取这些信息。Unity设置那些变量，类似于__ST变量。\n\n**_TexelSize变量中存储了什么？**\n\n> 它的前两个分量包含了Texel的大小，就像U和V一样。其他两个分量包含像素的数量。例如，在256×128大小的纹理中，它将包含(0.00390625, 0.0078125, 256, 128)。\n\n现在我们可以对纹理采样两次，计算高度导数，并构造一个切向量。我们直接用它作为法向量。\n\n```c\n    float2 delta = float2(_HeightMap_TexelSize.x, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(1, (h2 - h1) / delta.x, 0);\n\n\ti.normal = normalize(i.normal);\n```\n\n事实上，因为我们会归一化。我们可以扩展我们的切向量δ。这消除了除法并提高了精度。\n\n```c\ni.normal = float3(delta.x, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent.png)\n\n我们得到了一个非常明显的结果。这是因为这些高度只有一个单位范围，这就产生了非常陡峭的斜坡。由于扰动的法线并不会改变表面，所以我们不希望有如此大的差异。我们可以用任意因子来缩放高度。让我们将范围缩小到单个Texel。我们可以通过乘以δ的高度差，或简单地在切向处用1取代δ。\n\n```c\n\ti.normal = float3(1, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/scaled-height.png)\n\n这看起来不错，但是灯光不对。这看起来太暗了。因为我们直接用正切作为法向量。为了把它变成一个向上的法向量，我们必须绕Z轴旋转tangent 90°。\n\n```c\ni.normal = float3(h1 - h2, 1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/rotated.png)\n\n**矢量旋转是如何工作的？**\n\n你可以通过交换向量的X和Y向量，以及翻转新的X分量的符号来逆时针旋转一个2D向量90°。最后得到![1575016532726](1575016532726.png)\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/vector-rotation.png)\n\n## 中心差分\n\n我们已经使用有限差分近似来创建法向量。具体来说，是通过使用正向差分法。我们取一个点，然后看一个方向来确定斜率。结果，法线是偏向那个方向的。为了得到法向的更好的近似值，我们可以在两个方向上偏移采样点。这种方法将线性逼近集中在当前点上，称为中心差分法。这就把导数变成了![1575017187421](1575017187421.png)。\n\n```c\n\tfloat2 delta = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv - delta);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(h1 - h2, 1, 0);\n```\n\n这稍微移动了凹凸点，使它们更好地与高度场对齐。除此之外，它们的形状不会改变。\n\n## 使用两个维度\n\n我们创建的法线只考虑沿U方向的变化。我们已经使用了函数f(u,v)关于u的偏微分。就是![1575018677399](1575018677399.png)，或者简写为 f<sub>u</sub><sup>‘</sup>。我们可以通过使用f<sub>u</sub><sup>’</sup>沿着V创建法线。在这种情况下，那么切向量是![1575020057277](1575020057277.png)并且法向量是![1575020086626](1575020086626.png)。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\ti.normal = float3(u1 - u2, 1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\ti.normal = float3(0, 1, v1 - v2);\n\n\ti.normal = normalize(i.normal);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/other-dimension.png)\n\n我们现在可以得到U和V的切线。这些向量一起描述了在片段处表面的高度场。通过计算他们的外积，我们的得到了二维高度场的法向量。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\tfloat3 tv = float3(0, v2 - v1, 1);\n\n\ti.normal = cross(tv, tu);\n\ti.normal = normalize(i.normal);\n```\n\n![quad](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals.png)\n\n![details](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals-details.png)\n\n当你计算切向量的外积时，你会看到![1575021052831](1575021052831.png)。\t所以我们可以直接构造这个向量，而不是依赖于叉乘函数。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n//\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n//\tfloat3 tv = float3(0, v2 - v1, 1);\n\n//\ti.normal = cross(tv, tu);\n\ti.normal = float3(u1 - u2, 1, v1 - v2);\n\ti.normal = normalize(i.normal);\n}\n```\n\n# 法线映射\n\n当凹凸贴图工作时，我们必须执行多个纹理样本和有限差分计算。这似乎是一种浪费，因为结果的法线应该总是相同的。为什么每帧做所有这些工作？我们可以只做一次，将法线存储在一个纹理中。\n\n这意味着我们需要一个法线贴图。我可以提供一个，但我们可以让Unity为我们做这些工作。将高度贴图的纹理类型改为法线贴图。Unity自动切换纹理去使用三线性过滤，并假设我们想要使用灰度图像数据来生成一个法线贴图。这正是我们想要的。但是将凹凸度为更低的值，比如0.05。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/inspector.png)\n\n![preview](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/preview.png)\n\n应用了导入设置后，Unity将计算法线贴图。原始的高度地图仍然存在，但Unity内部使用生成的地图。\n\n就像我们在法线可视化为颜色时所做的那样，它们必须进行调整以适应0-1的范围。所以它们被存储为\n\n$$\nx = \\frac{N+1}{2}\n$$\n\n这假设平坦区域会呈现浅绿色。然而，它们却呈现为淡蓝色。这是因为法向纹理最常见的约定是将向上的方向存储在z分量中。在Unity看来，Y和Z坐标是交换的。\n\n## 对法线贴图采样\n\n因为法线贴图和高度贴图有很大的不同，要相应地重命名着色器属性。\n\n```c\nProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n![使用一个法线贴图](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/material-with-normal-map.png)\n\n我们可以删除所有的高度贴图代码，并将其替换为一个纹理采样，然后进行归一化。\n\n```c\nsampler2D _NormalMap;\n\n//sampler2D _HeightMap;\n//float4 _HeightMap_TexelSize;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = tex2D(_NormalMap, i.uv).rgb;\n\ti.normal = normalize(i.normal);\n}\n```\n\n当然，我们必须通过计算2N-1来将法线转换回它们原来的-1~1的范围。\n\n```c\ni.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;\n```\n\n此外，记得要交换Y和Z。\n\n```c\n    i.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;\n\ti.normal = i.normal.xzy;\n```\n\n![使用一个法线贴图](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/normals.png)\n\n## DXT5nm\n\n我们的法线肯定是有一些问题的。这是因为Unity最终以一种不同于我们预期的方式对法线进行编码。即使纹理预览是RGB编码。Unity实际上使用的是DXT5nm。\n\nDXT5nm格式只存储法线的X和Y分量。它的Z分量被丢弃。正如你所期望的，Y分量存储在G通道中。但是，X分量存储在A通道中。没有使用R和B通道。\n\n因此，当使用DXT5nm时，我们只能检索正常的前两个分量。\n\n```c\n\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n```\n\n我们必须从其他两项中推断出第三项。因为法向量是单位向量。\n\n$$\n||N||^2=N_x^2+N_y^2+N_z^2=1。然后N_z=\\sqrt[]{1-N_x^2-N_y^2}。\n$$\n\n```c\n        i.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n\ti.normal.z = sqrt(1 - dot(i.normal.xy, i.normal.xy));\n\ti.normal = i.normal.xzy;\n```\n\n理论上，结果应该等于原始的Z分量。但是，由于纹理的精度有限，而且由于纹理滤波，结果往往有所不同，不过已经很接近了。\n\n此外，由于精度限制，\n$$\nN_x^2+N_y^2\n$$\n\n可能会超出界限。通过限制点积，确保不会发生这种事情。\n\n```c\ni.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));\n```\n\n![解码DXT5nm法线](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/dxt5nm.png)\n\n## 缩放凹凸\n\n因为我们把法线烘焙成纹理，我们不能在片段着色器中缩放它。\n\n我们可以在计算Z之前缩放法线的X和Y分量。如果我们减少X和Y，那么Z会变大，导致一个更平坦的表面。如果我们增加它们，相反的情况会发生。我们可以这样调整凹凸度。因为我们已经限制和X和Y的平方，我们永远不会得到无效的法线。\n\n让我们添加一个凹凸缩放属性到我们的着色器，就像Unity的标准着色器一样。\n\n```c\nProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n\t\t_BumpScale (\"Bump Scale\", Float) = 1\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n把这个缩放纳入我们的正常计算。\n\n```c\nsampler2D _NormalMap;\nfloat _BumpScale;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n\ti.normal.xy *= _BumpScale;\n\ti.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}\n```\n\n要得到和我们使用高度贴图时差不多的强度，把缩放降低到0.25左右。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/bump-scale.png)\n\n![quad](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/scaled.png)\n\n![details](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/scaled-details.png)\n\nUnityStandardUtils包含了UnpackScaleNormal函数。它会自动地为法线贴图使用正确的编码，并且缩放法线。所以，让我们用这个方便的函数。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n//\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n//\ti.normal.xy *= _BumpScale;\n//\ti.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));\n\ti.normal = UnpackScaleNormal(tex2D(_NormalMap, i.uv), _BumpScale);\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}\n```\n\n## 合并反照率和凹凸\n\n现在我们有了一个有功能的法线贴图。",[[1575990776016,["wangyan@DESKTOP-09VD06C",[[1,12313,"nike"]],[12313,12313],[12317,12317]]],[1575990777108,["wangyan@DESKTOP-09VD06C",[[-1,12313,"nike"]],[12317,12317],[12313,12313]]],[1575990797033,["wangyan@DESKTOP-09VD06C",[[1,12313,"你可以检查她的不同之处。"]],[12313,12313],[12325,12325]]],[1575990856592,["wangyan@DESKTOP-09VD06C",[[1,12326,"只使用大理石反照率纹理，我们的四方网格看起来像完美抛光的石头。"]],[12326,12326],[12357,12357]]],[1575990917983,[null,[[1,12325,"当"]],[12325,12325],[12326,12326]]],[1575990917983,[null,[[-1,12325,"当"]],[12326,12326],[12325,12325]]],[1575990881703,["wangyan@DESKTOP-09VD06C",[[1,12357,"添加了法线纹理之后，它会变成一个"]],[12357,12357],[12373,12373]]],[1575990904301,["wangyan@DESKTOP-09VD06C",[[-1,12370,"成一个"]],[12373,12373],[12370,12370]]],[1575990908990,["wangyan@DESKTOP-09VD06C",[[1,12370,"得有更多得"]],[12370,12370],[12375,12375]]],[1575990909982,["wangyan@DESKTOP-09VD06C",[[-1,12374,"得"]],[12375,12375],[12374,12374]]],[1575990912816,["wangyan@DESKTOP-09VD06C",[[1,12374,"的细节。"]],[12374,12374],[12378,12378]]],[1575990913054,["wangyan@DESKTOP-09VD06C",[[1,12378,"\n\n"]],[12378,12378],[12379,12379]]],[1575990917102,["wangyan@DESKTOP-09VD06C",[[1,12380,"\n"]],[12379,12379],[12380,12380]]],[1575990917398,["wangyan@DESKTOP-09VD06C",[[1,12380,"![without](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/without-bumps.png)"]],[12380,12380],[12483,12483]]],[1575990977981,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575990977981,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575990919022,["wangyan@DESKTOP-09VD06C",[[1,12484,"\n"]],[12483,12483],[12484,12484]]],[1575990922638,["wangyan@DESKTOP-09VD06C",[[1,12484,"![with](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/with-bumps.png)"]],[12484,12484],[12581,12581]]],[1575990924310,["wangyan@DESKTOP-09VD06C",[[1,12484,"\n"]],[12483,12483],[12484,12484]]],[1575990926094,["wangyan@DESKTOP-09VD06C",[[1,12583,"\n"]],[12582,12582],[12583,12583]]],[1575990926406,["wangyan@DESKTOP-09VD06C",[[1,12584,"\n"]],[12583,12583],[12584,12584]]],[1575990942495,["wangyan@DESKTOP-09VD06C",[[1,12584,"# 凹凸细节"]],[12584,12584],[12590,12590]]],[1575990942733,["wangyan@DESKTOP-09VD06C",[[1,12591,"\n"]],[12590,12590],[12591,12591]]],[1575990943477,["wangyan@DESKTOP-09VD06C",[[1,12592,"\n"]],[12591,12591],[12592,12592]]],[1575990950898,["wangyan@DESKTOP-09VD06C",[[-1,12592,"\n"],[1,12593,"在第三"]],[12592,12592],[12595,12595]]],[1575990951109,["wangyan@DESKTOP-09VD06C",[[-1,12594,"三"]],[12595,12595],[12594,12594]]],[1575990977423,["wangyan@DESKTOP-09VD06C",[[1,12594,"3部分——合并纹理中，我们创建了一个带有细节纹理的"]],[12594,12594],[12619,12619]]],[1575991037984,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991037984,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575990986432,["wangyan@DESKTOP-09VD06C",[[1,12619,"着色器。我们用反照率"]],[12619,12619],[12629,12629]]],[1575990998521,["wangyan@DESKTOP-09VD06C",[[1,12625,"是"]],[12625,12625],[12626,12626]]],[1575991001353,["wangyan@DESKTOP-09VD06C",[[1,12625,"那"]],[12625,12625],[12626,12626]]],[1575991029911,["wangyan@DESKTOP-09VD06C",[[1,12631,"去实现的，但现在我们也可以用凹凸纹理来实现。首先，添加"]],[12631,12631],[12658,12658]]],[1575991097985,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991097985,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991097210,["wangyan@DESKTOP-09VD06C",[[1,12658,"对细节反照率"]],[12658,12658],[12664,12664]]],[1575991157987,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991157987,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991128921,["wangyan@DESKTOP-09VD06C",[[1,12664,"到My First Lighting着色器中。"]],[12664,12664],[12687,12687]]],[1575991141038,["wangyan@DESKTOP-09VD06C",[[1,12664,"支持"]],[12664,12664],[12666,12666]]],[1575991144310,["wangyan@DESKTOP-09VD06C",[[1,12689,"\n\n"]],[12689,12689],[12690,12690]]],[1575991154711,["wangyan@DESKTOP-09VD06C",[[1,12691,"\n"]],[12690,12690],[12691,12691]]],[1575991155250,["wangyan@DESKTOP-09VD06C",[[-1,12691,"\n"],[1,12692,"`"]],[12691,12691],[12692,12692]]],[1575991155616,["wangyan@DESKTOP-09VD06C",[[1,12692,"``"]],[12692,12692],[12694,12694]]],[1575991155656,["wangyan@DESKTOP-09VD06C",[[1,12694,"language\n```\n"]],[12694,12694],[12694,12702]]],[1575991157816,["wangyan@DESKTOP-09VD06C",[[-1,12694,"language"],[1,12702,"c"]],[12694,12702],[12695,12695]]],[1575991217992,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991217992,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991158327,["wangyan@DESKTOP-09VD06C",[[1,12696,"\n"]],[12695,12695],[12696,12696]]],[1575991159470,["wangyan@DESKTOP-09VD06C",[[1,12696,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n\t\t_BumpScale (\"Bump Scale\", Float) = 1\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t\t_DetailTex (\"Detail Texture\", 2D) = \"gray\" {}\n\t}"]],[12696,12696],[13031,13031]]],[1575991163349,["wangyan@DESKTOP-09VD06C",[[1,13036,"\n"]],[13035,13035],[13036,13036]]],[1575991163511,["wangyan@DESKTOP-09VD06C",[[1,13037,"\n"]],[13036,13036],[13037,13037]]],[1575991173677,["wangyan@DESKTOP-09VD06C",[[1,13037,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/detail-inspector.png)"]],[13037,13037],[13134,13134]]],[1575991202129,["wangyan@DESKTOP-09VD06C",[[1,13039,"添加了细节反照率的"]],[13039,13039],[13048,13048]]],[1575991205165,["wangyan@DESKTOP-09VD06C",[[-1,13047,"的"]],[13048,13048],[13047,13047]]],[1575991207038,["wangyan@DESKTOP-09VD06C",[[1,13143,"\n"]],[13142,13142],[13143,13143]]],[1575991207182,["wangyan@DESKTOP-09VD06C",[[1,13144,"\n"]],[13143,13143],[13144,13144]]],[1575991277993,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991277993,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991240817,["wangyan@DESKTOP-09VD06C",[[-1,13144,"\n"],[1,13145,"我们"]],[13144,13144],[13146,13146]]],[1575991267783,["wangyan@DESKTOP-09VD06C",[[1,13146,"不需要为细节纹理UV添加到一个差之奇"]],[13146,13146],[13164,13164]]],[1575991268598,["wangyan@DESKTOP-09VD06C",[[-1,13161,"差之奇"]],[13164,13164],[13161,13161]]],[1575991276273,["wangyan@DESKTOP-09VD06C",[[1,13161,"插值器中，二十手动"]],[13161,13161],[13170,13170]]],[1575991337994,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991337994,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991318255,["wangyan@DESKTOP-09VD06C",[[1,13170,"将主UV和细节纹理UV打包到一个插值器中。主纹理UV是XY，细节纹理UV"]],[13170,13170],[13206,13206]]],[1575991319609,["wangyan@DESKTOP-09VD06C",[[1,13204,"的"]],[13204,13204],[13205,13205]]],[1575991323880,["wangyan@DESKTOP-09VD06C",[[1,13207,"是ZW。"]],[13207,13207],[13211,13211]]],[1575991324375,["wangyan@DESKTOP-09VD06C",[[1,13211,"\n\n"]],[13211,13211],[13212,13212]]],[1575991325847,["wangyan@DESKTOP-09VD06C",[[1,13213,"\n"]],[13212,13212],[13213,13213]]],[1575991335319,["wangyan@DESKTOP-09VD06C",[[1,13214,"\n"]],[13212,13212],[13213,13213]]],[1575991336505,["wangyan@DESKTOP-09VD06C",[[1,13213,"```"]],[13213,13213],[13216,13216]]],[1575991336546,["wangyan@DESKTOP-09VD06C",[[1,13216,"language\n```\n"]],[13216,13216],[13216,13224]]],[1575991337840,["wangyan@DESKTOP-09VD06C",[[-1,13216,"language"],[1,13224,"c"]],[13216,13224],[13217,13217]]],[1575991397997,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991397997,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991338429,["wangyan@DESKTOP-09VD06C",[[1,13218,"\n"]],[13217,13217],[13218,13218]]],[1575991339070,["wangyan@DESKTOP-09VD06C",[[1,13218,"struct Interpolators {\n\tfloat4 position : SV_POSITION;\n//\tfloat2 uv : TEXCOORD0;\n\tfloat4 uv : TEXCOORD0;\n\tfloat3 normal : TEXCOORD1;\n\tfloat3 worldPos : TEXCOORD2;\n\n\t#if defined(VERTEXLIGHT_ON)\n\t\tfloat3 vertexLightColor : TEXCOORD3;\n\t#endif\n};"]],[13218,13218],[13460,13460]]],[1575991340597,["wangyan@DESKTOP-09VD06C",[[1,13461,"\n"]],[13460,13460],[13461,13461]]],[1575991341909,["wangyan@DESKTOP-09VD06C",[[-1,13461,"\n"]],[13461,13461],[13460,13460]]],[1575991343712,["wangyan@DESKTOP-09VD06C",[[1,13464,"\\"]],[13464,13464],[13465,13465]]],[1575991343772,["wangyan@DESKTOP-09VD06C",[[1,13468,"\n"]],[13465,13465],[13466,13466]]],[1575991344782,["wangyan@DESKTOP-09VD06C",[[-1,13468,"\n"]],[13466,13466],[13465,13465]]],[1575991345205,["wangyan@DESKTOP-09VD06C",[[-1,13464,"\\"]],[13465,13465],[13464,13464]]],[1575991345702,["wangyan@DESKTOP-09VD06C",[[1,13467,"\n"]],[13464,13464],[13465,13465]]],[1575991346078,["wangyan@DESKTOP-09VD06C",[[1,13468,"\n"]],[13465,13465],[13466,13466]]],[1575991353750,["wangyan@DESKTOP-09VD06C",[[-1,13468,"\n"]],[13467,13467],[13466,13466]]],[1575991354632,["wangyan@DESKTOP-09VD06C",[[1,13466,"s"]],[13466,13466],[13467,13467]]],[1575991355301,["wangyan@DESKTOP-09VD06C",[[-1,13466,"s"]],[13467,13467],[13466,13466]]],[1575991380832,["wangyan@DESKTOP-09VD06C",[[1,13466,"添加所需的变量，然后把"]],[13466,13466],[13477,13477]]],[1575991394309,["wangyan@DESKTOP-09VD06C",[[-1,13476,"把"]],[13477,13477],[13476,13476]]],[1575991395663,["wangyan@DESKTOP-09VD06C",[[1,13476,"在"]],[13476,13476],[13477,13477]]],[1575991457997,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991457998,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991410441,["wangyan@DESKTOP-09VD06C",[[1,13477,"顶点程序中填入插值器。"]],[13477,13477],[13488,13488]]],[1575991411646,["wangyan@DESKTOP-09VD06C",[[1,13490,"\n"]],[13488,13488],[13489,13489]]],[1575991412126,["wangyan@DESKTOP-09VD06C",[[1,13491,"\n"]],[13489,13489],[13490,13490]]],[1575991418369,["wangyan@DESKTOP-09VD06C",[[1,13490,"```"]],[13490,13490],[13493,13493]]],[1575991418409,["wangyan@DESKTOP-09VD06C",[[1,13493,"language\n```\n"]],[13493,13493],[13493,13501]]],[1575991419321,["wangyan@DESKTOP-09VD06C",[[-1,13493,"language"],[1,13501,"c"]],[13493,13501],[13494,13494]]],[1575991420168,["wangyan@DESKTOP-09VD06C",[[1,13495,"\n"]],[13494,13494],[13495,13495]]],[1575991420662,["wangyan@DESKTOP-09VD06C",[[1,13495,"sampler2D _MainTex, _DetailTex;\nsampler2D _MainTex, _DetailTex;\nfloat4 _MainTex_ST, _DetailTex_ST;\n\n…\n\nInterpolators MyVertexProgram (VertexData v) {\n\tInterpolators i;\n\ti.position = mul(UNITY_MATRIX_MVP, v.position);\n\ti.worldPos = mul(unity_ObjectToWorld, v.position);\n\ti.normal = UnityObjectToWorldNormal(v.normal);\n\ti.uv.xy = TRANSFORM_TEX(v.uv, _MainTex);\n\ti.uv.zw = TRANSFORM_TEX(v.uv, _DetailTex);\n\tComputeVertexLightColor(i);\n\treturn i;\n}"]],[13495,13495],[13939,13939]]],[1575991424574,["wangyan@DESKTOP-09VD06C",[[1,13946,"\n"]],[13943,13943],[13944,13944]]],[1575991425032,["wangyan@DESKTOP-09VD06C",[[1,13947,"\n"]],[13944,13944],[13945,13945]]],[1575991457089,["wangyan@DESKTOP-09VD06C",[[1,13945,"现在我们应该使用i.uv.xy而不是i.uv。"]],[13945,13945],[13968,13968]]],[1575991517999,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991517999,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991473497,["wangyan@DESKTOP-09VD06C",[[1,13947,"当我们使用主纹理UV时，"]],[13947,13947],[13959,13959]]],[1575991477461,["wangyan@DESKTOP-09VD06C",[[-1,13959,"我们"]],[13961,13961],[13959,13959]]],[1575991482694,["wangyan@DESKTOP-09VD06C",[[1,13981,"\n"]],[13979,13979],[13980,13980]]],[1575991483698,["wangyan@DESKTOP-09VD06C",[[1,13980,"```"]],[13980,13980],[13983,13983]]],[1575991483736,["wangyan@DESKTOP-09VD06C",[[1,13983,"language\n```\n"]],[13983,13983],[13983,13991]]],[1575991484713,["wangyan@DESKTOP-09VD06C",[[-1,13983,"language"],[1,13991,"c"]],[13983,13991],[13984,13984]]],[1575991484973,["wangyan@DESKTOP-09VD06C",[[1,13985,"\n"]],[13984,13984],[13985,13985]]],[1575991491038,["wangyan@DESKTOP-09VD06C",[[1,13985,"void InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = UnpackScaleNormal(tex2D(_NormalMap, i.uv.xy), _BumpScale);\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\tInitializeFragmentNormal(i);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv.xy).rgb * _Tint.rgb;\n\n\t…\n}"]],[13985,13985],[14390,14390]]],[1575991493967,["wangyan@DESKTOP-09VD06C",[[1,14397,"\n"]],[14395,14395],[14396,14396]]],[1575991578002,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991578002,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991524777,["wangyan@DESKTOP-09VD06C",[[1,14396,"在"]],[14396,14396],[14397,14397]]],[1575991526342,["wangyan@DESKTOP-09VD06C",[[-1,14396,"在"]],[14397,14397],[14396,14396]]],[1575991544081,["wangyan@DESKTOP-09VD06C",[[1,14396,"将细节纹理作为一个因子与反照率相乘。"]],[14396,14396],[14414,14414]]],[1575991544398,["wangyan@DESKTOP-09VD06C",[[1,14416,"\n"]],[14414,14414],[14415,14415]]],[1575991545143,["wangyan@DESKTOP-09VD06C",[[1,14417,"\n"]],[14415,14415],[14416,14416]]],[1575991551240,["wangyan@DESKTOP-09VD06C",[[1,14416,"```"]],[14416,14416],[14419,14419]]],[1575991551279,["wangyan@DESKTOP-09VD06C",[[1,14419,"language\n```\n"]],[14419,14419],[14419,14427]]],[1575991552281,["wangyan@DESKTOP-09VD06C",[[-1,14419,"language"],[1,14427,"v"]],[14419,14427],[14420,14420]]],[1575991553517,["wangyan@DESKTOP-09VD06C",[[-1,14419,"v"]],[14420,14420],[14419,14419]]],[1575991553689,["wangyan@DESKTOP-09VD06C",[[1,14419,"c"]],[14419,14419],[14420,14420]]],[1575991553894,["wangyan@DESKTOP-09VD06C",[[1,14421,"\n"]],[14420,14420],[14421,14421]]],[1575991555038,["wangyan@DESKTOP-09VD06C",[[1,14421,"\tfloat3 albedo = tex2D(_MainTex, i.uv.xy).rgb * _Tint.rgb;\n\talbedo *= tex2D(_DetailTex, i.uv.zw) * unity_ColorSpaceDouble;"]],[14421,14421],[14543,14543]]],[1575991556936,["wangyan@DESKTOP-09VD06C",[[1,14550,"\n"]],[14547,14547],[14548,14548]]],[1575991557237,["wangyan@DESKTOP-09VD06C",[[1,14551,"\n"]],[14548,14548],[14549,14549]]],[1575991569279,["wangyan@DESKTOP-09VD06C",[[1,14549,"![with](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/with-bumps.png)"]],[14549,14549],[14644,14644]]],[1575991576598,["wangyan@DESKTOP-09VD06C",[[1,14549,"\n"]],[14549,14549],[14550,14550]]],[1575991577342,["wangyan@DESKTOP-09VD06C",[[1,14549,"![without](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/without-bumps.png)"]],[14549,14549],[14650,14650]]],[1575991638003,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991638003,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991581150,["wangyan@DESKTOP-09VD06C",[[1,14749,"\n"]],[14747,14747],[14748,14748]]],[1575991590361,["wangyan@DESKTOP-09VD06C",[[1,14748,"## s"]],[14748,14748],[14752,14752]]],[1575991590948,["wangyan@DESKTOP-09VD06C",[[-1,14751,"s"]],[14752,14752],[14751,14751]]],[1575991601882,["wangyan@DESKTOP-09VD06C",[[1,14751,"细节法线贴图"]],[14751,14751],[14757,14757]]],[1575991602303,["wangyan@DESKTOP-09VD06C",[[1,14759,"\n"]],[14757,14757],[14758,14758]]],[1575991602494,["wangyan@DESKTOP-09VD06C",[[1,14760,"\n"]],[14758,14758],[14759,14759]]],[1575991634721,["wangyan@DESKTOP-09VD06C",[[1,14759,"由于大理石材质的细节纹理时灰度值，我们可以使用它来"]],[14759,14759],[14784,14784]]],[1575991698005,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991698005,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991696267,["wangyan@DESKTOP-09VD06C",[[1,14784,"生成法线贴图。赋值它并将其导入类型更改为Normal Map。把它的凹凸值"]],[14784,14784],[14821,14821]]],[1575991758006,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991758006,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991717890,["wangyan@DESKTOP-09VD06C",[[1,14821,"降低到0.1左右，保持其他设置不变。"]],[14821,14821],[14839,14839]]],[1575991718087,["wangyan@DESKTOP-09VD06C",[[1,14841,"\n"]],[14839,14839],[14840,14840]]],[1575991718263,["wangyan@DESKTOP-09VD06C",[[1,14842,"\n"]],[14840,14840],[14841,14841]]],[1575991818007,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991818007,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991774759,["wangyan@DESKTOP-09VD06C",[[1,14841,"![without](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/without-bumps.png)"]],[14841,14841],[14942,14942]]],[1575991775576,["wangyan@DESKTOP-09VD06C",[[-1,14841,"![without](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/without-bumps.png)"]],[14942,14942],[14841,14841]]],[1575991779263,["wangyan@DESKTOP-09VD06C",[[1,14841,"As we're fading out the mipmaps, the colors fade to gray. As a result, the detail normal map that Unity generates fades to flat. So they fade out together."]],[14841,14841],[14996,14996]]],[1575991782110,["wangyan@DESKTOP-09VD06C",[[1,14998,"\n"]],[14996,14996],[14997,14997]]],[1575991782952,["wangyan@DESKTOP-09VD06C",[[1,14999,"\n"]],[14997,14997],[14998,14998]]],[1575991786734,["wangyan@DESKTOP-09VD06C",[[1,14998,"![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/detail-normals-inspector.png)"]],[14998,14998],[15112,15112]]],[1575991792775,["wangyan@DESKTOP-09VD06C",[[1,15114,"\n"]],[15112,15112],[15113,15113]]],[1575991792920,["wangyan@DESKTOP-09VD06C",[[1,15115,"\n"]],[15113,15113],[15114,15114]]],[1575991793206,["wangyan@DESKTOP-09VD06C",[[1,15114,"![preview](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/detail-normals-preview.png)"]],[15114,15114],[15224,15224]]],[1575991793871,["wangyan@DESKTOP-09VD06C",[[1,15226,"\n"]],[15224,15224],[15225,15225]]],[1575991794151,["wangyan@DESKTOP-09VD06C",[[1,15227,"\n"]],[15225,15225],[15226,15226]]],[1575991817553,["wangyan@DESKTOP-09VD06C",[[1,15226,"为细节"]],[15226,15226],[15229,15229]]],[1575991878010,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991878010,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991860570,["wangyan@DESKTOP-09VD06C",[[1,15229,"法线添加一个属性到我们的着色器中，并赋予它一个凹凸缩放。"]],[15229,15229],[15257,15257]]],[1575991860759,["wangyan@DESKTOP-09VD06C",[[1,15259,"\n"]],[15257,15257],[15258,15258]]],[1575991861847,["wangyan@DESKTOP-09VD06C",[[1,15260,"\n"]],[15258,15258],[15259,15259]]],[1575991867929,["wangyan@DESKTOP-09VD06C",[[1,15259,"```"]],[15259,15259],[15262,15262]]],[1575991867970,["wangyan@DESKTOP-09VD06C",[[1,15262,"language\n```\n"]],[15262,15262],[15262,15270]]],[1575991868849,["wangyan@DESKTOP-09VD06C",[[-1,15262,"language"],[1,15270,"c"]],[15262,15270],[15263,15263]]],[1575991869654,["wangyan@DESKTOP-09VD06C",[[1,15264,"\n"]],[15263,15263],[15264,15264]]],[1575991870398,["wangyan@DESKTOP-09VD06C",[[1,15264,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n\t\t_BumpScale (\"Bump Scale\", Float) = 1\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t\t_DetailTex (\"Detail Texture\", 2D) = \"gray\" {}\n\t\t[NoScaleOffset] _DetailNormalMap (\"Detail Normals\", 2D) = \"bump\" {}\n\t\t_DetailBumpScale (\"Detail Bump Scale\", Float) = 1\n\t}"]],[15264,15264],[15721,15721]]],[1575991872135,["wangyan@DESKTOP-09VD06C",[[1,15728,"\n"]],[15725,15725],[15726,15726]]],[1575991872311,["wangyan@DESKTOP-09VD06C",[[1,15729,"\n"]],[15726,15726],[15727,15727]]],[1575991938014,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991938014,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991878903,["wangyan@DESKTOP-09VD06C",[[1,15727,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/detail-bumps-inspector.png)"]],[15727,15727],[15830,15830]]],[1575991902600,["wangyan@DESKTOP-09VD06C",[[1,15729,"细节法线纹理和缩放值"]],[15729,15729],[15739,15739]]],[1575991903423,["wangyan@DESKTOP-09VD06C",[[1,15843,"\n"]],[15840,15840],[15841,15841]]],[1575991903623,["wangyan@DESKTOP-09VD06C",[[1,15844,"\n"]],[15841,15841],[15842,15842]]],[1575991936882,["wangyan@DESKTOP-09VD06C",[[1,15842,"添加所需的变量并获取细节法线纹理"]],[15842,15842],[15858,15858]]],[1575991998017,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575991998017,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575991995498,["wangyan@DESKTOP-09VD06C",[[1,15858,"，就像主法线纹理一样。在我们合并它们之前，显示正常的细节法线。"]],[15858,15858],[15889,15889]]],[1575991995735,["wangyan@DESKTOP-09VD06C",[[1,15892,"\n"]],[15889,15889],[15890,15890]]],[1575991996480,["wangyan@DESKTOP-09VD06C",[[1,15893,"\n"]],[15890,15890],[15891,15891]]],[1575992058017,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575992058017,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575992002314,["wangyan@DESKTOP-09VD06C",[[1,15891,"```"]],[15891,15891],[15894,15894]]],[1575992002358,["wangyan@DESKTOP-09VD06C",[[1,15894,"language\n```\n"]],[15894,15894],[15894,15902]]],[1575992004130,["wangyan@DESKTOP-09VD06C",[[-1,15894,"language"],[1,15902,"c"]],[15894,15902],[15895,15895]]],[1575992004455,["wangyan@DESKTOP-09VD06C",[[1,15896,"\n"]],[15895,15895],[15896,15896]]],[1575992005270,["wangyan@DESKTOP-09VD06C",[[1,15896,"sampler2D _NormalMap, _DetailNormalMap;\nfloat _BumpScale, _DetailBumpScale;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = UnpackScaleNormal(tex2D(_NormalMap, i.uv.xy), _BumpScale);\n\ti.normal =\n\t\tUnpackScaleNormal(tex2D(_DetailNormalMap, i.uv.zw), _DetailBumpScale);\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}"]],[15896,15896],[16247,16247]]],[1575992007543,["wangyan@DESKTOP-09VD06C",[[1,16255,"\n"]],[16251,16251],[16252,16252]]],[1575992007759,["wangyan@DESKTOP-09VD06C",[[1,16256,"\n"]],[16252,16252],[16253,16253]]],[1575992011671,["wangyan@DESKTOP-09VD06C",[[1,16253,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/detail-normals.png)"]],[16253,16253],[16348,16348]]],[1575992022810,["wangyan@DESKTOP-09VD06C",[[1,16255,"细节凹凸"]],[16255,16255],[16259,16259]]],[1575992024696,["wangyan@DESKTOP-09VD06C",[[1,16356,"\n"]],[16352,16352],[16353,16353]]],[1575992024871,["wangyan@DESKTOP-09VD06C",[[1,16357,"\n"]],[16353,16353],[16354,16354]]],[1575992042499,["wangyan@DESKTOP-09VD06C",[[1,16354,"## 合并法线"]],[16354,16354],[16361,16361]]],[1575992042711,["wangyan@DESKTOP-09VD06C",[[1,16365,"\n"]],[16361,16361],[16362,16362]]],[1575992043358,["wangyan@DESKTOP-09VD06C",[[1,16366,"\n"]],[16362,16362],[16363,16363]]],[1575992056130,["wangyan@DESKTOP-09VD06C",[[1,16363,"我们把"]],[16363,16363],[16366,16366]]],[1575992118017,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575992118017,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575992101339,["wangyan@DESKTOP-09VD06C",[[1,16366,"主反照率和细节反照率相乘。我们不能用发现按"]],[16366,16366],[16387,16387]]],[1575992101926,["wangyan@DESKTOP-09VD06C",[[-1,16384,"发现按"]],[16387,16387],[16384,16384]]],[1575992113162,["wangyan@DESKTOP-09VD06C",[[1,16384,"法线，因为它们是向量，"]],[16384,16384],[16395,16395]]],[1575992114502,["wangyan@DESKTOP-09VD06C",[[-1,16394,"，"]],[16395,16395],[16394,16394]]],[1575992114986,["wangyan@DESKTOP-09VD06C",[[1,16394,"。"]],[16394,16394],[16395,16395]]],[1575992178020,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575992178020,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575992155722,["wangyan@DESKTOP-09VD06C",[[1,16395,"但我们可以在归一化之前对它们进行平均。"]],[16395,16395],[16414,16414]]],[1575992156071,["wangyan@DESKTOP-09VD06C",[[1,16418,"\n"]],[16414,16414],[16415,16415]]],[1575992156943,["wangyan@DESKTOP-09VD06C",[[1,16419,"\n"]],[16415,16415],[16416,16416]]],[1575992158081,["wangyan@DESKTOP-09VD06C",[[1,16416,"```"]],[16416,16416],[16419,16419]]],[1575992158124,["wangyan@DESKTOP-09VD06C",[[1,16419,"language\n```\n"]],[16419,16419],[16419,16427]]],[1575992158986,["wangyan@DESKTOP-09VD06C",[[-1,16419,"language"],[1,16427,"c"]],[16419,16427],[16420,16420]]],[1575992159631,["wangyan@DESKTOP-09VD06C",[[1,16421,"\n"]],[16420,16420],[16421,16421]]],[1575992164808,["wangyan@DESKTOP-09VD06C",[[1,16421,"void InitializeFragmentNormal(inout Interpolators i) {\n\tfloat3 mainNormal =\n\t\tUnpackScaleNormal(tex2D(_NormalMap, i.uv.xy), _BumpScale);\n\tfloat3 detailNormal =\n\t\tUnpackScaleNormal(tex2D(_DetailNormalMap, i.uv.zw), _DetailBumpScale);\n\ti.normal = (mainNormal + detailNormal) * 0.5;\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}"]],[16421,16421],[16761,16761]]],[1575992167095,["wangyan@DESKTOP-09VD06C",[[1,16770,"\n"]],[16765,16765],[16766,16766]]],[1575992167247,["wangyan@DESKTOP-09VD06C",[[1,16771,"\n"]],[16766,16766],[16767,16767]]],[1575992171701,["wangyan@DESKTOP-09VD06C",[[-1,16771,"\n"]],[16768,16768],[16767,16767]]],[1575992172671,["wangyan@DESKTOP-09VD06C",[[1,16767,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/averaged-normals.png)"]],[16767,16767],[16864,16864]]],[1575992238019,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575992238019,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575992184587,["wangyan@DESKTOP-09VD06C",[[1,16769,"平均法线"]],[16769,16769],[16773,16773]]],[1575992188023,["wangyan@DESKTOP-09VD06C",[[1,16872,"\n"]],[16868,16868],[16869,16869]]],[1575992188383,["wangyan@DESKTOP-09VD06C",[[1,16873,"\n"]],[16869,16869],[16870,16870]]],[1575992236171,["wangyan@DESKTOP-09VD06C",[[1,16870,"结果不是很好。主纹理凹凸和细节纹理凹凸都变得平坦了。理想情况下，"]],[16870,16870],[16902,16902]]],[1575992298023,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575992298023,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575992251419,["wangyan@DESKTOP-09VD06C",[[1,16902,"当其中一个是平的，它不会影响到另一个。"]],[16902,16902],[16921,16921]]],[1575992264936,["wangyan@DESKTOP-09VD06C",[[-1,16913,"会"]],[16914,16914],[16913,16913]]],[1575992266995,["wangyan@DESKTOP-09VD06C",[[1,16913,"应该"]],[16913,16913],[16915,16915]]],[1575992270840,["wangyan@DESKTOP-09VD06C",[[1,16926,"\n"]],[16923,16923],[16924,16924]]],[1575992296738,["wangyan@DESKTOP-09VD06C",[[1,16924,"这里我们需要做的"]],[16924,16924],[16932,16932]]],[1575992358021,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575992358021,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575992356866,["wangyan@DESKTOP-09VD06C",[[1,16932,"是，合并两个高度场。求平均值是没有意义的，要把它们相加才有意义。"]],[16932,16932],[16964,16964]]],[1575992418023,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575992418023,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575992416411,["wangyan@DESKTOP-09VD06C",[[1,16964,"当添加两个高度场时，它们的斜率——也就是它们的导数——也会"]],[16964,16964],[16993,16993]]],[1575992478023,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575992478023,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575992430843,["wangyan@DESKTOP-09VD06C",[[1,16993,"被添加，"]],[16993,16993],[16997,16997]]],[1575992431855,["wangyan@DESKTOP-09VD06C",[[-1,16996,"，"]],[16997,16997],[16996,16996]]],[1575992453171,["wangyan@DESKTOP-09VD06C",[[1,16996,"。我们能从法线中提取出导数吗？"]],[16996,16996],[17011,17011]]],[1575992453592,["wangyan@DESKTOP-09VD06C",[[1,17014,"\n"]],[17011,17011],[17012,17012]]],[1575992454960,["wangyan@DESKTOP-09VD06C",[[1,17015,"\n"]],[17012,17012],[17013,17013]]],[1575992538026,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575992538026,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575992510045,["wangyan@DESKTOP-09VD06C",[[1,17013,"早些时候，我们构建自己的法向量通过归一化"]],[17013,17013],[17033,17033]]],[1575992514736,["wangyan@DESKTOP-09VD06C",[[1,17036,"\n"]],[17033,17033],[17034,17034]]],[1575992515894,["wangyan@DESKTOP-09VD06C",[[-1,17036,"\n"]],[17034,17034],[17033,17033]]],[1575992898029,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575992898029,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575992894854,["wangyan@DESKTOP-09VD06C",[[1,17035,"$$\n\\begin{matrix}\n-f_u '\\\\\n1\\\\\n-f_v'\n\\end{matrix}\n$$\n"]],[17033,17033],[17089,17089]]],[1575993138037,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993138037,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993103602,["wangyan@DESKTOP-09VD06C",[[1,17039,"left[ \\"],[1,17052," "],[-1,17057," "],[1,17062," "],[1,17065," "],[1,17071,"\\\\ \n"],[1,17084," \\right]"]],[17065,17065],[17109,17109]]],[1575993120332,["wangyan@DESKTOP-09VD06C",[[-1,17036,"$\n"],[-1,17105,"\n"],[-1,17107,"$\n"]],[17074,17074],[17104,17104]]],[1575993128627,["wangyan@DESKTOP-09VD06C",[[1,17036,"$\n"],[1,17103,"\n"],[1,17104,"$\n"]],[17104,17104],[17074,17074]]],[1575993198038,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993198038,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993142929,["wangyan@DESKTOP-09VD06C",[[1,17110,"\n"]],[17109,17109],[17110,17110]]],[1575993143643,["wangyan@DESKTOP-09VD06C",[[-1,17110,"\n"],[1,17111,"s"]],[17110,17110],[17111,17111]]],[1575993144159,["wangyan@DESKTOP-09VD06C",[[-1,17110,"s"],[1,17111,"\n"]],[17111,17111],[17110,17110]]],[1575993144364,["wangyan@DESKTOP-09VD06C",[[-1,17110,"\n"],[1,17111," "]],[17110,17110],[17111,17111]]],[1575993145935,["wangyan@DESKTOP-09VD06C",[[-1,17110," "],[1,17111,"\n"]],[17111,17111],[17110,17110]]],[1575993146692,["wangyan@DESKTOP-09VD06C",[[-1,17110,"\n"],[1,17111,"w"]],[17110,17110],[17111,17111]]],[1575993147163,["wangyan@DESKTOP-09VD06C",[[1,17111,"omen"]],[17111,17111],[17115,17115]]],[1575993148152,["wangyan@DESKTOP-09VD06C",[[-1,17111,"omen"]],[17115,17115],[17111,17111]]],[1575993148351,["wangyan@DESKTOP-09VD06C",[[-1,17110,"w"],[1,17111,"\n"]],[17111,17111],[17110,17110]]],[1575993148671,["wangyan@DESKTOP-09VD06C",[[-1,17110,"\n"]],[17110,17110],[17109,17109]]],[1575993149416,["wangyan@DESKTOP-09VD06C",[[1,17110,"\n"]],[17109,17109],[17110,17110]]],[1575993152396,["wangyan@DESKTOP-09VD06C",[[-1,17110,"\n"],[1,17111,"我们"]],[17110,17110],[17112,17112]]],[1575993190339,["wangyan@DESKTOP-09VD06C",[[1,17112,"的法线纹理包含相同类型的法线，只是它们的Y和Z分量交换了。"]],[17112,17112],[17141,17141]]],[1575993245153,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993245153,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993212164,["wangyan@DESKTOP-09VD06C",[[1,17141,"所以它们变成了这样的形势"]],[17141,17141],[17153,17153]]],[1575993212879,["wangyan@DESKTOP-09VD06C",[[-1,17151,"形势"]],[17153,17153],[17151,17151]]],[1575993223920,["wangyan@DESKTOP-09VD06C",[[1,17151,"形式$$\n\\left[ \\begin{matrix} \n-f_u'\\\\\n 1\\\\ \n-f_v'\\\\ \n\n\\end{matrix} \\right]\n$$"]],[17151,17151],[17226,17226]]],[1575993225657,["wangyan@DESKTOP-09VD06C",[[1,17153,"\n"]],[17153,17153],[17154,17154]]],[1575993239905,["wangyan@DESKTOP-09VD06C",[[-1,17194,"-f_v'\\\\ "]],[17194,17202],[17194,17194]]],[1575993241144,["wangyan@DESKTOP-09VD06C",[[1,17188,"\n"]],[17187,17187],[17188,17188]]],[1575993241471,["wangyan@DESKTOP-09VD06C",[[1,17188,"-f_v'\\\\ "]],[17188,17188],[17196,17196]]],[1575993243496,["wangyan@DESKTOP-09VD06C",[[-1,17204,"\n"]],[17204,17204],[17203,17203]]],[1575993243959,["wangyan@DESKTOP-09VD06C",[[-1,17203,"\n"]],[17203,17203],[17202,17202]]],[1575993305150,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993305150,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993279129,["wangyan@DESKTOP-09VD06C",[[1,17226,"\n\n"]],[17226,17226],[17227,17227]]],[1575993279312,["wangyan@DESKTOP-09VD06C",[[1,17228,"\n"]],[17227,17227],[17228,17228]]],[1575993282297,["wangyan@DESKTOP-09VD06C",[[1,17154,"\n"]],[17153,17153],[17154,17154]]],[1575993291680,["wangyan@DESKTOP-09VD06C",[[-1,17109,"\n"]],[17109,17109],[17108,17108]]],[1575993297105,["wangyan@DESKTOP-09VD06C",[[-1,17034,"\n"]],[17034,17034],[17033,17033]]],[1575993301940,["wangyan@DESKTOP-09VD06C",[[1,17033,"、"]],[17033,17033],[17034,17034]]],[1575993302815,["wangyan@DESKTOP-09VD06C",[[-1,17033,"、"]],[17034,17034],[17033,17033]]],[1575993303382,["wangyan@DESKTOP-09VD06C",[[1,17034,"\n"]],[17033,17033],[17034,17034]]],[1575993365152,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993365152,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993305616,["wangyan@DESKTOP-09VD06C",[[1,17109,"\n"]],[17109,17109],[17110,17110]]],[1575993307760,["wangyan@DESKTOP-09VD06C",[[1,17230,"\n"]],[17228,17228],[17229,17229]]],[1575993309579,["wangyan@DESKTOP-09VD06C",[[1,17229,"ran"]],[17229,17229],[17232,17232]]],[1575993310783,["wangyan@DESKTOP-09VD06C",[[-1,17229,"ran"]],[17232,17232],[17229,17229]]],[1575993363092,["wangyan@DESKTOP-09VD06C",[[1,17229,"然而，这些法线已经被归一化过程缩放了。所以"]],[17229,17229],[17250,17250]]],[1575993425153,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993425153,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993367182,["wangyan@DESKTOP-09VD06C",[[1,17250,"我们能"]],[17250,17250],[17253,17253]]],[1575993367992,["wangyan@DESKTOP-09VD06C",[[-1,17251,"们能"]],[17253,17253],[17251,17251]]],[1575993373917,["wangyan@DESKTOP-09VD06C",[[1,17251,"们把它变成"]],[17251,17251],[17256,17256]]],[1575993382224,["wangyan@DESKTOP-09VD06C",[[1,17258,"\n"]],[17256,17256],[17257,17257]]],[1575993382471,["wangyan@DESKTOP-09VD06C",[[1,17257,"$$\n\\left[ \\begin{matrix} \n-f_u'\\\\\n-f_v'\\\\ \n 1\\\\ \n\\end{matrix} \\right]\n$$"]],[17257,17257],[17329,17329]]],[1575993389771,["wangyan@DESKTOP-09VD06C",[[1,17284,"s"]],[17284,17284],[17285,17285]]],[1575993391637,["wangyan@DESKTOP-09VD06C",[[1,17293,"s"]],[17293,17293],[17294,17294]]],[1575993396448,["wangyan@DESKTOP-09VD06C",[[-1,17303,"1"]],[17304,17304],[17303,17303]]],[1575993396555,["wangyan@DESKTOP-09VD06C",[[1,17303,"s"]],[17303,17303],[17304,17304]]],[1575993411463,["wangyan@DESKTOP-09VD06C",[[-1,17084,"\n"]],[17084,17084],[17083,17083]]],[1575993485232,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993485232,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993427841,["wangyan@DESKTOP-09VD06C",[[1,17332,"\n"]],[17331,17331],[17332,17332]]],[1575993430686,["wangyan@DESKTOP-09VD06C",[[-1,17332,"\n"],[1,17333,"其中"]],[17332,17332],[17334,17334]]],[1575993485117,["wangyan@DESKTOP-09VD06C",[[1,17334,"是是任意的比例因子。Z分量等于这个因子。这意味着我们可以用X和Y除以Z来求"]],[17334,17334],[17371,17371]]],[1575993545233,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993545233,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993544373,["wangyan@DESKTOP-09VD06C",[[1,17371,"偏导，只有当Z等于0时，它才会无效，因为Z等于0对应于"]],[17371,17371],[17398,17398]]],[1575993605312,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993605312,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993549232,["wangyan@DESKTOP-09VD06C",[[1,17398,"一个垂直的平面"]],[17398,17398],[17405,17405]]],[1575993551816,["wangyan@DESKTOP-09VD06C",[[-1,17403,"平面"]],[17405,17405],[17403,17403]]],[1575993557070,["wangyan@DESKTOP-09VD06C",[[1,17403,"曲面"]],[17403,17403],[17405,17405]]],[1575993558136,["wangyan@DESKTOP-09VD06C",[[-1,17403,"曲面"]],[17405,17405],[17403,17403]]],[1575993583268,["wangyan@DESKTOP-09VD06C",[[1,17403,"表面。我们的凹凸远没有那么陡峭，所以我们不必担心。"]],[17403,17403],[17428,17428]]],[1575993585842,["wangyan@DESKTOP-09VD06C",[[1,17428,"\n\n"]],[17428,17428],[17429,17429]]],[1575993587144,["wangyan@DESKTOP-09VD06C",[[1,17430,"\n"]],[17429,17429],[17430,17430]]],[1575993597158,["wangyan@DESKTOP-09VD06C",[[-1,17430,"\n"],[1,17431,"一旦"]],[17430,17430],[17432,17432]]],[1575993605197,["wangyan@DESKTOP-09VD06C",[[1,17432,"我们有了导数，我们可以"]],[17432,17432],[17443,17443]]],[1575993665313,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993665313,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993619822,["wangyan@DESKTOP-09VD06C",[[1,17443,"把它们加起来求出"]],[17443,17443],[17451,17451]]],[1575993725315,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993725315,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993706149,["wangyan@DESKTOP-09VD06C",[[1,17451,"求和高度场的导数。然后，我们把它转成还项链"]],[17451,17451],[17472,17472]]],[1575993706857,["wangyan@DESKTOP-09VD06C",[[-1,17469,"还项链"]],[17472,17472],[17469,17469]]],[1575993721958,["wangyan@DESKTOP-09VD06C",[[1,17469,"法向量。结果是一个向量"]],[17469,17469],[17480,17480]]],[1575993785318,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993785318,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993738511,["wangyan@DESKTOP-09VD06C",[[1,17480,"，在归一化之前，它是"]],[17480,17480],[17490,17490]]],[1575993739889,["wangyan@DESKTOP-09VD06C",[[1,17490,"\n\n"]],[17490,17490],[17491,17491]]],[1575993740944,["wangyan@DESKTOP-09VD06C",[[1,17491,"$$\n\\left[ \\begin{matrix} \n-f_u'\\\\\n-f_v'\\\\ \n 1\\\\ \n\\end{matrix} \\right]\n$$"]],[17491,17491],[17563,17563]]],[1575993754780,["wangyan@DESKTOP-09VD06C",[[1,17522,"   "]],[17522,17522],[17525,17525]]],[1575993757684,["wangyan@DESKTOP-09VD06C",[[1,17533,"   "]],[17533,17533],[17536,17536]]],[1575993761068,["wangyan@DESKTOP-09VD06C",[[1,17542,"      "]],[17542,17542],[17548,17548]]],[1575993905317,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575993905317,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575993892328,["wangyan@DESKTOP-09VD06C",[[-1,17517,"-f_u'"]],[17517,17522],[17517,17517]]],[1575993900706,["wangyan@DESKTOP-09VD06C",[[1,17517,"M——z"]],[17517,17517],[17521,17521]]],[1575993901520,["wangyan@DESKTOP-09VD06C",[[-1,17518,"——z"]],[17521,17521],[17518,17518]]],[1575993903100,["wangyan@DESKTOP-09VD06C",[[1,17518,"_z"]],[17518,17518],[17520,17520]]],[1575994069885,[null,[[1,12325,"当"],[-1,12369,"成"]],[12325,12325],[12369,12369]]],[1575994069885,[null,[[-1,12325,"当"],[1,12370,"成"]],[12369,12369],[12325,12325]]],[1575994055545,["wangyan@DESKTOP-09VD06C",[[1,17517,"\\frac{M_x}{"],[1,17520,"}+\\frac{D_x}{D_z}"],[-1,17526,"-f_v'"],[1,17531,"\\frac{M_y}{M_z}+\\frac{D_y}{D_z}"],[1,17574,"\n"]],[17505,17505],[17628,17628]]],[1575994063849,["wangyan@DESKTOP-09VD06C",[[1,17629,"\n"]],[17628,17628],[17629,17629]]],[1575994064406,["wangyan@DESKTOP-09VD06C",[[-1,17629,"\n"],[1,17630,"`"]],[17629,17629],[17630,17630]]],[1575994065451,["wangyan@DESKTOP-09VD06C",[[1,17630,"``"]],[17630,17630],[17632,17632]]],[1575994065500,["wangyan@DESKTOP-09VD06C",[[1,17632,"language\n```\n"]],[17632,17632],[17632,17640]]],[1575994066643,["wangyan@DESKTOP-09VD06C",[[-1,17632,"language"],[1,17640,"c"]],[17632,17640],[17633,17633]]],[1575994067305,["wangyan@DESKTOP-09VD06C",[[1,17634,"\n"]],[17633,17633],[17634,17634]]],[1575994068672,["wangyan@DESKTOP-09VD06C",[[1,17634,"void InitializeFragmentNormal(inout Interpolators i) {\n\tfloat3 mainNormal =\n\t\tUnpackScaleNormal(tex2D(_NormalMap, i.uv.xy), _BumpScale);\n\tfloat3 detailNormal =\n\t\tUnpackScaleNormal(tex2D(_DetailNormalMap, i.uv.zw), _DetailBumpScale);\n\ti.normal =\n\t\tfloat3(mainNormal.xy / mainNormal.z + detailNormal.xy / detailNormal.z, 1);\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}"]],[17634,17634],[18017,18017]]]],null,"wangyan@DESKTOP-09VD06C"],["6936bf0d-720b-4ce8-82b7-a8e62827b8cd",1576342796029,"\n\n> 扰动法线模拟凹凸\n>\n> 从高度场计算法线\n>\n> 采样和混合法线\n>\n> 从切线空间转换为世界空间\n\n这是渲染教程系列的第6部分。前一部分增加了对更复杂的照明的支持。这一次，我们将创建更复杂表面的错觉。\n\n本教程是用Unity 5.4.0f3制作的。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/tutorial-image.jpg)\n\n# 凹凸映射\n\n我们可以使用反照率纹理来创建具有复杂颜色图案的材质。我们可以用法线来调整表面的曲率。有了这些工具，我们可以制造出各种各样的表面。然而，一个三角形的表面总是光滑的。它只能在三个法向量之间插值。所以它不能代表粗糙或多变的表面。当放弃反照率纹理而只使用一种纯色时，这一点就很明显了。\n\n体现平滑度的一个很好的例子是一个简单的四边形。添加一个到场景中，通过沿着x轴旋转90°，并使它指向上方。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/flat.png)\n\n因为默认的天空盒非常亮，很难看到其他灯光的作用。在本教程中，我们将其关闭。你可以通过在照明设置中将环境强度降低到零来做到这一点。然后只开启主方向灯。在场景视图中找到一个好的视角，这样你就可以在四边形上看到一些光线的差异。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/ambient-intensity.png)\n\n![scene](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/no-ambient.png)\n\n我们怎样才能使这个四边形看起来不平坦呢？我们可以通过在反照率纹理中加入烘焙阴影来模拟粗糙度。然而，这将是完全静态的。如果灯光改变了，或者物体移动了，阴影也应该改变。否则，假象就会破灭。在镜面反射的情况下，甚至相机都不允许移动。\n\n我们可以改变法线来创建曲面的错觉。但是每四个顶点只有四个法线。这只能产生平滑的过渡。如果我们想要一个多变而粗糙的表面，我们需要更多的法线。\n\n我们可以把四边形分成更小的四边形。这给了我们更多的法线。事实上，一旦我们有更多的顶点，我们也可以移动它们。那么我们就不需要表面粗糙的假象了，我们可以做出一个真正粗糙的表面！但是子四边形仍然有同样的问题。我们还要再细分吗？这将导致大量的网格与大量的三角形。这在创建3D模型时是可行的，但在游戏中并不可行。\n\n## 高度纹理\n\n与平面相比，粗糙的表面具有不均匀的仰角。如果我们将这些高度数据存储在纹理中，我们可能会使用它生成的每个片段的法向量，而不是每个顶点。这个想法被称为凹凸映射，是由James Blinn首先提出的。\n\n这是一个高度贴图，以配合我们的大理石纹理。它是一个RGB纹理，每个通道都设置相同的值。使用默认导入设置其导入到项目中。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/marble-heights.png)\n\n添加一个_HeightMap纹理属性到*My First Lighting Shader*。因为它将使用与我们的反照率相同的UV，所以它不需要自己的缩放和偏移参数。默认的纹理并不重要，只要它是一致的。灰色的就可以了。\n\n```c\n\tProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/heights-inspector.png)\n\n将匹配的变量添加到My Lighting 包含文件中，这样我们就可以访问纹理了。让我们看看它是怎样的，把它与反照率相乘。\n\n```c\nfloat4 _Tint;\nsampler2D _MainTex;\nfloat4 _MainTex_ST;\n\nsampler2D _HeightMap;\n\n…\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\ti.normal = normalize(i.normal);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-color.png)\n\n## 调整法线\n\n因为我们的片段法线将变得更加复杂，我们将它们的初始化移到一个单独的函数中。另外，去掉高度纹理测试代码。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = normalize(i.normal);\n}\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\tInitializeFragmentNormal(i);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n//\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n因为我们现在处理的是一个位于XZ平面上的四边形，它的法向量总是（0，1，0），所以我们可以使用一个常数法向量，忽略顶点数据。我们先做这个，稍后再考虑不同的朝向。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = float3(0, 1, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n我们怎么把高度数据包含进来呢？一种简单的方法是在归一化之前使用高度作为法线的Y分量。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat h = tex2D(_HeightMap, i.uv);\n\ti.normal = float3(0, h, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-normal.png)\n\n这是行不通的，因为归一化会把每个向量都转换回（0，1，0）.我们需要一个不同的方法。\n\n## 有限差分\n\n因为我们处理的是纹理数据，我们有二维数据。有U维度和V维度。这些高度可以被认为是在三维空间中向上的。我们可以说纹理代表了一个函数，f(u,v)=h。我们先把自己限制在U维度上。所以这个函数被简化为f（u）=h。我们能从这个函数推出法向量吗？\n\n如果我们知道函数的斜率，然后我们就可以用它来计算任意点的法向量。斜率由h的变化率决定。这是它的导数。h′。因为h是一个函数的结果，h‘同样也是一个函数的结果。我们有导数函数f’(u)=h‘。\n\n不幸的是，我们不知道这些函数是什么。但是我们可以近似它们。我们可以比较纹理中两个不同点的高度。例如，在极端情况下，使用U坐标0和1。这两个样本之间的插值就是坐标之间的变化率，用函数表示，即f(1)-f(0)。我们可以使用它来构建一个切线向量，![1574845121482](1574845121482.png)。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent-diagram.png)\n\n![1574845208030](1574845208030.png)\n\n这当然是对切向量的粗略近似。它把整个纹理当作一个线性的斜率。我们可以通过采样两个距离更近的点来做得更好。例如，U坐标取0和1/2.在两个点之间的变化率是f(1/2 )-f(0)。半个单位的U。因为处理每整个单位的变化率比较简单，我们用它除以两点之间的距离。所以我们得到![1574847363057](1574847363057.png)。这就得到了切向量![1574847393342](1574847393342.png)。\n\n一般来说，我们要做的是相对于我们渲染的每个片段的U坐标。到下一点的距离由一个常数定义。它的导数是通过![1574849122811](1574849122811.png)来近似。\n\nδ越小，我们近似的导数就越接近于真实。当然它不可能变成零，但当达到理论极限时，你得到![1574849339141](1574849339141.png)。这种近似导数的方法称为有限差分法。有了它，我们可以构造任意点的切向量，![1574850029282](1574850029282.png)。\n\n## 从切线到法线\n\n在我们的着色器代码中，可以用什么值去当作是δ 。最小的感知差异将覆盖我们纹理的单个像素。我们可以通过一个带有_TexelSize后缀float4类型的变量在着色器中获取这些信息。Unity设置那些变量，类似于__ST变量。\n\n**_TexelSize变量中存储了什么？**\n\n> 它的前两个分量包含了Texel的大小，就像U和V一样。其他两个分量包含像素的数量。例如，在256×128大小的纹理中，它将包含(0.00390625, 0.0078125, 256, 128)。\n\n现在我们可以对纹理采样两次，计算高度导数，并构造一个切向量。我们直接用它作为法向量。\n\n```c\n    float2 delta = float2(_HeightMap_TexelSize.x, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(1, (h2 - h1) / delta.x, 0);\n\n\ti.normal = normalize(i.normal);\n```\n\n事实上，因为我们会归一化。我们可以扩展我们的切向量δ。这消除了除法并提高了精度。\n\n```c\ni.normal = float3(delta.x, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent.png)\n\n我们得到了一个非常明显的结果。这是因为这些高度只有一个单位范围，这就产生了非常陡峭的斜坡。由于扰动的法线并不会改变表面，所以我们不希望有如此大的差异。我们可以用任意因子来缩放高度。让我们将范围缩小到单个Texel。我们可以通过乘以δ的高度差，或简单地在切向处用1取代δ。\n\n```c\n\ti.normal = float3(1, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/scaled-height.png)\n\n这看起来不错，但是灯光不对。这看起来太暗了。因为我们直接用正切作为法向量。为了把它变成一个向上的法向量，我们必须绕Z轴旋转tangent 90°。\n\n```c\ni.normal = float3(h1 - h2, 1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/rotated.png)\n\n**矢量旋转是如何工作的？**\n\n你可以通过交换向量的X和Y向量，以及翻转新的X分量的符号来逆时针旋转一个2D向量90°。最后得到![1575016532726](1575016532726.png)\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/vector-rotation.png)\n\n## 中心差分\n\n我们已经使用有限差分近似来创建法向量。具体来说，是通过使用正向差分法。我们取一个点，然后看一个方向来确定斜率。结果，法线是偏向那个方向的。为了得到法向的更好的近似值，我们可以在两个方向上偏移采样点。这种方法将线性逼近集中在当前点上，称为中心差分法。这就把导数变成了![1575017187421](1575017187421.png)。\n\n```c\n\tfloat2 delta = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv - delta);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(h1 - h2, 1, 0);\n```\n\n这稍微移动了凹凸点，使它们更好地与高度场对齐。除此之外，它们的形状不会改变。\n\n## 使用两个维度\n\n我们创建的法线只考虑沿U方向的变化。我们已经使用了函数f(u,v)关于u的偏微分。就是![1575018677399](1575018677399.png)，或者简写为 f<sub>u</sub><sup>‘</sup>。我们可以通过使用f<sub>u</sub><sup>’</sup>沿着V创建法线。在这种情况下，那么切向量是![1575020057277](1575020057277.png)并且法向量是![1575020086626](1575020086626.png)。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\ti.normal = float3(u1 - u2, 1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\ti.normal = float3(0, 1, v1 - v2);\n\n\ti.normal = normalize(i.normal);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/other-dimension.png)\n\n我们现在可以得到U和V的切线。这些向量一起描述了在片段处表面的高度场。通过计算他们的外积，我们的得到了二维高度场的法向量。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\tfloat3 tv = float3(0, v2 - v1, 1);\n\n\ti.normal = cross(tv, tu);\n\ti.normal = normalize(i.normal);\n```\n\n![quad](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals.png)\n\n![details](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals-details.png)\n\n当你计算切向量的外积时，你会看到![1575021052831](1575021052831.png)。\t所以我们可以直接构造这个向量，而不是依赖于叉乘函数。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n//\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n//\tfloat3 tv = float3(0, v2 - v1, 1);\n\n//\ti.normal = cross(tv, tu);\n\ti.normal = float3(u1 - u2, 1, v1 - v2);\n\ti.normal = normalize(i.normal);\n}\n```\n\n# 法线映射\n\n当凹凸贴图工作时，我们必须执行多个纹理样本和有限差分计算。这似乎是一种浪费，因为结果的法线应该总是相同的。为什么每帧做所有这些工作？我们可以只做一次，将法线存储在一个纹理中。\n\n这意味着我们需要一个法线贴图。我可以提供一个，但我们可以让Unity为我们做这些工作。将高度贴图的纹理类型改为法线贴图。Unity自动切换纹理去使用三线性过滤，并假设我们想要使用灰度图像数据来生成一个法线贴图。这正是我们想要的。但是将凹凸度为更低的值，比如0.05。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/inspector.png)\n\n![preview](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/preview.png)\n\n应用了导入设置后，Unity将计算法线贴图。原始的高度地图仍然存在，但Unity内部使用生成的地图。\n\n就像我们在法线可视化为颜色时所做的那样，它们必须进行调整以适应0-1的范围。所以它们被存储为\n\n$$\nx = \\frac{N+1}{2}\n$$\n\n这假设平坦区域会呈现浅绿色。然而，它们却呈现为淡蓝色。这是因为法向纹理最常见的约定是将向上的方向存储在z分量中。在Unity看来，Y和Z坐标是交换的。\n\n## 对法线贴图采样\n\n因为法线贴图和高度贴图有很大的不同，要相应地重命名着色器属性。\n\n```c\nProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n![使用一个法线贴图](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/material-with-normal-map.png)\n\n我们可以删除所有的高度贴图代码，并将其替换为一个纹理采样，然后进行归一化。\n\n```c\nsampler2D _NormalMap;\n\n//sampler2D _HeightMap;\n//float4 _HeightMap_TexelSize;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = tex2D(_NormalMap, i.uv).rgb;\n\ti.normal = normalize(i.normal);\n}\n```\n\n当然，我们必须通过计算2N-1来将法线转换回它们原来的-1~1的范围。\n\n```c\ni.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;\n```\n\n此外，记得要交换Y和Z。\n\n```c\n    i.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;\n\ti.normal = i.normal.xzy;\n```\n\n![使用一个法线贴图](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/normals.png)\n\n## DXT5nm\n\n我们的法线肯定是有一些问题的。这是因为Unity最终以一种不同于我们预期的方式对法线进行编码。即使纹理预览是RGB编码。Unity实际上使用的是DXT5nm。\n\nDXT5nm格式只存储法线的X和Y分量。它的Z分量被丢弃。正如你所期望的，Y分量存储在G通道中。但是，X分量存储在A通道中。没有使用R和B通道。\n\n因此，当使用DXT5nm时，我们只能检索正常的前两个分量。\n\n```c\n\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n```\n\n我们必须从其他两项中推断出第三项。因为法向量是单位向量。\n\n$$\n||N||^2=N_x^2+N_y^2+N_z^2=1。然后N_z=\\sqrt[]{1-N_x^2-N_y^2}。\n$$\n\n```c\n        i.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n\ti.normal.z = sqrt(1 - dot(i.normal.xy, i.normal.xy));\n\ti.normal = i.normal.xzy;\n```\n\n理论上，结果应该等于原始的Z分量。但是，由于纹理的精度有限，而且由于纹理滤波，结果往往有所不同，不过已经很接近了。\n\n此外，由于精度限制，\n$$\nN_x^2+N_y^2\n$$\n\n可能会超出界限。通过限制点积，确保不会发生这种事情。\n\n```c\ni.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));\n```\n\n![解码DXT5nm法线](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/dxt5nm.png)\n\n## 缩放凹凸\n\n因为我们把法线烘焙成纹理，我们不能在片段着色器中缩放它。\n\n我们可以在计算Z之前缩放法线的X和Y分量。如果我们减少X和Y，那么Z会变大，导致一个更平坦的表面。如果我们增加它们，相反的情况会发生。我们可以这样调整凹凸度。因为我们已经限制和X和Y的平方，我们永远不会得到无效的法线。\n\n让我们添加一个凹凸缩放属性到我们的着色器，就像Unity的标准着色器一样。\n\n```c\nProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n\t\t_BumpScale (\"Bump Scale\", Float) = 1\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n把这个缩放纳入我们的正常计算。\n\n```c\nsampler2D _NormalMap;\nfloat _BumpScale;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n\ti.normal.xy *= _BumpScale;\n\ti.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}\n```\n\n要得到和我们使用高度贴图时差不多的强度，把缩放降低到0.25左右。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/bump-scale.png)\n\n![quad](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/scaled.png)\n\n![details](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/scaled-details.png)\n\nUnityStandardUtils包含了UnpackScaleNormal函数。它会自动地为法线贴图使用正确的编码，并且缩放法线。所以，让我们用这个方便的函数。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n//\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n//\ti.normal.xy *= _BumpScale;\n//\ti.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));\n\ti.normal = UnpackScaleNormal(tex2D(_NormalMap, i.uv), _BumpScale);\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}\n```\n\n## 合并反照率和凹凸\n\n现在我们有了一个有功能的法线贴图。你可以检查她的不同之处。当只使用大理石反照率纹理，我们的四方网格看起来像完美抛光的石头。添加了法线纹理之后，它会变得有更多的细节。\n\n![without](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/without-bumps.png)\n\n![with](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/with-bumps.png)\n\n# 凹凸细节\n\n在第3部分——合并纹理中，我们创建了一个带有细节纹理的着色器。我们那是用反照率去实现的，但现在我们也可以用凹凸纹理来实现。首先，添加对细节反照率支持到My First Lighting着色器中。\n\n```c\nProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n\t\t_BumpScale (\"Bump Scale\", Float) = 1\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t\t_DetailTex (\"Detail Texture\", 2D) = \"gray\" {}\n\t}\n```\n\n![添加了细节反照率](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/detail-inspector.png)\n\n我们不需要为细节纹理UV添加到一个插值器中，二十手动将主UV和细节纹理UV打包到一个插值器中。主纹理UV是XY，细节纹理的UV是ZW。\n\n```c\nstruct Interpolators {\n\tfloat4 position : SV_POSITION;\n//\tfloat2 uv : TEXCOORD0;\n\tfloat4 uv : TEXCOORD0;\n\tfloat3 normal : TEXCOORD1;\n\tfloat3 worldPos : TEXCOORD2;\n\n\t#if defined(VERTEXLIGHT_ON)\n\t\tfloat3 vertexLightColor : TEXCOORD3;\n\t#endif\n};\n```\n\n添加所需的变量，然后在顶点程序中填入插值器。\n\n```c\nsampler2D _MainTex, _DetailTex;\nsampler2D _MainTex, _DetailTex;\nfloat4 _MainTex_ST, _DetailTex_ST;\n\n…\n\nInterpolators MyVertexProgram (VertexData v) {\n\tInterpolators i;\n\ti.position = mul(UNITY_MATRIX_MVP, v.position);\n\ti.worldPos = mul(unity_ObjectToWorld, v.position);\n\ti.normal = UnityObjectToWorldNormal(v.normal);\n\ti.uv.xy = TRANSFORM_TEX(v.uv, _MainTex);\n\ti.uv.zw = TRANSFORM_TEX(v.uv, _DetailTex);\n\tComputeVertexLightColor(i);\n\treturn i;\n}\n```\n\n现在当我们使用主纹理UV时，应该使用i.uv.xy而不是i.uv。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = UnpackScaleNormal(tex2D(_NormalMap, i.uv.xy), _BumpScale);\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\tInitializeFragmentNormal(i);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv.xy).rgb * _Tint.rgb;\n\n\t…\n}\n```\n\n将细节纹理作为一个因子与反照率相乘。\n\n```c\n\tfloat3 albedo = tex2D(_MainTex, i.uv.xy).rgb * _Tint.rgb;\n\talbedo *= tex2D(_DetailTex, i.uv.zw) * unity_ColorSpaceDouble;\n```\n\n![without](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/without-bumps.png)\n![with](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/with-bumps.png)\n\n## 细节法线贴图\n\n由于大理石材质的细节纹理时灰度值，我们可以使用它来生成法线贴图。赋值它并将其导入类型更改为Normal Map。把它的凹凸值降低到0.1左右，保持其他设置不变。\n\nAs we're fading out the mipmaps, the colors fade to gray. As a result, the detail normal map that Unity generates fades to flat. So they fade out together.\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/detail-normals-inspector.png)\n\n![preview](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/detail-normals-preview.png)\n\n为细节法线添加一个属性到我们的着色器中，并赋予它一个凹凸缩放。\n\n```c\nProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n\t\t_BumpScale (\"Bump Scale\", Float) = 1\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t\t_DetailTex (\"Detail Texture\", 2D) = \"gray\" {}\n\t\t[NoScaleOffset] _DetailNormalMap (\"Detail Normals\", 2D) = \"bump\" {}\n\t\t_DetailBumpScale (\"Detail Bump Scale\", Float) = 1\n\t}\n```\n\n![细节法线纹理和缩放值](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/detail-bumps-inspector.png)\n\n添加所需的变量并获取细节法线纹理，就像主法线纹理一样。在我们合并它们之前，显示正常的细节法线。\n\n```c\nsampler2D _NormalMap, _DetailNormalMap;\nfloat _BumpScale, _DetailBumpScale;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = UnpackScaleNormal(tex2D(_NormalMap, i.uv.xy), _BumpScale);\n\ti.normal =\n\t\tUnpackScaleNormal(tex2D(_DetailNormalMap, i.uv.zw), _DetailBumpScale);\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}\n```\n\n![细节凹凸](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/detail-normals.png)\n\n## 合并法线\n\n我们把主反照率和细节反照率相乘。我们不能用法线，因为它们是向量。但我们可以在归一化之前对它们进行平均。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat3 mainNormal =\n\t\tUnpackScaleNormal(tex2D(_NormalMap, i.uv.xy), _BumpScale);\n\tfloat3 detailNormal =\n\t\tUnpackScaleNormal(tex2D(_DetailNormalMap, i.uv.zw), _DetailBumpScale);\n\ti.normal = (mainNormal + detailNormal) * 0.5;\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}\n```\n\n![平均法线](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/averaged-normals.png)\n\n结果不是很好。主纹理凹凸和细节纹理凹凸都变得平坦了。理想情况下，当其中一个是平的，它不应该影响到另一个。\n\n这里我们需要做的是，合并两个高度场。求平均值是没有意义的，要把它们相加才有意义。当添加两个高度场时，它们的斜率——也就是它们的导数——也会被添加。我们能从法线中提取出导数吗？\n\n早些时候，我们构建自己的法向量通过归一化\n\n$$\n\\left[ \\begin{matrix} \n-f_u'\\\\\n 1\\\\ \n-f_v'\\\\ \n\\end{matrix} \\right]\n$$\n\n我们的法线纹理包含相同类型的法线，只是它们的Y和Z分量交换了。所以它们变成了这样的形式\n\n$$\n\\left[ \\begin{matrix} \n-f_u'\\\\\n-f_v'\\\\ \n 1\\\\ \n\\end{matrix} \\right]\n$$\n\n然而，这些法线已经被归一化过程缩放了。所以我们把它变成\n$$\n\\left[ \\begin{matrix} \n-sf_u'\\\\\n-sf_v'\\\\ \n s\\\\ \n\\end{matrix} \\right]\n$$\n\n其中是是任意的比例因子。Z分量等于这个因子。这意味着我们可以用X和Y除以Z来求偏导，只有当Z等于0时，它才会无效，因为Z等于0对应于一个垂直的表面。我们的凹凸远没有那么陡峭，所以我们不必担心。\n\n一旦我们有了导数，我们可以把它们加起来求出求和高度场的导数。然后，我们把它转成法向量。结果是一个向量，在归一化之前，它是\n$$\n\\left[ \\begin{matrix} \n\\frac{M_x}{M_z}+\\frac{D_x}{D_z}   \\\\\n\\frac{M_y}{M_z}+\\frac{D_y}{D_z}   \\\\ \n 1      \\\\ \n\\end{matrix} \\right]\n$$\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat3 mainNormal =\n\t\tUnpackScaleNormal(tex2D(_NormalMap, i.uv.xy), _BumpScale);\n\tfloat3 detailNormal =\n\t\tUnpackScaleNormal(tex2D(_DetailNormalMap, i.uv.zw), _DetailBumpScale);\n\ti.normal =\n\t\tfloat3(mainNormal.xy / mainNormal.z + detailNormal.xy / detailNormal.z, 1);\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}\n```\n",[[1576342756479,["wangyan@DESKTOP-09VD06C",[[1,18022,"\n"]],[18021,18021],[18022,18022]]],[1576342757975,["wangyan@DESKTOP-09VD06C",[[1,18023,"\n"]],[18022,18022],[18023,18023]]],[1576342809935,["wangyan@DESKTOP-09VD06C",[[1,18023,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/added-derivatives.png)"]],[18023,18023],[18121,18121]]],[1576342966123,["wangyan@DESKTOP-09VD06C",[[1,17460,"\n"]],[17460,17460],[17461,17461]]],[1576343081351,["wangyan@DESKTOP-09VD06C",[[1,18026,"t"]],[18026,18026],[18027,18027]]],[1576343083280,["wangyan@DESKTOP-09VD06C",[[-1,18026,"t"]],[18027,18027],[18026,18026]]],[1576343092617,["wangyan@DESKTOP-09VD06C",[[1,18026,"添加偏移"]],[18026,18026],[18030,18030]]],[1576343097039,["wangyan@DESKTOP-09VD06C",[[1,18127,"\n"]],[18126,18126],[18127,18127]]],[1576343097779,["wangyan@DESKTOP-09VD06C",[[1,18128,"\n"]],[18127,18127],[18128,18128]]],[1576343133574,["wangyan@DESKTOP-09VD06C",[[-1,18128,"\n"],[1,18129,"这"]],[18128,18128],[18129,18129]]],[1576343143191,["wangyan@DESKTOP-09VD06C",[[1,18129,"产生了一个更好的额"]],[18129,18129],[18138,18138]]],[1576343144019,["wangyan@DESKTOP-09VD06C",[[-1,18137,"额"]],[18138,18138],[18137,18137]]],[1576343145424,["wangyan@DESKTOP-09VD06C",[[1,18137,"结果"]],[18137,18137],[18139,18139]]],[1576343190416,["wangyan@DESKTOP-09VD06C",[[1,18139,"它在"]],[18139,18139],[18141,18141]]],[1576343193628,["wangyan@DESKTOP-09VD06C",[[-1,18139,"它在"]],[18141,18141],[18139,18139]]],[1576343214943,["wangyan@DESKTOP-09VD06C",[[1,18139,"。它在合并大部分是平的贴图时工作得很好"]],[18139,18139],[18158,18158]]],[1576343230895,["wangyan@DESKTOP-09VD06C",[[1,18158,"。然而，合并陡峭得"]],[18158,18158],[18167,18167]]],[1576343232025,["wangyan@DESKTOP-09VD06C",[[-1,18166,"得"]],[18167,18167],[18166,18166]]],[1576343274662,["wangyan@DESKTOP-09VD06C",[[1,18166,"的坡仍将失去细节。一种可选额方法"]],[18166,18166],[18182,18182]]],[1576343275769,["wangyan@DESKTOP-09VD06C",[[1,18182,"是"]],[18182,18182],[18183,18183]]],[1576343320543,["wangyan@DESKTOP-09VD06C",[[-1,18179,"额"]],[18180,18180],[18179,18179]]],[1576343362623,["wangyan@DESKTOP-09VD06C",[[1,18182,"漂白调和"]],[18182,18182],[18186,18186]]],[1576343365871,["wangyan@DESKTOP-09VD06C",[[-1,18182,"漂白调和"]],[18186,18186],[18182,18182]]],[1576343378065,["wangyan@DESKTOP-09VD06C",[[1,18182,"whiteout 冰冷帝国"]],[18182,18182],[18195,18195]]],[1576343379571,["wangyan@DESKTOP-09VD06C",[[-1,18190," 冰冷帝国"]],[18195,18195],[18190,18190]]],[1576343382518,["wangyan@DESKTOP-09VD06C",[[1,18190," bledig"]],[18190,18190],[18197,18197]]],[1576343388982,["wangyan@DESKTOP-09VD06C",[[1,18194,"n"]],[18194,18194],[18195,18195]]],[1576343391035,["wangyan@DESKTOP-09VD06C",[[1,18197,"n"]],[18197,18197],[18198,18198]]],[1576343392454,["wangyan@DESKTOP-09VD06C",[[1,18199,"。"]],[18199,18199],[18200,18200]]],[1576343446334,["wangyan@DESKTOP-09VD06C",[[1,18200,"首先，将新法线乘以M"]],[18200,18200],[18210,18210]]],[1576343465014,["wangyan@DESKTOP-09VD06C",[[1,18210,"\\sub()"]],[18210,18210],[18216,18216]]],[1576343471354,["wangyan@DESKTOP-09VD06C",[[-1,18209,"M\\sub()"]],[18216,18216],[18209,18209]]],[1576343525763,["wangyan@DESKTOP-09VD06C",[[1,18209,"\n\n$$\nM_zD_z\n$$\n\n\n"]],[18209,18209],[18225,18225]]],[1576343536623,["wangyan@DESKTOP-09VD06C",[[-1,18225,"\n"],[1,18226,"e"]],[18225,18225],[18226,18226]]],[1576343537516,["wangyan@DESKTOP-09VD06C",[[-1,18225,"e"],[1,18226,"\n"]],[18226,18226],[18225,18225]]],[1576343538975,["wangyan@DESKTOP-09VD06C",[[-1,18225,"\n"]],[18225,18225],[0,0]]],[1576343539375,["wangyan@DESKTOP-09VD06C",[[-1,18224,"\n"],[1,18225,"w"]],[0,0],[18224,18225]]],[1576343539473,["wangyan@DESKTOP-09VD06C",[[1,18225,"o"]],[18224,18224],[18223,18226]]],[1576343540079,["wangyan@DESKTOP-09VD06C",[[-1,18223,"\nwo"],[1,18226,"我们"]],[18223,18223],[18225,18225]]],[1576343567582,["wangyan@DESKTOP-09VD06C",[[1,18225,"可以这样做，因为不管怎样，我们之后都会归一化。"]],[18225,18225],[18248,18248]]],[1576343577195,["wangyan@DESKTOP-09VD06C",[[1,18223,"\n"]],[18223,18223],[18224,18224]]],[1576343577365,["wangyan@DESKTOP-09VD06C",[[1,18224,"\n"]],[18224,18224],[18225,18225]]],[1576343592048,["wangyan@DESKTOP-09VD06C",[[1,18250,"这样我们就会的得到"]],[18250,18250],[18259,18259]]],[1576343593582,["wangyan@DESKTOP-09VD06C",[[1,18257,"、"]],[18257,18257],[18258,18258]]],[1576343594384,["wangyan@DESKTOP-09VD06C",[[-1,18256,"的、"]],[18258,18258],[18256,18256]]],[1576343626539,["wangyan@DESKTOP-09VD06C",[[1,18258,"这样的向量 $$\n\\left[ \\begin{matrix} \n\\frac{M_x}{M_z}+\\frac{D_x}{D_z}   \\\\\n\\frac{M_y}{M_z}+\\frac{D_y}{D_z}   \\\\ \n 1      \\\\ \n\\end{matrix} \\right]\n$$"]],[18258,18258],[18400,18400]]],[1576343630176,["wangyan@DESKTOP-09VD06C",[[1,18264,"\n"]],[18264,18264],[18265,18265]]],[1576343740046,["wangyan@DESKTOP-09VD06C",[[-1,18291,"\\frac{"],[-1,18300,"}{M"],[1,18303,"D"],[-1,18305,"}"],[-1,18307,"\\frac{"],[-1,18316,"}{D"],[1,18319,"M"],[-1,18321,"}  "],[-1,18328,"\\frac{"],[-1,18337,"}{M"],[1,18340,"D"],[-1,18342,"}"],[-1,18344,"\\frac{"],[-1,18353,"}{D"],[1,18356,"M"],[-1,18358,"}   "],[-1,18367,"1"],[1,18368,"M_zD_z"],[1,18401,"\n\n"]],[18377,18377],[18366,18366]]],[1576343742130,["wangyan@DESKTOP-09VD06C",[[1,18367,"\n"]],[18366,18366],[18367,18367]]],[1576343761701,["wangyan@DESKTOP-09VD06C",[[-1,18367,"\n"],[1,18368,"r"]],[18367,18367],[18368,18368]]],[1576343762267,["wangyan@DESKTOP-09VD06C",[[1,18368,"anhou"]],[18368,18368],[18373,18373]]],[1576343763343,["wangyan@DESKTOP-09VD06C",[[-1,18368,"anhou"]],[18373,18373],[18368,18368]]],[1576343763630,["wangyan@DESKTOP-09VD06C",[[-1,18367,"r"],[1,18368,"\n"]],[18368,18368],[18367,18367]]],[1576343766214,["wangyan@DESKTOP-09VD06C",[[-1,18367,"\n"],[1,18368,"然后"]],[18367,18367],[18369,18369]]],[1576343778104,["wangyan@DESKTOP-09VD06C",[[1,18369,"去掉X和Y的缩放，得到"]],[18369,18369],[18380,18380]]],[1576343779239,["wangyan@DESKTOP-09VD06C",[[1,18380,"\n\n"]],[18380,18380],[18381,18381]]],[1576343782338,["wangyan@DESKTOP-09VD06C",[[1,18382,"\n"]],[18381,18381],[18382,18382]]],[1576343784471,["wangyan@DESKTOP-09VD06C",[[-1,18382,"\n"],[1,18383,"&"]],[18382,18382],[18383,18383]]],[1576343784662,["wangyan@DESKTOP-09VD06C",[[1,18383,"&"]],[18383,18383],[18384,18384]]],[1576343785302,["wangyan@DESKTOP-09VD06C",[[-1,18383,"&"]],[18384,18384],[18383,18383]]],[1576343785449,["wangyan@DESKTOP-09VD06C",[[-1,18382,"&"],[1,18383,"\n"]],[18383,18383],[18382,18382]]],[1576343785799,["wangyan@DESKTOP-09VD06C",[[-1,18382,"\n"]],[18382,18382],[18381,18381]]],[1576343787378,["wangyan@DESKTOP-09VD06C",[[1,18382,"\n"]],[18381,18381],[18382,18382]]],[1576343789629,["wangyan@DESKTOP-09VD06C",[[-1,18382,"\n"],[1,18383,"￥"]],[18382,18382],[18383,18383]]],[1576343789847,["wangyan@DESKTOP-09VD06C",[[1,18383,"￥"]],[18383,18383],[18384,18384]]],[1576343790457,["wangyan@DESKTOP-09VD06C",[[-1,18383,"￥"]],[18384,18384],[18383,18383]]],[1576343790648,["wangyan@DESKTOP-09VD06C",[[-1,18382,"￥"],[1,18383,"\n"]],[18383,18383],[18382,18382]]],[1576343791710,["wangyan@DESKTOP-09VD06C",[[-1,18382,"\n"],[1,18383,"4"]],[18382,18382],[18383,18383]]],[1576343791893,["wangyan@DESKTOP-09VD06C",[[1,18383,"4"]],[18383,18383],[18384,18384]]],[1576343792678,["wangyan@DESKTOP-09VD06C",[[-1,18383,"4"]],[18384,18384],[18383,18383]]],[1576343792848,["wangyan@DESKTOP-09VD06C",[[-1,18382,"4"],[1,18383,"\n"]],[18383,18383],[18382,18382]]],[1576343794236,["wangyan@DESKTOP-09VD06C",[[-1,18382,"\n"],[1,18383,"￥"]],[18382,18382],[18383,18383]]],[1576343795018,["wangyan@DESKTOP-09VD06C",[[-1,18382,"￥"],[1,18383,"\n"]],[18383,18383],[18382,18382]]],[1576343796254,["wangyan@DESKTOP-09VD06C",[[-1,18382,"\n"],[1,18383,"$"]],[18382,18382],[18383,18383]]],[1576343796477,["wangyan@DESKTOP-09VD06C",[[1,18383,"$\n\n$$\n"]],[18383,18383],[18385,18385]]],[1576343809070,["wangyan@DESKTOP-09VD06C",[[1,18385,"\\left"]],[18385,18385],[18390,18390]]],[1576343815776,["wangyan@DESKTOP-09VD06C",[[1,18390,"[]"]],[18390,18390],[18392,18392]]],[1576343825358,["wangyan@DESKTOP-09VD06C",[[-1,18391,"]"]],[18392,18392],[18391,18391]]],[1576343833463,["wangyan@DESKTOP-09VD06C",[[1,18391,"\\begin{}"]],[18391,18391],[18399,18399]]],[1576343836366,["wangyan@DESKTOP-09VD06C",[[1,18398,"matrix"]],[18398,18398],[18404,18404]]],[1576343839157,["wangyan@DESKTOP-09VD06C",[[1,18406,"\n"]],[18405,18405],[18406,18406]]],[1576343848757,["wangyan@DESKTOP-09VD06C",[[1,18391,"\n"]],[18391,18391],[18392,18392]]],[1576343860213,["wangyan@DESKTOP-09VD06C",[[1,18407,"\\end{}"]],[18407,18407],[18413,18413]]],[1576343863838,["wangyan@DESKTOP-09VD06C",[[1,18412,"matrix"]],[18412,18412],[18418,18418]]],[1576343864906,["wangyan@DESKTOP-09VD06C",[[1,18420,"\n"]],[18419,18419],[18420,18420]]],[1576343868549,["wangyan@DESKTOP-09VD06C",[[1,18420,"\\right"]],[18420,18420],[18426,18426]]],[1576343872646,["wangyan@DESKTOP-09VD06C",[[1,18407,"\n"]],[18406,18406],[18407,18407]]],[1576343888847,["wangyan@DESKTOP-09VD06C",[[1,18407,"M_x+D_x\\\\"]],[18407,18407],[18416,18416]]],[1576343889585,["wangyan@DESKTOP-09VD06C",[[1,18417,"\n"]],[18416,18416],[18417,18417]]],[1576343901199,["wangyan@DESKTOP-09VD06C",[[1,18417,"M_y+D_y\\\\"]],[18417,18417],[18426,18426]]],[1576343901474,["wangyan@DESKTOP-09VD06C",[[1,18427,"\n"]],[18426,18426],[18427,18427]]],[1576343907726,["wangyan@DESKTOP-09VD06C",[[1,18427,"M_zD_z"]],[18427,18427],[18433,18433]]],[1576343938594,["wangyan@DESKTOP-09VD06C",[[1,18447,"\n"]],[18446,18446],[18447,18447]]],[1576343939639,["wangyan@DESKTOP-09VD06C",[[1,18447,"]"]],[18447,18447],[18448,18448]]],[1576343942334,["wangyan@DESKTOP-09VD06C",[[1,18390,"\n"]],[18390,18390],[18391,18391]]],[1576343971443,["wangyan@DESKTOP-09VD06C",[[-1,18448,"]"]],[18449,18449],[18448,18448]]],[1576343977405,["wangyan@DESKTOP-09VD06C",[[1,18455,"\\"]],[18455,18455],[18456,18456]]],[1576343978423,["wangyan@DESKTOP-09VD06C",[[-1,18455,"\\"]],[18456,18456],[18455,18455]]],[1576343978647,["wangyan@DESKTOP-09VD06C",[[1,18455,"]"]],[18455,18455],[18456,18456]]],[1576343986121,["wangyan@DESKTOP-09VD06C",[[1,18460,"\n"]],[18401,18401],[18460,18460]]],[1576343988403,["wangyan@DESKTOP-09VD06C",[[1,18461,"\n"]],[18460,18460],[18461,18461]]],[1576344008366,["wangyan@DESKTOP-09VD06C",[[-1,18461,"\n"],[1,18462,"z"]],[18461,18461],[18462,18462]]],[1576344009336,["wangyan@DESKTOP-09VD06C",[[1,18462,"heyi"]],[18462,18462],[18466,18466]]],[1576344010152,["wangyan@DESKTOP-09VD06C",[[-1,18462,"heyi"]],[18466,18466],[18462,18462]]],[1576344010442,["wangyan@DESKTOP-09VD06C",[[-1,18461,"z"],[1,18462,"\n"]],[18462,18462],[18461,18461]]],[1576344012767,["wangyan@DESKTOP-09VD06C",[[-1,18461,"\n"],[1,18462,"这一"]],[18461,18461],[18463,18463]]],[1576344050295,["wangyan@DESKTOP-09VD06C",[[1,18463,"调整，放大了X和Y分量，因此在陡坡上产生了更明显的"]],[18463,18463],[18488,18488]]],[1576344114727,["wangyan@DESKTOP-09VD06C",[[1,18488,"颠簸。但是，当一个法线是平的时候，"]],[18488,18488],[18505,18505]]],[1576344122719,["wangyan@DESKTOP-09VD06C",[[1,18505,"另一个法线不会改变。"]],[18505,18505],[18515,18515]]],[1576344123369,["wangyan@DESKTOP-09VD06C",[[1,18515,"\n\n"]],[18515,18515],[18516,18516]]],[1576344140627,["wangyan@DESKTOP-09VD06C",[[1,18517,"\n"]],[18516,18516],[18517,18517]]],[1576344148032,["wangyan@DESKTOP-09VD06C",[[-1,18517,"\n"],[1,18518,"为什么"]],[18517,18517],[18520,18520]]],[1576344148567,["wangyan@DESKTOP-09VD06C",[[1,18520,"是"]],[18520,18520],[18521,18521]]],[1576344152798,["wangyan@DESKTOP-09VD06C",[[-1,18520,"是"]],[18521,18521],[18520,18520]]],[1576344164638,["wangyan@DESKTOP-09VD06C",[[1,18520,"被称为whiteout blending？"]],[18520,18520],[18541,18541]]],[1576344165787,["wangyan@DESKTOP-09VD06C",[[1,18541,"\n\n"]],[18541,18541],[18542,18542]]],[1576344170377,["wangyan@DESKTOP-09VD06C",[[1,18543,"\n"]],[18542,18542],[18543,18543]]],[1576344171173,["wangyan@DESKTOP-09VD06C",[[-1,18543,"\n"],[1,18544,"\\"]],[18543,18543],[18544,18544]]],[1576344171573,["wangyan@DESKTOP-09VD06C",[[1,18544,"\\"]],[18544,18544],[18545,18545]]],[1576344172327,["wangyan@DESKTOP-09VD06C",[[-1,18544,"\\"]],[18545,18545],[18544,18544]]],[1576344172757,["wangyan@DESKTOP-09VD06C",[[-1,18543,"\\"],[1,18544,"\n"]],[18544,18544],[18543,18543]]],[1576344175006,["wangyan@DESKTOP-09VD06C",[[-1,18543,"\n"],[1,18544,">"]],[18543,18543],[18544,18544]]],[1576344175702,["wangyan@DESKTOP-09VD06C",[[1,18545," "]],[18545,18545],[18546,18546]]],[1576344182166,["wangyan@DESKTOP-09VD06C",[[-1,18544,"> "]],[18546,18546],[18544,18544]]],[1576344199709,["wangyan@DESKTOP-09VD06C",[[1,18544," 这种方法是由Christopher Oat在SIGGRAPH ' 07年首次公开描述的。它曾用于AMD的Ruby: Whiteout演示，因此得名。"]],[18544,18544],[18619,18619]]],[1576344201810,["wangyan@DESKTOP-09VD06C",[[1,18619,"\n\n"]],[18619,18619],[18620,18620]]],[1576344202376,["wangyan@DESKTOP-09VD06C",[[1,18621,"\n"]],[18620,18620],[18621,18621]]],[1576344204813,["wangyan@DESKTOP-09VD06C",[[-1,18621,"\n"],[1,18622,"s"]],[18621,18621],[18622,18622]]],[1576344204997,["wangyan@DESKTOP-09VD06C",[[1,18622," "]],[18622,18622],[18623,18623]]],[1576344205816,["wangyan@DESKTOP-09VD06C",[[-1,18622," "]],[18623,18623],[18622,18622]]],[1576344206156,["wangyan@DESKTOP-09VD06C",[[-1,18621,"s"],[1,18622,"\n"]],[18622,18622],[18621,18621]]],[1576344213086,["wangyan@DESKTOP-09VD06C",[[-1,18621,"\n"],[1,18622,"`"]],[18621,18621],[18622,18622]]],[1576344214412,["wangyan@DESKTOP-09VD06C",[[1,18622,"``"]],[18622,18622],[18624,18624]]],[1576344214463,["wangyan@DESKTOP-09VD06C",[[1,18624,"language\n```\n"]],[18624,18624],[18624,18632]]],[1576344216037,["wangyan@DESKTOP-09VD06C",[[-1,18624,"language"],[1,18632,"c"]],[18624,18632],[18625,18625]]],[1576344216986,["wangyan@DESKTOP-09VD06C",[[1,18626,"\n"]],[18625,18625],[18626,18626]]],[1576344217896,["wangyan@DESKTOP-09VD06C",[[1,18626,"i.normal =\n\t\tfloat3(mainNormal.xy + detailNormal.xy, mainNormal.z * detailNormal.z);\n//\t\tfloat3(mainNormal.xy / mainNormal.z + detailNormal.xy / detailNormal.z, 1);"]],[18626,18626],[18790,18790]]],[1576344219626,["wangyan@DESKTOP-09VD06C",[[1,18791,"\n"]],[18790,18790],[18791,18791]]],[1576344221166,["wangyan@DESKTOP-09VD06C",[[-1,18791,"\n"]],[18791,18791],[18790,18790]]],[1576344222425,["wangyan@DESKTOP-09VD06C",[[1,18795,"\n"]],[18794,18794],[18795,18795]]],[1576344222705,["wangyan@DESKTOP-09VD06C",[[1,18796,"\n"]],[18795,18795],[18796,18796]]],[1576344228415,["wangyan@DESKTOP-09VD06C",[[1,18796,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-details/mixed-normals.png)"]],[18796,18796],[18890,18890]]],[1576344244245,["wangyan@DESKTOP-09VD06C",[[1,18798,"Whiteout blening"]],[18798,18798],[18814,18814]]],[1576344256178,["wangyan@DESKTOP-09VD06C",[[1,18811,"d"],[1,18814," normals, with albedo."]],[18798,18814],[18837,18837]]],[1576344257954,["wangyan@DESKTOP-09VD06C",[[1,18930,"\n"]],[18929,18929],[18930,18930]]],[1576344258113,["wangyan@DESKTOP-09VD06C",[[1,18931,"\n"]],[18930,18930],[18931,18931]]],[1576344268333,["wangyan@DESKTOP-09VD06C",[[-1,18931,"\n"],[1,18932,"U"]],[18931,18931],[18932,18932]]],[1576344268924,["wangyan@DESKTOP-09VD06C",[[1,18932,"nir"]],[18932,18932],[18935,18935]]],[1576344270124,["wangyan@DESKTOP-09VD06C",[[-1,18932,"nir"]],[18935,18935],[18932,18932]]],[1576344278364,["wangyan@DESKTOP-09VD06C",[[-1,18931,"U"],[1,18932,"\n"]],[18932,18932],[18931,18931]]],[1576344284440,["wangyan@DESKTOP-09VD06C",[[1,18931,"UnityStandardUtils包含BlendNormals函数，该函数也使用了whiteout混合。我们来看这个函数。它也使结果正常化，所以我们不再需要自己去做。"]],[18931,18931],[19015,19015]]],[1576344292593,["wangyan@DESKTOP-09VD06C",[[-1,18981,"混合"]],[18983,18983],[18981,18981]]],[1576344295102,["wangyan@DESKTOP-09VD06C",[[1,18981,"hunh"]],[18981,18981],[18985,18985]]],[1576344297043,["wangyan@DESKTOP-09VD06C",[[-1,18981,"hunhe"]],[18986,18986],[18981,18981]]],[1576344298730,["wangyan@DESKTOP-09VD06C",[[1,18981,"混合"]],[18981,18981],[18983,18983]]],[1576344313533,["wangyan@DESKTOP-09VD06C",[[-1,18995,"使结果正常化"]],[19001,19001],[18995,18995]]],[1576344325320,["wangyan@DESKTOP-09VD06C",[[1,18995,"对结果归一化了"]],[18995,18995],[19002,19002]]],[1576344329342,["wangyan@DESKTOP-09VD06C",[[1,19017,"\n"]],[19016,19016],[19017,19017]]],[1576344329931,["wangyan@DESKTOP-09VD06C",[[1,19018,"\n"]],[19017,19017],[19018,19018]]],[1576344339558,["wangyan@DESKTOP-09VD06C",[[-1,19018,"\n"],[1,19019,"`"]],[19018,19018],[19019,19019]]],[1576344339885,["wangyan@DESKTOP-09VD06C",[[1,19019,"``"]],[19019,19019],[19021,19021]]],[1576344339936,["wangyan@DESKTOP-09VD06C",[[1,19021,"language\n```\n"]],[19021,19021],[19021,19029]]],[1576344340837,["wangyan@DESKTOP-09VD06C",[[-1,19021,"language"],[1,19029,"c"]],[19021,19029],[19022,19022]]],[1576344341522,["wangyan@DESKTOP-09VD06C",[[1,19023,"\n"]],[19022,19022],[19023,19023]]],[1576344342081,["wangyan@DESKTOP-09VD06C",[[1,19023,"i.normal = BlendNormals(mainNormal, detailNormal);\n//\t\tfloat3(mainNormal.xy + detailNormal.xy, mainNormal.z * detailNormal.z);\n\ti.normal = i.normal.xzy;\n//\ti.normal = normalize(i.normal);"]],[19023,19023],[19210,19210]]],[1576344343726,["wangyan@DESKTOP-09VD06C",[[1,19215,"\n"]],[19214,19214],[19215,19215]]],[1576344344052,["wangyan@DESKTOP-09VD06C",[[1,19216,"\n"]],[19215,19215],[19216,19216]]],[1576344353246,["wangyan@DESKTOP-09VD06C",[[1,19216,"# q"]],[19216,19216],[19219,19219]]],[1576344354231,["wangyan@DESKTOP-09VD06C",[[-1,19218,"q"]],[19219,19219],[19218,19218]]],[1576344415235,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576344415235,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576344358063,["wangyan@DESKTOP-09VD06C",[[1,19218,"切线空间"]],[19218,19218],[19222,19222]]],[1576344358496,["wangyan@DESKTOP-09VD06C",[[1,19223,"\n"]],[19222,19222],[19223,19223]]],[1576344358801,["wangyan@DESKTOP-09VD06C",[[1,19224,"\n"]],[19223,19223],[19224,19224]]],[1576344371752,["wangyan@DESKTOP-09VD06C",[[-1,19224,"\n"],[1,19225,"到目前"]],[19224,19224],[19227,19227]]],[1576344396785,["wangyan@DESKTOP-09VD06C",[[1,19227,"为止，我们已经假设我们正在着色一个与XZ平面对齐的平面。但是要使这项技术有任何用处，它必须适用于任意的几何形状。"]],[19227,19227],[19283,19283]]],[1576344410430,["wangyan@DESKTOP-09VD06C",[[-1,19264,"任何用处"]],[19268,19268],[19264,19264]]],[1576344414624,["wangyan@DESKTOP-09VD06C",[[1,19264,"实际作用"]],[19264,19264],[19268,19268]]],[1576344475238,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576344475238,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576344436549,["wangyan@DESKTOP-09VD06C",[[1,19283,"\n\n"]],[19283,19283],[19284,19284]]],[1576344436730,["wangyan@DESKTOP-09VD06C",[[1,19285,"\n"]],[19284,19284],[19285,19285]]],[1576344437080,["wangyan@DESKTOP-09VD06C",[[1,19285,"到目前为止，我们已经假设我们正在着色一个与XZ平面对齐的平面。但是要使这项技术有任何用处，它必须适用于任意的几何形状。"]],[19285,19285],[19344,19344]]],[1576344438531,["wangyan@DESKTOP-09VD06C",[[-1,19285,"到目前为止，我们已经假设我们正在着色一个与XZ平面对齐的平面。但是要使这项技术有任何用处，它必须适用于任意的几何形状。"]],[19344,19344],[19285,19285]]],[1576344442010,["wangyan@DESKTOP-09VD06C",[[1,19285,"![mesh](https://catlikecoding.com/unity/tutorials/rendering/part-6/tangents/mesh-normals.png)"]],[19285,19285],[19378,19378]]],[1576344450670,["wangyan@DESKTOP-09VD06C",[[1,19379,"\n"]],[19378,19378],[19379,19379]]],[1576344451198,["wangyan@DESKTOP-09VD06C",[[1,19380,"\n"]],[19379,19379],[19380,19380]]],[1576344451750,["wangyan@DESKTOP-09VD06C",[[1,19380,"![mapped](https://catlikecoding.com/unity/tutorials/rendering/part-6/tangents/mapped-normals.png)"]],[19380,19380],[19477,19477]]],[1576344468403,["wangyan@DESKTOP-09VD06C",[[1,19478,"\n"]],[19477,19477],[19478,19478]]],[1576344468539,["wangyan@DESKTOP-09VD06C",[[1,19479,"\n"]],[19478,19478],[19479,19479]]],[1576344472457,["wangyan@DESKTOP-09VD06C",[[-1,19479,"\n"],[1,19480,"立方体"]],[19479,19479],[19482,19482]]],[1576344473646,["wangyan@DESKTOP-09VD06C",[[1,19482,"的一个"]],[19482,19482],[19485,19485]]],[1576344535256,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576344535256,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576344485525,["wangyan@DESKTOP-09VD06C",[[1,19485,"面可以被对齐，这样她"]],[19485,19485],[19495,19495]]],[1576344485937,["wangyan@DESKTOP-09VD06C",[[-1,19494,"她"]],[19495,19495],[19494,19494]]],[1576344494168,["wangyan@DESKTOP-09VD06C",[[1,19494,"它就符合我们的"]],[19494,19494],[19501,19501]]],[1576344595255,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576344595255,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576344580162,["wangyan@DESKTOP-09VD06C",[[1,19501,"假设。我们可以支持另一边，通过交换和翻转维度。但这是假设一个立方体是轴向的。当立方体任意旋转时，它会变得更复杂。我们必须转换凹凸贴图代码的结果，这样它才能与人脸的真实方向相匹配。"]],[19479,19501],[19590,19590]]],[1576344655252,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576344655252,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576344622590,["wangyan@DESKTOP-09VD06C",[[1,19590,"\n\n"]],[19590,19590],[19591,19591]]],[1576344622826,["wangyan@DESKTOP-09VD06C",[[1,19592,"\n"]],[19591,19591],[19592,19592]]],[1576344623138,["wangyan@DESKTOP-09VD06C",[[1,19592,"我们能知道人脸的方位吗?为此，我们需要定义U和V轴的向量。这两个，加上法向量，定义了一个符合我们假设的三维空间。一旦我们有了这样的空间，我们就可以用它来把这些凸点变成世界空间。"]],[19592,19592],[19680,19680]]],[1576344626711,["wangyan@DESKTOP-09VD06C",[[-1,19671,"凸点"]],[19673,19673],[19671,19671]]],[1576344628105,["wangyan@DESKTOP-09VD06C",[[1,19671,"凹凸"]],[19671,19671],[19673,19673]]],[1576344632415,["wangyan@DESKTOP-09VD06C",[[1,19679,"的了"]],[19679,19679],[19681,19681]]],[1576344633921,["wangyan@DESKTOP-09VD06C",[[1,19683,"\n"]],[19682,19682],[19683,19683]]],[1576344634143,["wangyan@DESKTOP-09VD06C",[[1,19684,"\n"]],[19683,19683],[19684,19684]]],[1576344641410,["wangyan@DESKTOP-09VD06C",[[1,19685,"\n"]],[19683,19683],[19684,19684]]],[1576344653409,["wangyan@DESKTOP-09VD06C",[[1,19684,"因为我们已经有了法向量N，我们只需要一个额外的向量。这两个向量的外积定义了第三个向量。"]],[19684,19684],[19727,19727]]],[1576344715267,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576344715267,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576344655942,["wangyan@DESKTOP-09VD06C",[[1,19695,"——"]],[19695,19695],[19697,19697]]],[1576344657086,["wangyan@DESKTOP-09VD06C",[[-1,19695,"——"]],[19697,19697],[19695,19695]]],[1576344657949,["wangyan@DESKTOP-09VD06C",[[1,19695,"_)"]],[19695,19695],[19697,19697]]],[1576344658032,["wangyan@DESKTOP-09VD06C",[[-1,19696,")"],[1,19697,"_"]],[19697,19697],[19696,19696]]],[1576344660235,["wangyan@DESKTOP-09VD06C",[[-1,19696,"_"]],[19697,19697],[19696,19696]]],[1576344661716,["wangyan@DESKTOP-09VD06C",[[1,19697,"_"]],[19697,19697],[19698,19698]]],[1576344699370,["wangyan@DESKTOP-09VD06C",[[1,19731,"\n"]],[19730,19730],[19731,19731]]],[1576344775269,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576344775269,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576344718202,["wangyan@DESKTOP-09VD06C",[[1,19732,"\n"]],[19730,19730],[19731,19731]]],[1576344719314,["wangyan@DESKTOP-09VD06C",[[1,19731,"附加向量作为网格顶点数据的一部分提供。因为它位于曲面法向量定义的平面上，所以它被称为切向量t。根据惯例，这个向量与U轴相匹配，指向右边。"]],[19731,19731],[19799,19799]]],[1576344725417,["wangyan@DESKTOP-09VD06C",[[-1,19776,"t"]],[19777,19777],[19776,19776]]],[1576344726549,["wangyan@DESKTOP-09VD06C",[[1,19776,"__"]],[19776,19776],[19777,19777]]],[1576344729061,["wangyan@DESKTOP-09VD06C",[[1,19777,"T"]],[19777,19777],[19778,19778]]],[1576344737964,["wangyan@DESKTOP-09VD06C",[[1,19803,"\n"]],[19802,19802],[19803,19803]]],[1576344770450,["wangyan@DESKTOP-09VD06C",[[1,19803,"第三个向量被称为B，即副法线。正如Unity将其称为副法线一样，i也将如此。这个向量定义了指向前方的V轴。推导bitangent的标准方法是B=N×T。然而，这将产生一个指向后的向量，而不是指向前的向量。要纠正这个错误，结果必须乘以- 1。这个因子被存储为T的一个额外的第四个分量。"]],[19803,19803],[19944,19944]]],[1576344835295,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576344835295,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576344780505,["wangyan@DESKTOP-09VD06C",[[1,19811,"__"]],[19811,19811],[19812,19812]]],[1576344781753,["wangyan@DESKTOP-09VD06C",[[-1,19812,"_"]],[19813,19813],[19812,19812]]],[1576344783357,["wangyan@DESKTOP-09VD06C",[[1,19813,"_"]],[19813,19813],[19814,19814]]],[1576344807863,["wangyan@DESKTOP-09VD06C",[[1,19837,"_"],[1,19838,"_"]],[19837,19838],[19837,19840]]],[1576344814368,["wangyan@DESKTOP-09VD06C",[[-1,19838,"i"]],[19839,19839],[19838,19838]]],[1576344816166,["wangyan@DESKTOP-09VD06C",[[1,19838,"I"]],[19838,19838],[19839,19839]]],[1576344895294,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576344895294,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576344837068,["wangyan@DESKTOP-09VD06C",[[1,19877,"_"],[1,19882,"_"]],[19877,19882],[19877,19884]]],[1576344849499,["wangyan@DESKTOP-09VD06C",[[1,19937,"_"],[1,19938,"_"]],[19937,19938],[19937,19940]]],[1576344853246,["wangyan@DESKTOP-09VD06C",[[1,19953,"\n"]],[19952,19952],[19953,19953]]],[1576344853932,["wangyan@DESKTOP-09VD06C",[[1,19954,"\n"]],[19953,19953],[19954,19954]]],[1576344888268,["wangyan@DESKTOP-09VD06C",[[1,19954,"因此我们可以使用顶点法线和切线来构建一个与网格表面匹配的三维空间。这个空间被称为正切空间，正切基，或者TBN空间。对于立方体，每个面的切线空间是一致的。在球面的情况下，切线空间环绕其表面。"]],[19954,19954],[20048,20048]]],[1576344955313,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576344955313,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576344941650,["wangyan@DESKTOP-09VD06C",[[1,20049,"\n"]],[20048,20048],[20049,20049]]],[1576344941809,["wangyan@DESKTOP-09VD06C",[[1,20050,"\n"]],[20049,20049],[20050,20050]]],[1576344942080,["wangyan@DESKTOP-09VD06C",[[1,20050,"为了构造这个空间，网格必须包含切向量。幸运的是，Unity的默认网格包含了这些数据。当你导入一个网格到Unity中，你要么导入你自己的切线，要么让Unity为你生成它们。"]],[20050,20050],[20135,20135]]],[1576344947503,["wangyan@DESKTOP-09VD06C",[[1,20136,"\n"]],[20135,20135],[20136,20136]]],[1576344947699,["wangyan@DESKTOP-09VD06C",[[1,20137,"\n"]],[20136,20136],[20137,20137]]],[1576344949162,["wangyan@DESKTOP-09VD06C",[[1,20137,"# "]],[20137,20137],[20139,20139]]],[1576344950205,["wangyan@DESKTOP-09VD06C",[[1,20138,"#"]],[20139,20139],[20140,20140]]],[1576344952685,["wangyan@DESKTOP-09VD06C",[[1,20140,"kes"]],[20140,20140],[20143,20143]]],[1576344954096,["wangyan@DESKTOP-09VD06C",[[-1,20140,"kes"]],[20143,20143],[20140,20140]]],[1576344966745,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576344966745,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576344964521,["wangyan@DESKTOP-09VD06C",[[1,20140,"可视化切线空间"]],[20140,20140],[20147,20147]]],[1576344965539,["wangyan@DESKTOP-09VD06C",[[1,20148,"\n"]],[20147,20147],[20148,20148]]],[1576345026774,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576345026774,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576345001073,["wangyan@DESKTOP-09VD06C",[[1,20149,"为了了解切线空间是如何工作的，让我们编写一个它的快速可视化代码。使用OnDrawGizmos方法创建一个TangentSpaceVisualizer组件。"]],[20149,20149],[20226,20226]]],[1576345025441,["wangyan@DESKTOP-09VD06C",[[1,20226,"\n\n"]],[20226,20226],[20227,20227]]],[1576345025647,["wangyan@DESKTOP-09VD06C",[[1,20228,"\n"]],[20227,20227],[20228,20228]]],[1576345086774,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576345086774,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576345030983,["wangyan@DESKTOP-09VD06C",[[-1,20228,"\n"],[1,20229,"`"]],[20228,20228],[20229,20229]]],[1576345031318,["wangyan@DESKTOP-09VD06C",[[1,20229,"``"]],[20229,20229],[20231,20231]]],[1576345031365,["wangyan@DESKTOP-09VD06C",[[1,20231,"language\n```\n"]],[20231,20231],[20231,20239]]],[1576345032533,["wangyan@DESKTOP-09VD06C",[[-1,20231,"language"],[1,20239,"c"]],[20231,20239],[20232,20232]]],[1576345032620,["wangyan@DESKTOP-09VD06C",[[1,20232,"s"]],[20232,20232],[20233,20233]]],[1576345033457,["wangyan@DESKTOP-09VD06C",[[1,20234,"\n"]],[20233,20233],[20234,20234]]],[1576345034784,["wangyan@DESKTOP-09VD06C",[[1,20234,"using UnityEngine;\n\npublic class TangentSpaceVisualizer : MonoBehaviour {\n\n\tvoid OnDrawGizmos () {\n\t}\n}"]],[20234,20234],[20337,20337]]],[1576345058337,["wangyan@DESKTOP-09VD06C",[[1,20342,"\n"]],[20341,20341],[20342,20342]]],[1576345058505,["wangyan@DESKTOP-09VD06C",[[1,20343,"\n"]],[20342,20342],[20343,20343]]],[1576345058869,["wangyan@DESKTOP-09VD06C",[[1,20343,"每次绘制小玩意时，从游戏对象的网格过滤器中抓取网格，并使用它来显示其切线空间。当然，这只适用于有网格的情况。选择shadedMesh，而不是mesh。第一个为我们提供了对mesh资产的引用，而第二个将创建一个副本。"]],[20343,20343],[20450,20450]]],[1576345067581,["wangyan@DESKTOP-09VD06C",[[-1,20347,"小玩意"],[1,20350,"g"]],[20347,20350],[20348,20348]]],[1576345070892,["wangyan@DESKTOP-09VD06C",[[1,20348,"izmos"]],[20348,20348],[20353,20353]]],[1576345084853,["wangyan@DESKTOP-09VD06C",[[-1,20361,"网格过滤器"],[1,20366,"m"]],[20361,20366],[20362,20362]]],[1576345086589,["wangyan@DESKTOP-09VD06C",[[1,20362,"esh f"]],[20362,20362],[20367,20367]]],[1576345146779,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576345146779,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576345087982,["wangyan@DESKTOP-09VD06C",[[1,20367,"ilter"]],[20367,20367],[20372,20372]]],[1576345133458,["wangyan@DESKTOP-09VD06C",[[1,20460,"\n"]],[20459,20459],[20460,20460]]],[1576345133724,["wangyan@DESKTOP-09VD06C",[[1,20461,"\n"]],[20460,20460],[20461,20461]]],[1576345136276,["wangyan@DESKTOP-09VD06C",[[-1,20461,"\n"],[1,20462,"w"]],[20461,20461],[20462,20462]]],[1576345136461,["wangyan@DESKTOP-09VD06C",[[1,20462,"en"]],[20462,20462],[20464,20464]]],[1576345137258,["wangyan@DESKTOP-09VD06C",[[-1,20462,"en"]],[20464,20464],[20462,20462]]],[1576345137411,["wangyan@DESKTOP-09VD06C",[[-1,20461,"w"],[1,20462,"\n"]],[20462,20462],[20461,20461]]],[1576345140094,["wangyan@DESKTOP-09VD06C",[[-1,20461,"\n"],[1,20462,"问"]],[20461,20461],[20462,20462]]],[1576345144870,["wangyan@DESKTOP-09VD06C",[[1,20462,"："]],[20462,20462],[20463,20463]]],[1576345206788,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576345206788,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576345157688,["wangyan@DESKTOP-09VD06C",[[1,20463,"为什么mesh"]],[20463,20463],[20470,20470]]],[1576345166362,["wangyan@DESKTOP-09VD06C",[[1,20466,"### `[MeshFilter](http://docs.unity3d.com/Documentation/ScriptReference/MeshFilter.html)."],[1,20470,"`"]],[20466,20470],[20560,20560]]],[1576345175655,["wangyan@DESKTOP-09VD06C",[[1,20560,"s"]],[20560,20560],[20561,20561]]],[1576345176699,["wangyan@DESKTOP-09VD06C",[[-1,20560,"s"]],[20561,20561],[20560,20560]]],[1576345187599,["wangyan@DESKTOP-09VD06C",[[1,20560,"属性会创建一个副本"]],[20560,20560],[20569,20569]]],[1576345266793,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576345266793,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576345206933,["wangyan@DESKTOP-09VD06C",[[1,20569,"？"]],[20569,20569],[20570,20570]]],[1576345219390,["wangyan@DESKTOP-09VD06C",[[-1,20461,"问：为什么### `[MeshFilter](http://docs.unity3d.com/Documentation/ScriptReference/MeshFilter.html).mesh`属性会创建一个副本？"]],[20461,20461],[0,0]]],[1576345220570,["wangyan@DESKTOP-09VD06C",[[1,20461,"问：为什么### `[MeshFilter](http://docs.unity3d.com/Documentation/ScriptReference/MeshFilter.html).mesh`属性会创建一个副本？"]],[0,0],[20461,20461]]],[1576345228103,["wangyan@DESKTOP-09VD06C",[[1,20461,"**"],[1,20570,"**"]],[20461,20570],[20461,20574]]],[1576345264603,["wangyan@DESKTOP-09VD06C",[[1,20574,"\n\n"]],[20574,20574],[20575,20575]]],[1576345265725,["wangyan@DESKTOP-09VD06C",[[-1,20575,"\n"],[1,20576,">"]],[20575,20575],[20576,20576]]],[1576345326798,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576345326798,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576345267884,["wangyan@DESKTOP-09VD06C",[[1,20576," 假设您有一个使用网格资产的游戏对象。你只需要在运行时调整游戏对象的网格。然后，您需要创建网格资产的本地副本，具体到该对象。这就是为什么MeshFilter。mesh创建一个副本。"]],[20576,20576],[20666,20666]]],[1576345275906,["wangyan@DESKTOP-09VD06C",[[-1,20654,"。"]],[20655,20655],[20654,20654]]],[1576345277333,["wangyan@DESKTOP-09VD06C",[[1,20654,"."]],[20654,20654],[20655,20655]]],[1576345285444,["wangyan@DESKTOP-09VD06C",[[1,20666,"\n\n"]],[20666,20666],[20667,20667]]],[1576345285600,["wangyan@DESKTOP-09VD06C",[[1,20668,"\n"]],[20667,20667],[20668,20668]]],[1576345288262,["wangyan@DESKTOP-09VD06C",[[-1,20668,"\n"],[1,20669,"`"]],[20668,20668],[20669,20669]]],[1576345288558,["wangyan@DESKTOP-09VD06C",[[1,20669,"``"]],[20669,20669],[20671,20671]]],[1576345288605,["wangyan@DESKTOP-09VD06C",[[1,20671,"language\n```\n"]],[20671,20671],[20671,20679]]],[1576345289573,["wangyan@DESKTOP-09VD06C",[[-1,20671,"language"],[1,20679,"c"]],[20671,20679],[20672,20672]]],[1576345289661,["wangyan@DESKTOP-09VD06C",[[1,20672,"s"]],[20672,20672],[20673,20673]]],[1576345290352,["wangyan@DESKTOP-09VD06C",[[1,20674,"\n"]],[20673,20673],[20674,20674]]],[1576345291585,["wangyan@DESKTOP-09VD06C",[[1,20674,"void OnDrawGizmos () {\n\t\tMeshFilter filter = GetComponent<MeshFilter>();\n\t\tif (filter) {\n\t\t\tMesh mesh = filter.sharedMesh;\n\t\t\tif (mesh) {\n\t\t\t\tShowTangentSpace(mesh);\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid ShowTangentSpace (Mesh mesh) {\n\t}"]],[20674,20674],[20892,20892]]],[1576345293546,["wangyan@DESKTOP-09VD06C",[[1,20897,"\n"]],[20896,20896],[20897,20897]]],[1576345293930,["wangyan@DESKTOP-09VD06C",[[1,20898,"\n"]],[20897,20897],[20898,20898]]],[1576345313331,["wangyan@DESKTOP-09VD06C",[[1,20898,"首先，我们来看法向量。从网格中获取顶点位置和法线，并使用它们来绘制直线。我们必须将它们转换成世界空间，这样它们才能与场景中的几何图形匹配。因为法线在切线空间中对应向上的方向，我们用绿色来表示。"]],[20898,20898],[20994,20994]]],[1576345314586,["wangyan@DESKTOP-09VD06C",[[1,20995,"\n"]],[20994,20994],[20995,20995]]],[1576345315055,["wangyan@DESKTOP-09VD06C",[[1,20996,"\n"]],[20995,20995],[20996,20996]]],[1576345323439,["wangyan@DESKTOP-09VD06C",[[-1,20996,"\n"],[1,20997,"`"]],[20996,20996],[20997,20997]]],[1576345323732,["wangyan@DESKTOP-09VD06C",[[1,20997,"``"]],[20997,20997],[20999,20999]]],[1576345323781,["wangyan@DESKTOP-09VD06C",[[1,20999,"language\n```\n"]],[20999,20999],[20999,21007]]],[1576345324878,["wangyan@DESKTOP-09VD06C",[[-1,20999,"language"],[1,21007,"c"]],[20999,21007],[21000,21000]]],[1576345324981,["wangyan@DESKTOP-09VD06C",[[1,21000,"s"]],[21000,21000],[21001,21001]]],[1576345325722,["wangyan@DESKTOP-09VD06C",[[1,21002,"\n"]],[21001,21001],[21002,21002]]],[1576345386804,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576345386804,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576345326949,["wangyan@DESKTOP-09VD06C",[[1,21002,"void ShowTangentSpace (Mesh mesh) {\n\t\tVector3[] vertices = mesh.vertices;\n\t\tVector3[] normals = mesh.normals;\n\t\tfor (int i = 0; i < vertices.Length; i++) {\n\t\t\tShowTangentSpace(\n\t\t\t\ttransform.TransformPoint(vertices[i]),\n\t\t\t\ttransform.TransformDirection(normals[i])\n\t\t\t);\n\t\t}\n\t}\n\n\tvoid ShowTangentSpace (Vector3 vertex, Vector3 normal) {\n\t\tGizmos.color = Color.green;\n\t\tGizmos.DrawLine(vertex, vertex + normal);\n\t}"]],[21002,21002],[21415,21415]]],[1576345330739,["wangyan@DESKTOP-09VD06C",[[1,21420,"\n"]],[21419,21419],[21420,21420]]],[1576345331002,["wangyan@DESKTOP-09VD06C",[[1,21421,"\n"]],[21420,21420],[21421,21421]]],[1576345358538,["wangyan@DESKTOP-09VD06C",[[1,21421,"将此组件添加到一些带有网格的对象中以查看其顶点法线。"]],[21421,21421],[21447,21447]]],[1576345359354,["wangyan@DESKTOP-09VD06C",[[1,21448,"\n"]],[21447,21447],[21448,21448]]],[1576345359753,["wangyan@DESKTOP-09VD06C",[[1,21449,"\n"]],[21448,21448],[21449,21449]]],[1576345362886,["wangyan@DESKTOP-09VD06C",[[1,21449,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/tangents/gizmos-normal.png)"]],[21449,21449],[21539,21539]]],[1576345370272,["wangyan@DESKTOP-09VD06C",[[1,21451,"查看法线"]],[21451,21451],[21455,21455]]],[1576345446820,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576345446820,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576345393009,["wangyan@DESKTOP-09VD06C",[[1,21544,"\n"]],[21543,21543],[21544,21544]]],[1576345393179,["wangyan@DESKTOP-09VD06C",[[1,21545,"\n"]],[21544,21544],[21545,21545]]],[1576345393593,["wangyan@DESKTOP-09VD06C",[[1,21545,"线的合理长度是多少?这取决于几何形状。我们来添加一个可配置的比例。我们还支持一个可配置的偏移量，它将线条推离表面。这使它更容易检查重叠的顶点"]],[21545,21545],[21615,21615]]],[1576345400424,["wangyan@DESKTOP-09VD06C",[[1,21616,"\n"]],[21615,21615],[21616,21616]]],[1576345400585,["wangyan@DESKTOP-09VD06C",[[1,21617,"\n"]],[21616,21616],[21617,21617]]],[1576345407765,["wangyan@DESKTOP-09VD06C",[[-1,21617,"\n"],[1,21618,"·"]],[21617,21617],[21618,21618]]],[1576345408101,["wangyan@DESKTOP-09VD06C",[[1,21618,"··"]],[21618,21618],[21620,21620]]],[1576345409267,["wangyan@DESKTOP-09VD06C",[[-1,21618,"··"]],[21620,21620],[21618,21618]]],[1576345409448,["wangyan@DESKTOP-09VD06C",[[-1,21617,"·"],[1,21618,"\n"]],[21618,21618],[21617,21617]]],[1576345410440,["wangyan@DESKTOP-09VD06C",[[-1,21617,"\n"]],[21617,21617],[21616,21616]]],[1576345411089,["wangyan@DESKTOP-09VD06C",[[1,21617,"\n"]],[21616,21616],[21617,21617]]],[1576345411894,["wangyan@DESKTOP-09VD06C",[[-1,21617,"\n"],[1,21618,"`"]],[21617,21617],[21618,21618]]],[1576345412245,["wangyan@DESKTOP-09VD06C",[[1,21618,"``"]],[21618,21618],[21620,21620]]],[1576345412295,["wangyan@DESKTOP-09VD06C",[[1,21620,"language\n```\n"]],[21620,21620],[21620,21628]]],[1576345414405,["wangyan@DESKTOP-09VD06C",[[-1,21620,"language"],[1,21628,"c"]],[21620,21628],[21621,21621]]],[1576345414496,["wangyan@DESKTOP-09VD06C",[[1,21621,"s"]],[21621,21621],[21622,21622]]],[1576345414869,["wangyan@DESKTOP-09VD06C",[[1,21623,"\n"]],[21622,21622],[21623,21623]]],[1576345415985,["wangyan@DESKTOP-09VD06C",[[1,21623,"public float offset = 0.01f;\n\tpublic float scale = 0.1f;\n\n\tvoid ShowTangentSpace (Vector3 vertex, Vector3 normal) {\n\t\tvertex += normal * offset;\n\t\tGizmos.color = Color.green;\n\t\tGizmos.DrawLine(vertex, vertex + normal * scale);\n\t}"]],[21623,21623],[21852,21852]]],[1576345418192,["wangyan@DESKTOP-09VD06C",[[1,21857,"\n"]],[21856,21856],[21857,21857]]],[1576345418497,["wangyan@DESKTOP-09VD06C",[[1,21858,"\n"]],[21857,21857],[21858,21858]]],[1576345424489,["wangyan@DESKTOP-09VD06C",[[1,21858,"![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/tangents/inspector.png)"]],[21858,21858],[21953,21953]]],[1576345427946,["wangyan@DESKTOP-09VD06C",[[1,21954,"\n"]],[21953,21953],[21954,21954]]],[1576345428081,["wangyan@DESKTOP-09VD06C",[[1,21955,"\n"]],[21954,21954],[21955,21955]]],[1576345428876,["wangyan@DESKTOP-09VD06C",[[1,21955,"![scene](https://catlikecoding.com/unity/tutorials/rendering/part-6/tangents/gizmos-offset-scale.png)"]],[21955,21955],[22056,22056]]],[1576345429811,["wangyan@DESKTOP-09VD06C",[[1,22057,"\n"]],[22056,22056],[22057,22057]]],[1576345430017,["wangyan@DESKTOP-09VD06C",[[1,22058,"\n"]],[22057,22057],[22058,22058]]],[1576345506872,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576345506872,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576345447768,["wangyan@DESKTOP-09VD06C",[[1,22058,"现在包括切向量。它们和法向量一样，除了它们是四维向量。当它们指向右侧时，给它们一个红色。"]],[22058,22058],[22102,22102]]],[1576345458079,["wangyan@DESKTOP-09VD06C",[[-1,22060,"包括"]],[22062,22062],[22060,22060]]],[1576345459341,["wangyan@DESKTOP-09VD06C",[[1,22060,"shi"]],[22060,22060],[22063,22063]]],[1576345460280,["wangyan@DESKTOP-09VD06C",[[-1,22060,"shi"]],[22063,22063],[22060,22060]]],[1576345461694,["wangyan@DESKTOP-09VD06C",[[1,22060,"是"]],[22060,22060],[22061,22061]]],[1576345466562,["wangyan@DESKTOP-09VD06C",[[1,22102,"\n"]],[22101,22101],[22102,22102]]],[1576345466738,["wangyan@DESKTOP-09VD06C",[[1,22103,"\n"]],[22102,22102],[22103,22103]]],[1576345479126,["wangyan@DESKTOP-09VD06C",[[-1,22103,"\n"],[1,22104,"·"]],[22103,22103],[22104,22104]]],[1576345479549,["wangyan@DESKTOP-09VD06C",[[1,22104,"··"]],[22104,22104],[22106,22106]]],[1576345480564,["wangyan@DESKTOP-09VD06C",[[-1,22104,"··"]],[22106,22106],[22104,22104]]],[1576345480795,["wangyan@DESKTOP-09VD06C",[[-1,22103,"·"],[1,22104,"\n"]],[22104,22104],[22103,22103]]],[1576345481565,["wangyan@DESKTOP-09VD06C",[[-1,22103,"\n"],[1,22104,"`"]],[22103,22103],[22104,22104]]],[1576345481876,["wangyan@DESKTOP-09VD06C",[[1,22104,"``"]],[22104,22104],[22106,22106]]],[1576345481928,["wangyan@DESKTOP-09VD06C",[[1,22106,"language\n```\n"]],[22106,22106],[22106,22114]]],[1576345482854,["wangyan@DESKTOP-09VD06C",[[-1,22106,"language"],[1,22114,"c"]],[22106,22114],[22107,22107]]],[1576345482948,["wangyan@DESKTOP-09VD06C",[[1,22107,"s"]],[22107,22107],[22108,22108]]],[1576345483693,["wangyan@DESKTOP-09VD06C",[[1,22109,"\n"]],[22108,22108],[22109,22109]]],[1576345484474,["wangyan@DESKTOP-09VD06C",[[1,22109,"void ShowTangentSpace (Mesh mesh) {\n\t\tVector3[] vertices = mesh.vertices;\n\t\tVector3[] normals = mesh.normals;\n\t\tVector4[] tangents = mesh.tangents;\n\t\tfor (int i = 0; i < vertices.Length; i++) {\n\t\t\tShowTangentSpace(\n\t\t\t\ttransform.TransformPoint(vertices[i]),\n\t\t\t\ttransform.TransformDirection(normals[i]),\n\t\t\t\ttransform.TransformDirection(tangents[i])\n\t\t\t);\n\t\t}\n\t}\n\n\tvoid ShowTangentSpace (Vector3 vertex, Vector3 normal, Vector3 tangent) {\n\t\tvertex += normal * offset;\n\t\tGizmos.color = Color.green;\n\t\tGizmos.DrawLine(vertex, vertex + normal * scale);\n\t\tGizmos.color = Color.red;\n\t\tGizmos.DrawLine(vertex, vertex + tangent * scale);\n\t}"]],[22109,22109],[22742,22742]]],[1576345486164,["wangyan@DESKTOP-09VD06C",[[1,22747,"\n"]],[22746,22746],[22747,22747]]],[1576345486360,["wangyan@DESKTOP-09VD06C",[[1,22748,"\n"]],[22747,22747],[22748,22748]]],[1576345491012,["wangyan@DESKTOP-09VD06C",[[1,22749,"\n"]],[22747,22747],[22748,22748]]],[1576345491454,["wangyan@DESKTOP-09VD06C",[[1,22748,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/tangents/gizmos-tangents.png)"]],[22748,22748],[22840,22840]]],[1576345495285,["wangyan@DESKTOP-09VD06C",[[1,22750,"s"]],[22750,22750],[22751,22751]]],[1576345495823,["wangyan@DESKTOP-09VD06C",[[-1,22750,"s"]],[22751,22751],[22750,22750]]],[1576345504745,["wangyan@DESKTOP-09VD06C",[[1,22750,"查看法线和切线"]],[22750,22750],[22757,22757]]],[1576345506727,["wangyan@DESKTOP-09VD06C",[[1,22849,"\n"]],[22848,22848],[22849,22849]]],[1576345566879,[null,[[1,18983,"。"],[-1,18994,"使"],[1,19002,"，"],[-1,19015,"\n"]],[18983,18983],[19015,19015]]],[1576345566879,[null,[[-1,18983,"。"],[1,18995,"使"],[-1,19002,"，"],[1,19016,"\n"]],[19015,19015],[18983,18983]]],[1576345516625,["wangyan@DESKTOP-09VD06C",[[1,22849,"最后，用一条蓝线构造并表示副法线向量。"]],[22849,22849],[22868,22868]]],[1576345517906,["wangyan@DESKTOP-09VD06C",[[1,22869,"\n"]],[22868,22868],[22869,22869]]],[1576345518097,["wangyan@DESKTOP-09VD06C",[[1,22870,"\n"]],[22869,22869],[22870,22870]]],[1576345524134,["wangyan@DESKTOP-09VD06C",[[-1,22870,"\n"],[1,22871,"·"]],[22870,22870],[22871,22871]]],[1576345524461,["wangyan@DESKTOP-09VD06C",[[1,22871,"··"]],[22871,22871],[22873,22873]]],[1576345525379,["wangyan@DESKTOP-09VD06C",[[-1,22871,"··"]],[22873,22873],[22871,22871]]],[1576345525564,["wangyan@DESKTOP-09VD06C",[[-1,22870,"·"],[1,22871,"\n"]],[22871,22871],[22870,22870]]],[1576345526278,["wangyan@DESKTOP-09VD06C",[[-1,22870,"\n"],[1,22871,"`"]],[22870,22870],[22871,22871]]],[1576345526629,["wangyan@DESKTOP-09VD06C",[[1,22871,"``"]],[22871,22871],[22873,22873]]],[1576345526680,["wangyan@DESKTOP-09VD06C",[[1,22873,"language\n```\n"]],[22873,22873],[22873,22881]]],[1576345527677,["wangyan@DESKTOP-09VD06C",[[-1,22873,"language"],[1,22881,"c"]],[22873,22881],[22874,22874]]],[1576345527774,["wangyan@DESKTOP-09VD06C",[[1,22874,"s"]],[22874,22874],[22875,22875]]],[1576345528227,["wangyan@DESKTOP-09VD06C",[[1,22876,"\n"]],[22875,22875],[22876,22876]]],[1576345529726,["wangyan@DESKTOP-09VD06C",[[1,22876,"void ShowTangentSpace (Mesh mesh) {\n\t\t…\n\t\tfor (int i = 0; i < vertices.Length; i++) {\n\t\t\tShowTangentSpace(\n\t\t\t\ttransform.TransformPoint(vertices[i]),\n\t\t\t\ttransform.TransformDirection(normals[i]),\n\t\t\t\ttransform.TransformDirection(tangents[i]),\n\t\t\t\ttangents[i].w\n\t\t\t);\n\t\t}\n\t}\n\n\tvoid ShowTangentSpace (\n\t\tVector3 vertex, Vector3 normal, Vector3 tangent, float binormalSign\n\t) {\n\t\t…\n\t\tVector3 binormal = Vector3.Cross(normal, tangent) * binormalSign;\n\t\tGizmos.color = Color.blue;\n\t\tGizmos.DrawLine(vertex, vertex + binormal * scale);\n\t}"]],[22876,22876],[23408,23408]]],[1576345531461,["wangyan@DESKTOP-09VD06C",[[1,23413,"\n"]],[23412,23412],[23413,23413]]],[1576345531666,["wangyan@DESKTOP-09VD06C",[[1,23414,"\n"]],[23413,23413],[23414,23414]]],[1576345535936,["wangyan@DESKTOP-09VD06C",[[1,23414,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/tangents/gizmos-binormal.png)"]],[23414,23414],[23506,23506]]],[1576345544844,["wangyan@DESKTOP-09VD06C",[[1,23416,"c"]],[23416,23416],[23417,23417]]],[1576345545417,["wangyan@DESKTOP-09VD06C",[[-1,23416,"c"]],[23417,23417],[23416,23416]]],[1576345551984,["wangyan@DESKTOP-09VD06C",[[1,23416,"查看完整的切线空间"]],[23416,23416],[23425,23425]]],[1576345554362,["wangyan@DESKTOP-09VD06C",[[1,23516,"\n"]],[23515,23515],[23516,23516]]],[1576345555044,["wangyan@DESKTOP-09VD06C",[[1,23517,"\n"]],[23516,23516],[23517,23517]]],[1576345563495,["wangyan@DESKTOP-09VD06C",[[-1,23517,"\n"]],[23517,23517],[0,0]]],[1576345564641,["wangyan@DESKTOP-09VD06C",[[1,2,"\n"]],[0,0],[1,1]]],[1576345626890,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576345626890,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576345576100,["wangyan@DESKTOP-09VD06C",[[1,23518,"\n"]],[23516,23516],[23517,23517]]],[1576345576549,["wangyan@DESKTOP-09VD06C",[[1,23519,"\n"]],[23517,23517],[23518,23518]]],[1576345592649,["wangyan@DESKTOP-09VD06C",[[1,23518,"可以看到，对于默认立方体的每个面，切线空间是不同的，但却是恒定的。对于默认的球体，每个顶点的切线空间是不同的。因此，切线空间将通过三角形进行插值，从而得到一个弯曲空间。"]],[23518,23518],[23602,23602]]],[1576345596569,["wangyan@DESKTOP-09VD06C",[[1,23604,"\n"]],[23602,23602],[23603,23603]]],[1576345596707,["wangyan@DESKTOP-09VD06C",[[1,23605,"\n"]],[23603,23603],[23604,23604]]],[1576345597119,["wangyan@DESKTOP-09VD06C",[[1,23604,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/tangents/sphere-tangent-space.png)"]],[23604,23604],[23701,23701]]],[1576345606752,["wangyan@DESKTOP-09VD06C",[[1,23606,"默认球体周围的切线空间"]],[23606,23606],[23617,23617]]],[1576345608485,["wangyan@DESKTOP-09VD06C",[[1,23714,"\n"]],[23712,23712],[23713,23713]]],[1576345608650,["wangyan@DESKTOP-09VD06C",[[1,23715,"\n"]],[23713,23713],[23714,23714]]],[1576345686913,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576345686913,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576345644359,["wangyan@DESKTOP-09VD06C",[[1,23714,"在球体周围环绕切线空间是有问题的。Unity的默认球体使用经纬度纹理布局。这就像把一张纸裹在一个球上，形成一个圆柱体。然后，将圆柱体的顶部和底部弄皱，直到它们与球体匹配。所以两极很乱。Unity的默认球体结合了立方体顶点布局，这加剧了问题。它们对于模型来说很好，但是不要期望默认的网格会产生高质量的结果。"]],[23714,23714],[23866,23866]]],[1576345651887,["wangyan@DESKTOP-09VD06C",[[1,23868,"\n"]],[23866,23866],[23867,23867]]],[1576345652089,["wangyan@DESKTOP-09VD06C",[[1,23869,"\n"]],[23867,23867],[23868,23868]]],[1576345664449,["wangyan@DESKTOP-09VD06C",[[1,23868,"## 着色器中的切线空间"]],[23868,23868],[23880,23880]]],[1576345665518,["wangyan@DESKTOP-09VD06C",[[1,23882,"\n"]],[23880,23880],[23881,23881]]],[1576345665916,["wangyan@DESKTOP-09VD06C",[[1,23883,"\n"]],[23881,23881],[23882,23882]]],[1576345679449,["wangyan@DESKTOP-09VD06C",[[1,23882,"要访问着色器中的切线，必须将它们添加到VertexData结构中。"]],[23882,23882],[23915,23915]]],[1576345680315,["wangyan@DESKTOP-09VD06C",[[1,23917,"\n"]],[23915,23915],[23916,23916]]],[1576345680486,["wangyan@DESKTOP-09VD06C",[[1,23918,"\n"]],[23916,23916],[23917,23917]]],[1576345682693,["wangyan@DESKTOP-09VD06C",[[1,23917,"```"]],[23917,23917],[23920,23920]]],[1576345682743,["wangyan@DESKTOP-09VD06C",[[1,23920,"language\n```\n"]],[23920,23920],[23920,23928]]],[1576345684140,["wangyan@DESKTOP-09VD06C",[[-1,23920,"language"],[1,23928,"c"]],[23920,23928],[23921,23921]]],[1576345684243,["wangyan@DESKTOP-09VD06C",[[1,23921,"s"]],[23921,23921],[23922,23922]]],[1576345684456,["wangyan@DESKTOP-09VD06C",[[1,23923,"\n"]],[23922,23922],[23923,23923]]],[1576345746913,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576345746913,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576345689416,["wangyan@DESKTOP-09VD06C",[[1,23923,"struct VertexData {\n\tfloat4 position : POSITION;\n\tfloat3 normal : NORMAL;\n\tfloat4 tangent : TANGENT;\n\tfloat2 uv : TEXCOORD0;\n};"]],[23923,23923],[24050,24050]]],[1576345705697,["wangyan@DESKTOP-09VD06C",[[1,24056,"我们必须把它们作为一个额外的插值器。插补器的顺序不重要，但我喜欢保持法线和切线在一起。"]],[24056,24056],[24099,24099]]],[1576345706767,["wangyan@DESKTOP-09VD06C",[[1,24100,"\n"]],[24099,24099],[24100,24100]]],[1576345706914,["wangyan@DESKTOP-09VD06C",[[1,24101,"\n"]],[24100,24100],[24101,24101]]],[1576345712094,["wangyan@DESKTOP-09VD06C",[[-1,24101,"\n"],[1,24102,"`"]],[24101,24101],[24102,24102]]],[1576345712405,["wangyan@DESKTOP-09VD06C",[[1,24102,"``"]],[24102,24102],[24104,24104]]],[1576345712458,["wangyan@DESKTOP-09VD06C",[[1,24104,"language\n```\n"]],[24104,24104],[24104,24112]]],[1576345713461,["wangyan@DESKTOP-09VD06C",[[-1,24104,"language"],[1,24112,"c"]],[24104,24112],[24105,24105]]],[1576345713566,["wangyan@DESKTOP-09VD06C",[[1,24105,"s"]],[24105,24105],[24106,24106]]],[1576345714365,["wangyan@DESKTOP-09VD06C",[[1,24107,"\n"]],[24106,24106],[24107,24107]]],[1576345714892,["wangyan@DESKTOP-09VD06C",[[1,24107,"**struct** **Interpolators** {\n\t**float4** position : **SV_POSITION**;\n\t**float4** uv : **TEXCOORD0**;\n\t**float3** normal : **TEXCOORD1**;\n\t**float4** tangent : **TEXCOORD2**;\n\t**float3** worldPos : **TEXCOORD3**;\n\n\t#if defined(VERTEXLIGHT_ON) \t\t**float3** vertexLightColor : **TEXCOORD4**;\n\t#endif };"]],[24107,24107],[24408,24408]]],[1576345716072,["wangyan@DESKTOP-09VD06C",[[-1,24107,"**struct** **Interpolators** {\n\t**float4** position : **SV_POSITION**;\n\t**float4** uv : **TEXCOORD0**;\n\t**float3** normal : **TEXCOORD1**;\n\t**float4** tangent : **TEXCOORD2**;\n\t**float3** worldPos : **TEXCOORD3**;\n\n\t#if defined(VERTEXLIGHT_ON) \t\t**float3** vertexLightColor : **TEXCOORD4**;\n\t#endif };"]],[24408,24408],[24107,24107]]],[1576345716785,["wangyan@DESKTOP-09VD06C",[[1,24107,"struct Interpolators {\n\tfloat4 position : SV_POSITION;\n\tfloat4 uv : TEXCOORD0;\n\tfloat3 normal : TEXCOORD1;\n\tfloat4 tangent : TEXCOORD2;\n\tfloat3 worldPos : TEXCOORD3;\n\n\t#if defined(VERTEXLIGHT_ON)\n\t\tfloat3 vertexLightColor : TEXCOORD4;\n\t#endif\n};"]],[24107,24107],[24352,24352]]],[1576345719831,["wangyan@DESKTOP-09VD06C",[[1,24357,"\n"]],[24356,24356],[24357,24357]]],[1576345719986,["wangyan@DESKTOP-09VD06C",[[1,24358,"\n"]],[24357,24357],[24358,24358]]],[1576345744481,["wangyan@DESKTOP-09VD06C",[[1,24358,"在顶点程序中转换切线到世界空间，使用UnityCG中的UnityObjectToWorldDir。当然这只适用于切线的XYZ部分。它的W组件需要不加修改地传递。"]],[24358,24358],[24438,24438]]],[1576345806907,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576345806907,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576345750625,["wangyan@DESKTOP-09VD06C",[[1,24439,"\n"]],[24438,24438],[24439,24439]]],[1576345750777,["wangyan@DESKTOP-09VD06C",[[1,24440,"\n"]],[24439,24439],[24440,24440]]],[1576345756454,["wangyan@DESKTOP-09VD06C",[[-1,24440,"\n"],[1,24441,"`"]],[24440,24440],[24441,24441]]],[1576345758148,["wangyan@DESKTOP-09VD06C",[[1,24441,"``"]],[24441,24441],[24443,24443]]],[1576345758203,["wangyan@DESKTOP-09VD06C",[[1,24443,"language\n```\n"]],[24443,24443],[24443,24451]]],[1576345759629,["wangyan@DESKTOP-09VD06C",[[-1,24443,"language"],[1,24451,"c"]],[24443,24451],[24444,24444]]],[1576345759736,["wangyan@DESKTOP-09VD06C",[[1,24444,"s"]],[24444,24444],[24445,24445]]],[1576345761096,["wangyan@DESKTOP-09VD06C",[[1,24446,"\n"]],[24445,24445],[24446,24446]]],[1576345761704,["wangyan@DESKTOP-09VD06C",[[1,24446,"Interpolators MyVertexProgram (VertexData v) {\n\tInterpolators i;\n\ti.position = mul(UNITY_MATRIX_MVP, v.position);\n\ti.worldPos = mul(unity_ObjectToWorld, v.position);\n\ti.normal = UnityObjectToWorldNormal(v.normal);\n\ti.tangent = float4(UnityObjectToWorldDir(v.tangent.xyz), v.tangent.w);\n\ti.uv.xy = TRANSFORM_TEX(v.uv, _MainTex);\n\ti.uv.zw = TRANSFORM_TEX(v.uv, _DetailTex);\n\tComputeVertexLightColor(i);\n\treturn i;\n}"]],[24446,24446],[24859,24859]]],[1576345764324,["wangyan@DESKTOP-09VD06C",[[1,24864,"\n"]],[24863,24863],[24864,24864]]],[1576345764763,["wangyan@DESKTOP-09VD06C",[[1,24865,"\n"]],[24864,24864],[24865,24865]]],[1576345792617,["wangyan@DESKTOP-09VD06C",[[1,24865,"现在我们可以在片段着色器中同时访问法线和切线。因此，我们可以在初始化碎片法向中构造副法线。但是，我们必须注意不要用碰撞法线代替原来的法线。碰撞法线存在于切线空间中，所以要保持它的独立性。"]],[24865,24865],[24958,24958]]],[1576345866926,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576345866926,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576345822176,["wangyan@DESKTOP-09VD06C",[[-1,24896,"初始化碎片法向"],[1,24903,"`InitializeFragmentNormal`"]],[24896,24903],[24922,24922]]],[1576345839774,["wangyan@DESKTOP-09VD06C",[[-1,24941,"碰撞"],[1,24943,"a"]],[24941,24943],[24942,24942]]],[1576345840372,["wangyan@DESKTOP-09VD06C",[[1,24942,"otu"]],[24942,24942],[24945,24945]]],[1576345841621,["wangyan@DESKTOP-09VD06C",[[-1,24941,"aotu"]],[24945,24945],[24941,24941]]],[1576345843089,["wangyan@DESKTOP-09VD06C",[[1,24941,"凹凸"]],[24941,24941],[24943,24943]]],[1576345848894,["wangyan@DESKTOP-09VD06C",[[-1,24953,"碰撞"],[1,24955,"a"]],[24953,24955],[24953,24954]]],[1576345849918,["wangyan@DESKTOP-09VD06C",[[-1,24953,"a"],[1,24954,"凹凸"]],[24953,24953],[24955,24955]]],[1576345852723,["wangyan@DESKTOP-09VD06C",[[1,24978,"\n"]],[24977,24977],[24978,24978]]],[1576345852890,["wangyan@DESKTOP-09VD06C",[[1,24979,"\n"]],[24978,24978],[24979,24979]]],[1576345858493,["wangyan@DESKTOP-09VD06C",[[-1,24979,"\n"],[1,24980,"·"]],[24979,24979],[24980,24980]]],[1576345858837,["wangyan@DESKTOP-09VD06C",[[1,24980,"··"]],[24980,24980],[24982,24982]]],[1576345859954,["wangyan@DESKTOP-09VD06C",[[-1,24980,"··"]],[24982,24982],[24980,24980]]],[1576345860122,["wangyan@DESKTOP-09VD06C",[[-1,24979,"·"],[1,24980,"\n"]],[24980,24980],[24979,24979]]],[1576345860901,["wangyan@DESKTOP-09VD06C",[[-1,24979,"\n"],[1,24980,"`"]],[24979,24979],[24980,24980]]],[1576345861228,["wangyan@DESKTOP-09VD06C",[[1,24980,"``"]],[24980,24980],[24982,24982]]],[1576345861283,["wangyan@DESKTOP-09VD06C",[[1,24982,"language\n```\n"]],[24982,24982],[24982,24990]]],[1576345862189,["wangyan@DESKTOP-09VD06C",[[-1,24982,"language"],[1,24990,"c"]],[24982,24990],[24983,24983]]],[1576345862297,["wangyan@DESKTOP-09VD06C",[[1,24983,"s"]],[24983,24983],[24984,24984]]],[1576345862532,["wangyan@DESKTOP-09VD06C",[[1,24985,"\n"]],[24984,24984],[24985,24985]]],[1576345863393,["wangyan@DESKTOP-09VD06C",[[1,24985,"void InitializeFragmentNormal(inout Interpolators i) {\n\tfloat3 mainNormal =\n\t\tUnpackScaleNormal(tex2D(_NormalMap, i.uv.xy), _BumpScale);\n\tfloat3 detailNormal =\n\t\tUnpackScaleNormal(tex2D(_DetailNormalMap, i.uv.zw), _DetailBumpScale);\n\tfloat3 tangentSpaceNormal = BlendNormals(mainNormal, detailNormal);\n\ttangentSpaceNormal = tangentSpaceNormal.xzy;\n\n\tfloat3 binormal = cross(i.normal, i.tangent.xyz) * i.tangent.w;\n}"]],[24985,24985],[25400,25400]]],[1576345866135,["wangyan@DESKTOP-09VD06C",[[1,25405,"\n"]],[25404,25404],[25405,25405]]],[1576345866298,["wangyan@DESKTOP-09VD06C",[[1,25406,"\n"]],[25405,25405],[25406,25406]]],[1576345926936,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576345926936,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576345897713,["wangyan@DESKTOP-09VD06C",[[1,25406,"现在我们可以把碰撞法向量从切线空间转换成世界空间。"]],[25406,25406],[25431,25431]]],[1576345900137,["wangyan@DESKTOP-09VD06C",[[-1,25413,"碰撞"]],[25415,25415],[25413,25413]]],[1576345900923,["wangyan@DESKTOP-09VD06C",[[1,25413,"aotu"]],[25413,25413],[25417,25417]]],[1576345901892,["wangyan@DESKTOP-09VD06C",[[-1,25413,"aotu"]],[25417,25417],[25413,25413]]],[1576345903929,["wangyan@DESKTOP-09VD06C",[[1,25413,"凹凸"]],[25413,25413],[25415,25415]]],[1576345905995,["wangyan@DESKTOP-09VD06C",[[1,25432,"\n"]],[25431,25431],[25432,25432]]],[1576345906179,["wangyan@DESKTOP-09VD06C",[[1,25433,"\n"]],[25432,25432],[25433,25433]]],[1576345910582,["wangyan@DESKTOP-09VD06C",[[-1,25433,"\n"],[1,25434," "]],[25433,25433],[25434,25434]]],[1576345911326,["wangyan@DESKTOP-09VD06C",[[1,25434,"···"]],[25434,25434],[25437,25437]]],[1576345912671,["wangyan@DESKTOP-09VD06C",[[-1,25434,"···"]],[25437,25437],[25434,25434]]],[1576345913924,["wangyan@DESKTOP-09VD06C",[[1,25434,"```"]],[25434,25434],[25437,25437]]],[1576345915736,["wangyan@DESKTOP-09VD06C",[[-1,25434,"```"]],[25437,25437],[25434,25434]]],[1576345916121,["wangyan@DESKTOP-09VD06C",[[-1,25433," "],[1,25434,"\n"]],[25434,25434],[25433,25433]]],[1576345916558,["wangyan@DESKTOP-09VD06C",[[-1,25433,"\n"],[1,25434,"`"]],[25433,25433],[25434,25434]]],[1576345916902,["wangyan@DESKTOP-09VD06C",[[1,25434,"``"]],[25434,25434],[25436,25436]]],[1576345916953,["wangyan@DESKTOP-09VD06C",[[1,25436,"language\n```\n"]],[25436,25436],[25436,25444]]],[1576345918093,["wangyan@DESKTOP-09VD06C",[[-1,25436,"language"],[1,25444,"c"]],[25436,25444],[25437,25437]]],[1576345918201,["wangyan@DESKTOP-09VD06C",[[1,25437,"s"]],[25437,25437],[25438,25438]]],[1576345918504,["wangyan@DESKTOP-09VD06C",[[1,25439,"\n"]],[25438,25438],[25439,25439]]],[1576345919278,["wangyan@DESKTOP-09VD06C",[[1,25439,"float3 binormal = cross(i.normal, i.tangent.xyz) * i.tangent.w;\n\n\ti.normal = normalize(\n\t\ttangentSpaceNormal.x * i.tangent +\n\t\ttangentSpaceNormal.y * i.normal +\n\t\ttangentSpaceNormal.z * binormal\n\t);"]],[25439,25439],[25637,25637]]],[1576345920936,["wangyan@DESKTOP-09VD06C",[[1,25642,"\n"]],[25641,25641],[25642,25642]]],[1576345921129,["wangyan@DESKTOP-09VD06C",[[1,25643,"\n"]],[25642,25642],[25643,25643]]],[1576345986931,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576345986931,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576345935873,["wangyan@DESKTOP-09VD06C",[[1,25643,"我们还可以去掉显式的YZ交换，将它与空间转换结合起来。"]],[25643,25643],[25670,25670]]],[1576345936989,["wangyan@DESKTOP-09VD06C",[[1,25671,"\n"]],[25670,25670],[25671,25671]]],[1576345937133,["wangyan@DESKTOP-09VD06C",[[1,25672,"\n"]],[25671,25671],[25672,25672]]],[1576345942021,["wangyan@DESKTOP-09VD06C",[[-1,25672,"\n"],[1,25673,"·"]],[25672,25672],[25673,25673]]],[1576345942349,["wangyan@DESKTOP-09VD06C",[[1,25673,"··"]],[25673,25673],[25675,25675]]],[1576345943420,["wangyan@DESKTOP-09VD06C",[[-1,25673,"··"]],[25675,25675],[25673,25673]]],[1576345943585,["wangyan@DESKTOP-09VD06C",[[-1,25672,"·"],[1,25673,"\n"]],[25673,25673],[25672,25672]]],[1576345944574,["wangyan@DESKTOP-09VD06C",[[-1,25672,"\n"],[1,25673,"`"]],[25672,25672],[25673,25673]]],[1576345944901,["wangyan@DESKTOP-09VD06C",[[1,25673,"``"]],[25673,25673],[25675,25675]]],[1576345944959,["wangyan@DESKTOP-09VD06C",[[1,25675,"language\n```\n"]],[25675,25675],[25675,25683]]],[1576345945814,["wangyan@DESKTOP-09VD06C",[[-1,25675,"language"],[1,25683,"c"]],[25675,25683],[25676,25676]]],[1576345945923,["wangyan@DESKTOP-09VD06C",[[1,25676,"s"]],[25676,25676],[25677,25677]]],[1576345946148,["wangyan@DESKTOP-09VD06C",[[1,25678,"\n"]],[25677,25677],[25678,25678]]],[1576345947007,["wangyan@DESKTOP-09VD06C",[[1,25678,"//\ttangentSpaceNormal = tangentSpaceNormal.xzy;\n\t\n\tfloat3 binormal = cross(i.normal, i.tangent.xyz) * i.tangent.w;\n\n\ti.normal = normalize(\n\t\ttangentSpaceNormal.x * i.tangent +\n\t\ttangentSpaceNormal.y * binormal +\n\t\ttangentSpaceNormal.z * i.normal\n\t;"]],[25678,25678],[25926,25926]]],[1576345948569,["wangyan@DESKTOP-09VD06C",[[1,25931,"\n"]],[25930,25930],[25931,25931]]],[1576345948739,["wangyan@DESKTOP-09VD06C",[[1,25932,"\n"]],[25931,25931],[25932,25932]]],[1576345953107,["wangyan@DESKTOP-09VD06C",[[1,25933,"\n"]],[25931,25931],[25932,25932]]],[1576345955066,["wangyan@DESKTOP-09VD06C",[[1,25932,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/tangents/tangent-to-world.png)"]],[25932,25932],[26025,26025]]],[1576345963958,["wangyan@DESKTOP-09VD06C",[[1,25934,"z"]],[25934,25934],[25935,25935]]],[1576345964632,["wangyan@DESKTOP-09VD06C",[[-1,25934,"z"]],[25935,25935],[25934,25934]]],[1576345973393,["wangyan@DESKTOP-09VD06C",[[1,25934,"已转换的法线"]],[25934,25934],[25940,25940]]],[1576345975841,["wangyan@DESKTOP-09VD06C",[[1,26033,"\n"]],[26032,26032],[26033,26033]]],[1576345985592,["wangyan@DESKTOP-09VD06C",[[1,26033,"在构造副法线时，还有一个额外的细节。假设一个对象的scale设置为(- 1,1,1)，这意味着它是镜像的。在这种情况下，我们必须翻转副法线，来正确地镜像切线空间。事实上，当奇数维数为负时，我们必须这样做。UnityShaderVariables通过定义float4 unity_WorldTransformParams变量来帮助我们完成这个任务。当需要翻转副法线时，它的第四个分量为- 1，否则为1。"]],[26033,26033],[26233,26233]]],[1576346046927,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346046927,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346015269,["wangyan@DESKTOP-09VD06C",[[1,26234,"\n"]],[26233,26233],[26234,26234]]],[1576346015432,["wangyan@DESKTOP-09VD06C",[[1,26235,"\n"]],[26234,26234],[26235,26235]]],[1576346016861,["wangyan@DESKTOP-09VD06C",[[-1,26235,"\n"],[1,26236,"`"]],[26235,26235],[26236,26236]]],[1576346017724,["wangyan@DESKTOP-09VD06C",[[1,26236,"``"]],[26236,26236],[26238,26238]]],[1576346017779,["wangyan@DESKTOP-09VD06C",[[1,26238,"language\n```\n"]],[26238,26238],[26238,26246]]],[1576346018628,["wangyan@DESKTOP-09VD06C",[[-1,26238,"language"],[1,26246,"c"]],[26238,26246],[26239,26239]]],[1576346018743,["wangyan@DESKTOP-09VD06C",[[1,26239,"s"]],[26239,26239],[26240,26240]]],[1576346019447,["wangyan@DESKTOP-09VD06C",[[1,26241,"\n"]],[26240,26240],[26241,26241]]],[1576346020446,["wangyan@DESKTOP-09VD06C",[[1,26241,"\tfloat3 binormal = cross(i.normal, i.tangent.xyz) *\n\t\t(i.tangent.w * unity_WorldTransformParams.w);"]],[26241,26241],[26340,26340]]],[1576346021952,["wangyan@DESKTOP-09VD06C",[[1,26345,"\n"]],[26344,26344],[26345,26345]]],[1576346022128,["wangyan@DESKTOP-09VD06C",[[1,26346,"\n"]],[26345,26345],[26346,26346]]],[1576346041017,["wangyan@DESKTOP-09VD06C",[[1,26346,"## 同步切线空间"]],[26346,26346],[26355,26355]]],[1576346041260,["wangyan@DESKTOP-09VD06C",[[1,26356,"\n"]],[26355,26355],[26356,26356]]],[1576346041489,["wangyan@DESKTOP-09VD06C",[[1,26357,"\n"]],[26356,26356],[26357,26357]]],[1576346106937,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346106937,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346062566,["wangyan@DESKTOP-09VD06C",[[1,26357,"当一个3D艺术家创建一个详细的模型时，通常的方法是建立一个非常高分辨率的模型。所有的细节都是真实的3D几何图形。为了在游戏中实现这一点，需要生成模型的低分辨率版本。这个模型的细节被加入到纹理中。"]],[26357,26357],[26454,26454]]],[1576346063797,["wangyan@DESKTOP-09VD06C",[[1,26455,"\n"]],[26454,26454],[26455,26455]]],[1576346063920,["wangyan@DESKTOP-09VD06C",[[1,26456,"\n"]],[26455,26455],[26456,26456]]],[1576346074514,["wangyan@DESKTOP-09VD06C",[[1,26456,"高分辨率模型的法线被制作成法线地图。这是通过将法向量从世界空间转换为切线空间来实现的。在游戏中呈现低分辨率模型时，这种转换是相反的。"]],[26456,26456],[26522,26522]]],[1576346076634,["wangyan@DESKTOP-09VD06C",[[-1,26471,"地图"]],[26473,26473],[26471,26471]]],[1576346079130,["wangyan@DESKTOP-09VD06C",[[1,26471,"贴图"]],[26471,26471],[26473,26473]]],[1576346085250,["wangyan@DESKTOP-09VD06C",[[1,26523,"\n"]],[26522,26522],[26523,26523]]],[1576346085456,["wangyan@DESKTOP-09VD06C",[[1,26524,"\n"]],[26523,26523],[26524,26524]]],[1576346090848,["wangyan@DESKTOP-09VD06C",[[-1,26503,"呈现"]],[26505,26505],[26503,26503]]],[1576346093339,["wangyan@DESKTOP-09VD06C",[[1,26503,"渲染"]],[26503,26503],[26505,26505]]],[1576346166965,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346166965,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346132797,["wangyan@DESKTOP-09VD06C",[[1,26525,"\n"]],[26523,26523],[26524,26524]]],[1576346133140,["wangyan@DESKTOP-09VD06C",[[1,26524,"只要两个转换使用相同的算法和切空间，这个过程就可以很好地工作。如果他们不这样做，游戏内的结果将是错误的。这可能会给3D艺术家带来很多痛苦。所以你必须确保你的法线贴图生成器，Unity的网格导入过程，以及着色器都是同步的。这就是所谓的同步切线空间工作流。"]],[26524,26524],[26650,26650]]],[1576346152808,["wangyan@DESKTOP-09VD06C",[[-1,26609,"，"]],[26610,26610],[26609,26609]]],[1576346153022,["wangyan@DESKTOP-09VD06C",[[1,26609,"、"]],[26609,26609],[26610,26610]]],[1576346158360,["wangyan@DESKTOP-09VD06C",[[-1,26622,"，"]],[26623,26623],[26622,26622]]],[1576346158552,["wangyan@DESKTOP-09VD06C",[[1,26622,"、"]],[26622,26622],[26623,26623]]],[1576346226957,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346226957,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346174739,["wangyan@DESKTOP-09VD06C",[[1,26652,"\n"]],[26651,26651],[26652,26652]]],[1576346177458,["wangyan@DESKTOP-09VD06C",[[-1,26652,"\n"],[1,26653,"问"]],[26652,26652],[26653,26653]]],[1576346184960,["wangyan@DESKTOP-09VD06C",[[1,26653,"：那发现替人图呢"]],[26653,26653],[26661,26661]]],[1576346186408,["wangyan@DESKTOP-09VD06C",[[-1,26655,"发现替人图呢"]],[26661,26661],[26655,26655]]],[1576346192038,["wangyan@DESKTOP-09VD06C",[[1,26655,"法线贴图呢？"]],[26655,26655],[26661,26661]]],[1576346193054,["wangyan@DESKTOP-09VD06C",[[1,26661,"\n\n"]],[26661,26661],[26662,26662]]],[1576346194135,["wangyan@DESKTOP-09VD06C",[[1,26663,"\n"]],[26662,26662],[26663,26663]]],[1576346204933,["wangyan@DESKTOP-09VD06C",[[-1,26663,"\n"],[1,26664,">"]],[26663,26663],[26664,26664]]],[1576346206162,["wangyan@DESKTOP-09VD06C",[[1,26664," 我们从高度字段生成法线贴图。因此，它们有一个平坦的参照系，它们的切线空间是规则的。所以当它们被应用到一个具有弯曲的切线空间的物体上时，最终的法线会被扭曲，与高度场相比。这很好，因为大理石的确切外观并不重要。"]],[26664,26664],[26768,26768]]],[1576346211111,["wangyan@DESKTOP-09VD06C",[[-1,26670,"字段"]],[26672,26672],[26670,26670]]],[1576346211485,["wangyan@DESKTOP-09VD06C",[[1,26670,"s"]],[26670,26670],[26671,26671]]],[1576346212160,["wangyan@DESKTOP-09VD06C",[[-1,26670,"s"]],[26671,26671],[26670,26670]]],[1576346213896,["wangyan@DESKTOP-09VD06C",[[1,26670,"场"]],[26670,26670],[26671,26671]]],[1576346286982,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346286982,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346242066,["wangyan@DESKTOP-09VD06C",[[1,26767,"\n\n"]],[26767,26767],[26768,26768]]],[1576346242217,["wangyan@DESKTOP-09VD06C",[[1,26769,"\n"]],[26768,26768],[26769,26769]]],[1576346251696,["wangyan@DESKTOP-09VD06C",[[1,26769,"从5.3版开始，Unity就使用了mikktspace。因此，在生成法线贴图时，请确保使用了mikktspace。当导入一个网格时，你可以让Unity为你生成切向量，因为它使用了mikktspace算法。或者，导出自己的mikktspace切线，让Unity使用它们。"]],[26769,26769],[26903,26903]]],[1576346277755,["wangyan@DESKTOP-09VD06C",[[1,26904,"\n"]],[26903,26903],[26904,26904]]],[1576346277909,["wangyan@DESKTOP-09VD06C",[[1,26905,"\n"]],[26904,26904],[26905,26905]]],[1576346280737,["wangyan@DESKTOP-09VD06C",[[-1,26905,"\n"],[1,26906,"问"]],[26905,26905],[26906,26906]]],[1576346284330,["wangyan@DESKTOP-09VD06C",[[1,26906,"：什么是"]],[26906,26906],[26910,26910]]],[1576346346978,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346346978,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346290005,["wangyan@DESKTOP-09VD06C",[[1,26910,"mikktspace？"]],[26910,26910],[26921,26921]]],[1576346290269,["wangyan@DESKTOP-09VD06C",[[1,26921,"\n\n"]],[26921,26921],[26922,26922]]],[1576346305504,["wangyan@DESKTOP-09VD06C",[[1,26922,"它是Morten Mikkelsen创建的切线空间和正常生成的标准。这个名字是Mikkelsen的切线空间的缩写。\n对于一个与mikktspace同步的着色器，它必须在顶点程序中接收归一化的法向量和切向量。然后插入这些向量，而不是对每个片段重新规格化。通过计算正交(法线)得到副法线。(xyz)所以我们的着色器是与mikktspace同步的，Unity的标准着色器也是如此。\n注意，mikktspace不能保证是规则的。正常和唐之间的角度"]],[26922,26922],[27141,27141]]],[1576346327980,["wangyan@DESKTOP-09VD06C",[[1,26922,"\n"]],[26921,26921],[26922,26922]]],[1576346346462,["wangyan@DESKTOP-09VD06C",[[-1,27045,"规格化"]],[27048,27048],[27045,27045]]],[1576346406964,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346406964,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346349067,["wangyan@DESKTOP-09VD06C",[[1,27045,"归一化"]],[27045,27045],[27048,27048]]],[1576346391264,["wangyan@DESKTOP-09VD06C",[[-1,27053,"正交(法线)"],[1,27059,"`[cross](http://developer.download.nvidia.com/cg/cross.html)(normal.**xyz**, tangent.**xyz**) * tangent.**w**`."]],[27053,27059],[27164,27164]]],[1576346401686,["wangyan@DESKTOP-09VD06C",[[-1,27170,"(xyz)"]],[27170,27175],[27170,27170]]],[1576346466968,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346466968,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346425808,["wangyan@DESKTOP-09VD06C",[[-1,27233,"正常和唐"],[1,27237,"法线和切线"],[1,27242,"可以自由变化。这不是问题，只要失真不太严重。因为我们只使用它来转换法线，所以一致性才是最重要的。"]],[27211,27242],[27291,27291]]],[1576346427536,["wangyan@DESKTOP-09VD06C",[[1,27292,"\n"]],[27291,27291],[27292,27292]]],[1576346427673,["wangyan@DESKTOP-09VD06C",[[1,27293,"\n"]],[27292,27292],[27293,27293]]],[1576346439945,["wangyan@DESKTOP-09VD06C",[[1,27293,"当使用mikktspace时，有一个选择。副法线可以像我们一样在片段程序中构造，也可以像Unity一样在顶点程序中构造。这两种方法产生的双模略有不同"]],[27293,27293],[27367,27367]]],[1576346466454,["wangyan@DESKTOP-09VD06C",[[-1,27361,"双模略"],[1,27364,"f"]],[27361,27364],[27361,27362]]],[1576346526970,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346526970,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346472923,["wangyan@DESKTOP-09VD06C",[[-1,27361,"f"],[1,27362,"副"]],[27361,27361],[27362,27362]]],[1576346478895,["wangyan@DESKTOP-09VD06C",[[1,27362,"法线略"]],[27362,27362],[27365,27365]]],[1576346481645,["wangyan@DESKTOP-09VD06C",[[1,27368,"。"]],[27368,27368],[27369,27369]]],[1576346481787,["wangyan@DESKTOP-09VD06C",[[1,27370,"\n"]],[27369,27369],[27370,27370]]],[1576346482797,["wangyan@DESKTOP-09VD06C",[[1,27371,"\n"]],[27370,27370],[27371,27371]]],[1576346486400,["wangyan@DESKTOP-09VD06C",[[1,27371,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/tangents/binormal-difference.png)"]],[27371,27371],[27467,27467]]],[1576346498586,["wangyan@DESKTOP-09VD06C",[[1,27373,"夸张的副法线的区别。"]],[27373,27373],[27383,27383]]],[1576346500347,["wangyan@DESKTOP-09VD06C",[[-1,27382,"。"]],[27383,27383],[27382,27382]]],[1576346515756,["wangyan@DESKTOP-09VD06C",[[1,27477,"\n"]],[27476,27476],[27477,27477]]],[1576346515905,["wangyan@DESKTOP-09VD06C",[[1,27478,"\n"]],[27477,27477],[27478,27478]]],[1576346516278,["wangyan@DESKTOP-09VD06C",[[1,27478,"所以当你为Unity生成法线贴图时，使用与计算每个顶点的二项式相对应的设置。或者假设它们是按每个片段计算的，并使用一个着色器。"]],[27478,27478],[27541,27541]]],[1576346586990,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346586990,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346541817,["wangyan@DESKTOP-09VD06C",[[-1,27506,"二项式"],[1,27509,"副"]],[27506,27506],[27507,27507]]],[1576346543958,["wangyan@DESKTOP-09VD06C",[[1,27507,"法线"]],[27507,27507],[27509,27509]]],[1576346548803,["wangyan@DESKTOP-09VD06C",[[1,27542,"\n"]],[27541,27541],[27542,27542]]],[1576346548963,["wangyan@DESKTOP-09VD06C",[[1,27543,"\n"]],[27542,27542],[27543,27543]]],[1576346561954,["wangyan@DESKTOP-09VD06C",[[-1,27543,"\n"],[1,27544,"问"]],[27543,27543],[27544,27544]]],[1576346580753,["wangyan@DESKTOP-09VD06C",[[1,27544,"：切线空间很麻烦，没有它我们"]],[27544,27544],[27558,27558]]],[1576346646991,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346646991,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346589172,["wangyan@DESKTOP-09VD06C",[[1,27558,"能行吗？"]],[27558,27558],[27562,27562]]],[1576346592239,["wangyan@DESKTOP-09VD06C",[[1,27562,"\n\n"]],[27562,27562],[27563,27563]]],[1576346592615,["wangyan@DESKTOP-09VD06C",[[1,27564,"\n"]],[27563,27563],[27564,27564]]],[1576346632574,["wangyan@DESKTOP-09VD06C",[[1,27563,"。。。"]],[27563,27563],[27566,27566]]],[1576346633514,["wangyan@DESKTOP-09VD06C",[[1,27568,"\n"]],[27566,27566],[27567,27567]]],[1576346633698,["wangyan@DESKTOP-09VD06C",[[1,27569,"\n"]],[27567,27567],[27568,27568]]],[1576346644380,["wangyan@DESKTOP-09VD06C",[[1,27568,"## "]],[27568,27568],[27571,27571]]],[1576346707003,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346707003,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346672666,["wangyan@DESKTOP-09VD06C",[[1,27571,"逐顶点或者逐片段副法线计算"]],[27571,27571],[27584,27584]]],[1576346673034,["wangyan@DESKTOP-09VD06C",[[1,27586,"\n"]],[27584,27584],[27585,27585]]],[1576346673328,["wangyan@DESKTOP-09VD06C",[[1,27587,"\n"]],[27585,27585],[27586,27586]]],[1576346690544,["wangyan@DESKTOP-09VD06C",[[1,27586,"如果我们想与Unity的标准着色器保持一致，我们必须计算每个顶点的副法线。这样做的好处是我们不必在片段着色器中计算叉乘。缺点是我们需要一个额外的内插器。"]],[27586,27586],[27662,27662]]],[1576346691948,["wangyan@DESKTOP-09VD06C",[[1,27664,"\n"]],[27662,27662],[27663,27663]]],[1576346692111,["wangyan@DESKTOP-09VD06C",[[1,27665,"\n"]],[27663,27663],[27664,27664]]],[1576346767008,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346767008,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346714384,["wangyan@DESKTOP-09VD06C",[[1,27664,"如果不确定使用哪种方法，可以同时支持这两种方法。假设定义了BINORMAL_PER_FRAGMENT，我们计算每个片段的副法线。否则，我们对每个顶点都这样做。在前一种情况下，我们保持我们的float4 tan插值器。在后者中，我们需要两个float3插值器。"]],[27664,27664],[27793,27793]]],[1576346715249,["wangyan@DESKTOP-09VD06C",[[1,27795,"\n"]],[27793,27793],[27794,27794]]],[1576346715407,["wangyan@DESKTOP-09VD06C",[[1,27796,"\n"]],[27794,27794],[27795,27795]]],[1576346720493,["wangyan@DESKTOP-09VD06C",[[1,27795,"```"]],[27795,27795],[27798,27798]]],[1576346720547,["wangyan@DESKTOP-09VD06C",[[1,27798,"language\n```\n"]],[27798,27798],[27798,27806]]],[1576346722333,["wangyan@DESKTOP-09VD06C",[[-1,27798,"language"],[1,27806,"c"]],[27798,27806],[27799,27799]]],[1576346722451,["wangyan@DESKTOP-09VD06C",[[1,27799,"s"]],[27799,27799],[27800,27800]]],[1576346724849,["wangyan@DESKTOP-09VD06C",[[-1,27799,"s"]],[27800,27800],[27799,27799]]],[1576346725840,["wangyan@DESKTOP-09VD06C",[[1,27800,"\n"]],[27799,27799],[27800,27800]]],[1576346726653,["wangyan@DESKTOP-09VD06C",[[1,27800,"struct Interpolators {\n\tfloat4 position : SV_POSITION;\n\tfloat4 uv : TEXCOORD0;\n\tfloat3 normal : TEXCOORD1;\n\n\t#if defined(BINORMAL_PER_FRAGMENT)\n\t\tfloat4 tangent : TEXCOORD2;\n\t#else\n\t\tfloat3 tangent : TEXCOORD2;\n\t\tfloat3 binormal : TEXCOORD3;\n\t#endif\n\n\tfloat3 worldPos : TEXCOORD4;\n\n\t#if defined(VERTEXLIGHT_ON)\n\t\tfloat3 vertexLightColor : TEXCOORD5;\n\t#endif\n};"]],[27800,27800],[28160,28160]]],[1576346729201,["wangyan@DESKTOP-09VD06C",[[1,28167,"\n"]],[28164,28164],[28165,28165]]],[1576346730237,["wangyan@DESKTOP-09VD06C",[[1,28168,"\n"]],[28165,28165],[28166,28166]]],[1576346754108,["wangyan@DESKTOP-09VD06C",[[1,28166,"我们把副法线计算放到它自己的函数中。然后我们可以在顶点或片段着色器中使用它。"]],[28166,28166],[28204,28204]]],[1576346755342,["wangyan@DESKTOP-09VD06C",[[1,28207,"\n"]],[28204,28204],[28205,28205]]],[1576346755488,["wangyan@DESKTOP-09VD06C",[[1,28208,"\n"]],[28205,28205],[28206,28206]]],[1576346762574,["wangyan@DESKTOP-09VD06C",[[1,28206,"···"]],[28206,28206],[28209,28209]]],[1576346763863,["wangyan@DESKTOP-09VD06C",[[-1,28206,"···"]],[28209,28209],[28206,28206]]],[1576346764950,["wangyan@DESKTOP-09VD06C",[[1,28206,"```"]],[28206,28206],[28209,28209]]],[1576346765006,["wangyan@DESKTOP-09VD06C",[[1,28209,"language\n```\n"]],[28209,28209],[28209,28217]]],[1576346765909,["wangyan@DESKTOP-09VD06C",[[-1,28209,"language"],[1,28217,"c"]],[28209,28217],[28210,28210]]],[1576346766149,["wangyan@DESKTOP-09VD06C",[[1,28210,"s"]],[28210,28210],[28211,28211]]],[1576346766753,["wangyan@DESKTOP-09VD06C",[[1,28212,"\n"]],[28211,28211],[28212,28212]]],[1576346827022,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346827022,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346767990,["wangyan@DESKTOP-09VD06C",[[-1,28212,"\n"]],[28212,28212],[28211,28211]]],[1576346768411,["wangyan@DESKTOP-09VD06C",[[-1,28210,"s"]],[28211,28211],[28210,28210]]],[1576346768961,["wangyan@DESKTOP-09VD06C",[[1,28211,"\n"]],[28210,28210],[28211,28211]]],[1576346769690,["wangyan@DESKTOP-09VD06C",[[1,28211,"float3 CreateBinormal (float3 normal, float3 tangent, float binormalSign) {\n\treturn cross(normal, tangent.xyz) *\n\t\t(binormalSign * unity_WorldTransformParams.w);\n}\n\nInterpolators MyVertexProgram (VertexData v) {\n\tInterpolators i;\n\ti.position = mul(UNITY_MATRIX_MVP, v.position);\n\ti.worldPos = mul(unity_ObjectToWorld, v.position);\n\ti.normal = UnityObjectToWorldNormal(v.normal);\n\n\t#if defined(BINORMAL_PER_FRAGMENT)\n\t\ti.tangent = float4(UnityObjectToWorldDir(v.tangent.xyz), v.tangent.w);\n\t#else\n\t\ti.tangent = UnityObjectToWorldDir(v.tangent.xyz);\n\t\ti.binormal = CreateBinormal(i.normal, i.tangent, v.tangent.w);\n\t#endif\n\t\t\n\ti.uv.xy = TRANSFORM_TEX(v.uv, _MainTex);\n\ti.uv.zw = TRANSFORM_TEX(v.uv, _DetailTex);\n\tComputeVertexLightColor(i);\n\treturn i;\n}\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat3 mainNormal =\n\t\tUnpackScaleNormal(tex2D(_NormalMap, i.uv.xy), _BumpScale);\n\tfloat3 detailNormal =\n\t\tUnpackScaleNormal(tex2D(_DetailNormalMap, i.uv.zw), _DetailBumpScale);\n\tfloat3 tangentSpaceNormal = BlendNormals(mainNormal, detailNormal);\n\n\t#if defined(BINORMAL_PER_FRAGMENT)\n\t\tfloat3 binormal = CreateBinormal(i.normal, i.tangent.xyz, i.tangent.w);\n\t#else\n\t\tfloat3 binormal = i.binormal;\n\t#endif\n\t\n\ti.normal = normalize(\n\t\ttangentSpaceNormal.x * i.tangent +\n\t\ttangentSpaceNormal.y * binormal +\n\t\ttangentSpaceNormal.z * i.normal\n\t);\n}"]],[28211,28211],[29564,29564]]],[1576346771790,["wangyan@DESKTOP-09VD06C",[[1,29572,"\n"]],[29568,29568],[29569,29569]]],[1576346771940,["wangyan@DESKTOP-09VD06C",[[1,29573,"\n"]],[29569,29569],[29570,29570]]],[1576346790127,["wangyan@DESKTOP-09VD06C",[[1,29571,"由于BINORMAL_PER_FRAGMENT在任何地方都没有定义，我们的着色器现在将计算每个顶点的二进制数。如果您想计算每个片段，您必须在某个地方定义BINORMAL_PER_FRAGMENT。您可以将此视为包含文件的一个配置选项。因此，在包含我的照明之前，在我的第一个照明着色器中定义它是有意义的。"]],[29571,29571],[29722,29722]]],[1576346810526,["wangyan@DESKTOP-09VD06C",[[1,29573,"**"],[1,29594,"**"]],[29573,29594],[29573,29598]]],[1576346817559,["wangyan@DESKTOP-09VD06C",[[1,29651,"**"],[1,29672,"**"]],[29651,29672],[29651,29676]]],[1576346822781,["wangyan@DESKTOP-09VD06C",[[-1,29625,"二进制数"],[1,29629,"f"]],[29625,29629],[29626,29626]]],[1576346822957,["wangyan@DESKTOP-09VD06C",[[1,29626,"u"]],[29626,29626],[29627,29627]]],[1576346823808,["wangyan@DESKTOP-09VD06C",[[-1,29625,"fu"]],[29627,29627],[29625,29625]]],[1576346826010,["wangyan@DESKTOP-09VD06C",[[1,29625,"副"]],[29625,29625],[29626,29626]]],[1576346887039,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346887039,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346827786,["wangyan@DESKTOP-09VD06C",[[1,29626,"法线"]],[29626,29626],[29628,29628]]],[1576346854728,["wangyan@DESKTOP-09VD06C",[[-1,29701,"我的照明"]],[29701,29705],[29701,29701]]],[1576346857866,["wangyan@DESKTOP-09VD06C",[[1,29701,"My Lighting"]],[29701,29701],[29712,29712]]],[1576346877045,["wangyan@DESKTOP-09VD06C",[[-1,29716,"我的第一个照明"],[1,29723,"_My First Lighting_"]],[29716,29723],[29735,29735]]],[1576346880589,["wangyan@DESKTOP-09VD06C",[[1,29751,"\n"]],[29748,29748],[29749,29749]]],[1576346880730,["wangyan@DESKTOP-09VD06C",[[1,29752,"\n"]],[29749,29749],[29750,29750]]],[1576346947051,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576346947051,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346889580,["wangyan@DESKTOP-09VD06C",[[1,29750,"因为对所有传递使用相同的设置是有意义的，所以我们必须在基础传递和附加传递中定义它。但我们也可以把它放在一个CGINCLUDE块在我们的着色器的顶部。该块的内容包含在所有CGPROGRAM块中。"]],[29750,29750],[29846,29846]]],[1576346894644,["wangyan@DESKTOP-09VD06C",[[-1,29755,"传递"],[1,29757,"pass"]],[29755,29755],[29759,29759]]],[1576346901776,["wangyan@DESKTOP-09VD06C",[[-1,29779,"基础传递"],[1,29783,"b"]],[29779,29783],[29779,29780]]],[1576346904594,["wangyan@DESKTOP-09VD06C",[[1,29780,"ase pass"]],[29779,29779],[29788,29788]]],[1576346916071,["wangyan@DESKTOP-09VD06C",[[-1,29789,"附加传递"],[1,29793,"additive pass"]],[29789,29793],[29802,29802]]],[1576346927849,["wangyan@DESKTOP-09VD06C",[[1,29865,"\n"]],[29862,29862],[29863,29863]]],[1576346928018,["wangyan@DESKTOP-09VD06C",[[1,29866,"\n"]],[29863,29863],[29864,29864]]],[1576346934008,["wangyan@DESKTOP-09VD06C",[[1,29864,"```"]],[29864,29864],[29867,29867]]],[1576346934068,["wangyan@DESKTOP-09VD06C",[[1,29867,"language\n```\n"]],[29867,29867],[29867,29875]]],[1576346935629,["wangyan@DESKTOP-09VD06C",[[-1,29867,"language"],[1,29875,"c"]],[29867,29875],[29868,29868]]],[1576346936540,["wangyan@DESKTOP-09VD06C",[[1,29869,"\n"]],[29868,29868],[29869,29869]]],[1576346937473,["wangyan@DESKTOP-09VD06C",[[1,29869,"Properties {\n\t\t…\n\t}\n\n\tCGINCLUDE\n\n\t#define BINORMAL_PER_FRAGMENT\n\n\tENDCG\n\n\tSubShader {\n\t\t…\n\t}"]],[29869,29869],[29961,29961]]],[1576346939135,["wangyan@DESKTOP-09VD06C",[[1,29969,"\n"]],[29965,29965],[29966,29966]]],[1576346939282,["wangyan@DESKTOP-09VD06C",[[1,29970,"\n"]],[29966,29966],[29967,29967]]],[1576347002174,[null,[[1,18984,"。"],[-1,18995,"使"],[1,19003,"，"],[-1,19016,"\n"]],[18984,18984],[19016,19016]]],[1576347002174,[null,[[-1,18984,"。"],[1,18996,"使"],[-1,19003,"，"],[1,19017,"\n"]],[19016,19016],[18984,18984]]],[1576346950392,["wangyan@DESKTOP-09VD06C",[[1,29967,"您可以通过检查编译后的着色器代码来验证这一点。例如，这里是D3D11使用的插值器，没有定义BINORMAL_PER_FRAGMENT。"]],[29967,29967],[30034,30034]]],[1576346961704,["wangyan@DESKTOP-09VD06C",[[1,30012,"**"],[1,30033,"**"]],[30012,30033],[30012,30037]]],[1576346963277,["wangyan@DESKTOP-09VD06C",[[1,30042,"\n"]],[30038,30038],[30039,30039]]],[1576346963418,["wangyan@DESKTOP-09VD06C",[[1,30043,"\n"]],[30039,30039],[30040,30040]]],[1576346968565,["wangyan@DESKTOP-09VD06C",[[1,30040,"```"]],[30040,30040],[30043,30043]]],[1576346968622,["wangyan@DESKTOP-09VD06C",[[1,30043,"language\n```\n"]],[30043,30043],[30043,30051]]],[1576346969764,["wangyan@DESKTOP-09VD06C",[[-1,30043,"language"],[1,30051,"c"]],[30043,30051],[30044,30044]]],[1576346970612,["wangyan@DESKTOP-09VD06C",[[1,30045,"\n"]],[30044,30044],[30045,30045]]],[1576346971186,["wangyan@DESKTOP-09VD06C",[[1,30045,"// Output signature:\n//\n// Name                 Index   Mask Register SysValue  Format   Used\n// -------------------- ----- ------ -------- -------- ------- ------\n// SV_POSITION              0   xyzw        0      POS   float   xyzw\n// TEXCOORD                 0   xyzw        1     NONE   float   xyzw\n// TEXCOORD                 1   xyz         2     NONE   float   xyz \n// TEXCOORD                 2   xyz         3     NONE   float   xyz \n// TEXCOORD                 3   xyz         4     NONE   float   xyz \n// TEXCOORD                 4   xyz         5     NONE   float   xyz "]],[30045,30045],[30628,30628]]],[1576346972576,["wangyan@DESKTOP-09VD06C",[[1,30637,"\n"]],[30632,30632],[30633,30633]]],[1576346972739,["wangyan@DESKTOP-09VD06C",[[1,30638,"\n"]],[30633,30633],[30634,30634]]],[1576346984037,["wangyan@DESKTOP-09VD06C",[[1,30634,"在这里，当BINORMAL_PER_FRAGMENT被定义时。"]],[30634,30634],[30665,30665]]],[1576346987560,["wangyan@DESKTOP-09VD06C",[[1,30639,"**"],[1,30660,"**"]],[30639,30660],[30639,30664]]],[1576346988828,["wangyan@DESKTOP-09VD06C",[[1,30674,"\n"]],[30669,30669],[30670,30670]]],[1576346988990,["wangyan@DESKTOP-09VD06C",[[1,30675,"\n"]],[30670,30670],[30671,30671]]],[1576346994339,["wangyan@DESKTOP-09VD06C",[[-1,30675,"\n"]],[30672,30672],[30671,30671]]],[1576346994845,["wangyan@DESKTOP-09VD06C",[[1,30671,"```"]],[30671,30671],[30674,30674]]],[1576346994903,["wangyan@DESKTOP-09VD06C",[[1,30674,"language\n```\n"]],[30674,30674],[30674,30682]]],[1576346995934,["wangyan@DESKTOP-09VD06C",[[-1,30674,"language"],[1,30682,"c"]],[30674,30682],[30675,30675]]],[1576346996183,["wangyan@DESKTOP-09VD06C",[[1,30676,"\n"]],[30675,30675],[30676,30676]]],[1576346996919,["wangyan@DESKTOP-09VD06C",[[1,30676,"// Output signature:\n//\n// Name                 Index   Mask Register SysValue  Format   Used\n// -------------------- ----- ------ -------- -------- ------- ------\n// SV_POSITION              0   xyzw        0      POS   float   xyzw\n// TEXCOORD                 0   xyzw        1     NONE   float   xyzw\n// TEXCOORD                 1   xyz         2     NONE   float   xyz \n// TEXCOORD                 2   xyzw        3     NONE   float   xyzw\n// TEXCOORD                 4   xyz         4     NONE   float   xyz "]],[30676,30676],[31189,31189]]],[1576346998146,["wangyan@DESKTOP-09VD06C",[[1,31198,"\n"]],[31193,31193],[31194,31194]]],[1576346998297,["wangyan@DESKTOP-09VD06C",[[1,31199,"\n"]],[31194,31194],[31195,31195]]]],null,"wangyan@DESKTOP-09VD06C"]]}