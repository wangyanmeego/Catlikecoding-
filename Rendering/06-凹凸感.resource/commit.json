{"compress":true,"commitItems":[["86a921f2-2d2c-4bec-98f8-0f77f05cd490",1575355361026,"> 扰动法线模拟凹凸\n>\n> 从高度场计算法线\n>\n> 采样和混合法线\n>\n> 从切线空间转换为世界空间\n\n这是渲染教程系列的第6部分。前一部分增加了对更复杂的照明的支持。这一次，我们将创建更复杂表面的错觉。\n\n本教程是用Unity 5.4.0f3制作的。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/tutorial-image.jpg)\n\n# 凹凸映射\n\n我们可以使用反照率纹理来创建具有复杂颜色图案的材质。我们可以用法线来调整表面的曲率。有了这些工具，我们可以制造出各种各样的表面。然而，一个三角形的表面总是光滑的。它只能在三个法向量之间插值。所以它不能代表粗糙或多变的表面。当放弃反照率纹理而只使用一种纯色时，这一点就很明显了。\n\n体现平滑度的一个很好的例子是一个简单的四边形。添加一个到场景中，通过沿着x轴旋转90°，并使它指向上方。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/flat.png)\n\n因为默认的天空盒非常亮，很难看到其他灯光的作用。在本教程中，我们将其关闭。你可以通过在照明设置中将环境强度降低到零来做到这一点。然后只开启主方向灯。在场景视图中找到一个好的视角，这样你就可以在四边形上看到一些光线的差异。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/ambient-intensity.png)\n\n![scene](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/no-ambient.png)\n\n我们怎样才能使这个四边形看起来不平坦呢？我们可以通过在反照率纹理中加入烘焙阴影来模拟粗糙度。然而，这将是完全静态的。如果灯光改变了，或者物体移动了，阴影也应该改变。否则，假象就会破灭。在镜面反射的情况下，甚至相机都不允许移动。\n\n我们可以改变法线来创建曲面的错觉。但是每四个顶点只有四个法线。这只能产生平滑的过渡。如果我们想要一个多变而粗糙的表面，我们需要更多的法线。\n\n我们可以把四边形分成更小的四边形。这给了我们更多的法线。事实上，一旦我们有更多的顶点，我们也可以移动它们。那么我们就不需要表面粗糙的假象了，我们可以做出一个真正粗糙的表面！但是子四边形仍然有同样的问题。我们还要再细分吗？这将导致大量的网格与大量的三角形。这在创建3D模型时是可行的，但在游戏中并不可行。\n\n## 高度纹理\n\n与平面相比，粗糙的表面具有不均匀的仰角。如果我们将这些高度数据存储在纹理中，我们可能会使用它生成的每个片段的法向量，而不是每个顶点。这个想法被称为凹凸映射，是由James Blinn首先提出的。\n\n这是一个高度贴图，以配合我们的大理石纹理。它是一个RGB纹理，每个通道都设置相同的值。使用默认导入设置其导入到项目中。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/marble-heights.png)\n\n添加一个_HeightMap纹理属性到*My First Lighting Shader*。因为它将使用与我们的反照率相同的UV，所以它不需要自己的缩放和偏移参数。默认的纹理并不重要，只要它是一致的。灰色的就可以了。\n\n```c\n\tProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/heights-inspector.png)\n\n将匹配的变量添加到My Lighting 包含文件中，这样我们就可以访问纹理了。让我们看看它是怎样的，把它与反照率相乘。\n\n```c\nfloat4 _Tint;\nsampler2D _MainTex;\nfloat4 _MainTex_ST;\n\nsampler2D _HeightMap;\n\n…\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\ti.normal = normalize(i.normal);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-color.png)\n\n## 调整法线\n\n因为我们的片段法线将变得更加复杂，我们将它们的初始化移到一个单独的函数中。另外，去掉高度纹理测试代码。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = normalize(i.normal);\n}\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\tInitializeFragmentNormal(i);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n//\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n因为我们现在处理的是一个位于XZ平面上的四边形，它的法向量总是（0，1，0），所以我们可以使用一个常数法向量，忽略顶点数据。我们先做这个，稍后再考虑不同的朝向。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = float3(0, 1, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n我们怎么把高度数据包含进来呢？一种简单的方法是在归一化之前使用高度作为法线的Y分量。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat h = tex2D(_HeightMap, i.uv);\n\ti.normal = float3(0, h, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-normal.png)\n\n这是行不通的，因为归一化会把每个向量都转换回（0，1，0）.我们需要一个不同的方法。\n\n## 有限差分\n\n因为我们处理的是纹理数据，我们有二维数据。有U维度和V维度。这些高度可以被认为是在三维空间中向上的。我们可以说纹理代表了一个函数，f(u,v)=h。我们先把自己限制在U维度上。所以这个函数被简化为f（u）=h。我们能从这个函数推出法向量吗？\n\n如果我们知道函数的斜率，然后我们就可以用它来计算任意点的法向量。斜率由h的变化率决定。这是它的导数。h′。因为h是一个函数的结果，h‘同样也是一个函数的结果。我们有导数函数f’(u)=h‘。\n\n不幸的是，我们不知道这些函数是什么。但是我们可以近似它们。我们可以比较纹理中两个不同点的高度。例如，在极端情况下，使用U坐标0和1。这两个样本之间的插值就是坐标之间的变化率，用函数表示，即f(1)-f(0)。我们可以使用它来构建一个切线向量，![1574845121482](1574845121482.png)。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent-diagram.png)\n\n![1574845208030](1574845208030.png)\n\n这当然是对切向量的粗略近似。它把整个纹理当作一个线性的斜率。我们可以通过采样两个距离更近的点来做得更好。例如，U坐标取0和1/2.在两个点之间的变化率是f(1/2 )-f(0)。半个单位的U。因为处理每整个单位的变化率比较简单，我们用它除以两点之间的距离。所以我们得到![1574847363057](1574847363057.png)。这就得到了切向量![1574847393342](1574847393342.png)。\n\n一般来说，我们要做的是相对于我们渲染的每个片段的U坐标。到下一点的距离由一个常数定义。它的导数是通过![1574849122811](1574849122811.png)来近似。\n\nδ越小，我们近似的导数就越接近于真实。当然它不可能变成零，但当达到理论极限时，你得到![1574849339141](1574849339141.png)。这种近似导数的方法称为有限差分法。有了它，我们可以构造任意点的切向量，![1574850029282](1574850029282.png)。\n\n## 从切线到法线\n\n在我们的着色器代码中，可以用什么值去当作是δ 。最小的感知差异将覆盖我们纹理的单个像素。我们可以通过一个带有_TexelSize后缀float4类型的变量在着色器中获取这些信息。Unity设置那些变量，类似于__ST变量。\n\n**_TexelSize变量中存储了什么？**\n\n> 它的前两个分量包含了Texel的大小，就像U和V一样。其他两个分量包含像素的数量。例如，在256×128大小的纹理中，它将包含(0.00390625, 0.0078125, 256, 128)。\n\n现在我们可以对纹理采样两次，计算高度导数，并构造一个切向量。我们直接用它作为法向量。\n\n```c\n    float2 delta = float2(_HeightMap_TexelSize.x, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(1, (h2 - h1) / delta.x, 0);\n\n\ti.normal = normalize(i.normal);\n```\n\n事实上，因为我们会归一化。我们可以扩展我们的切向量δ。这消除了除法并提高了精度。\n\n```c\ni.normal = float3(delta.x, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent.png)\n\n我们得到了一个非常明显的结果。这是因为这些高度只有一个单位范围，这就产生了非常陡峭的斜坡。由于扰动的法线并不会改变表面，所以我们不希望有如此大的差异。我们可以用任意因子来缩放高度。让我们将范围缩小到单个Texel。我们可以通过乘以δ的高度差，或简单地在切向处用1取代δ。\n\n```c\n\ti.normal = float3(1, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/scaled-height.png)\n\n这看起来不错，但是灯光不对。这看起来太暗了。因为我们直接用正切作为法向量。为了把它变成一个向上的法向量，我们必须绕Z轴旋转tangent 90°。\n\n```c\ni.normal = float3(h1 - h2, 1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/rotated.png)\n\n**矢量旋转是如何工作的？**\n\n你可以通过交换向量的X和Y向量，以及翻转新的X分量的符号来逆时针旋转一个2D向量90°。最后得到![1575016532726](1575016532726.png)\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/vector-rotation.png)\n\n## 中心差分\n\n我们已经使用有限差分近似来创建法向量。具体来说，是通过使用正向差分法。我们取一个点，然后看一个方向来确定斜率。结果，法线是偏向那个方向的。为了得到法向的更好的近似值，我们可以在两个方向上偏移采样点。这种方法将线性逼近集中在当前点上，称为中心差分法。这就把导数变成了![1575017187421](1575017187421.png)。\n\n```c\n\tfloat2 delta = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv - delta);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(h1 - h2, 1, 0);\n```\n\n这稍微移动了凹凸点，使它们更好地与高度场对齐。除此之外，它们的形状不会改变。\n\n## 使用两个维度\n\n我们创建的法线只考虑沿U方向的变化。我们已经使用了函数f(u,v)关于u的偏微分。就是![1575018677399](1575018677399.png)，或者简写为 f<sub>u</sub><sup>‘</sup>。我们可以通过使用f<sub>u</sub><sup>’</sup>沿着V创建法线。在这种情况下，那么切向量是![1575020057277](1575020057277.png)并且法向量是![1575020086626](1575020086626.png)。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\ti.normal = float3(u1 - u2, 1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\ti.normal = float3(0, 1, v1 - v2);\n\n\ti.normal = normalize(i.normal);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/other-dimension.png)\n\n我们现在可以得到U和V的切线。这些向量一起描述了在片段处表面的高度场。通过计算他们的外积，我们的得到了二维高度场的法向量。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\tfloat3 tv = float3(0, v2 - v1, 1);\n\n\ti.normal = cross(tv, tu);\n\ti.normal = normalize(i.normal);\n```\n\n![quad](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals.png)\n\n![details](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals-details.png)\n\n当你计算切向量的外积时，你会看到![1575021052831](1575021052831.png)。\t所以我们可以直接构造这个向量，而不是依赖于叉乘函数。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n//\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n//\tfloat3 tv = float3(0, v2 - v1, 1);\n\n//\ti.normal = cross(tv, tu);\n\ti.normal = float3(u1 - u2, 1, v1 - v2);\n\ti.normal = normalize(i.normal);\n}\n```\n\n# 法线映射\n\n当凹凸贴图工作时，我们必须执行多个纹理样本和有限差分计算。这似乎是一种浪费，因为结果的法线应该总是相同的。为什么每帧做所有这些工作？我们可以只做一次，将法线存储在一个纹理中。\n\n这意味着我们需要一个法线贴图。我可以提供一个，但我们可以让Unity为我们做这些工作。将高度贴图的纹理类型改为法线贴图。Unity自动切换纹理去使用三线性过滤，并假设我们想要使用灰度图像数据来生成一个法线贴图。这正是我们想要的。但是将凹凸度为更低的值，比如0.05。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/inspector.png)\n\n![preview](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/preview.png)\n\n应用了导入设置后，Unity将计算法线贴图。原始的高度地图仍然存在，但Unity内部使用生成的地图。\n\n就像我们在法线可视化为颜色时所做的那样，它们必须进行调整以适应0-1的范围。所以它们被存储为 $x^4$\n\n",[[1575355345399,["wangy@DESKTOP-LU247VS",[[-1,8759," $x^4$"]],[8759,8765],[8759,8759]]],[1575355410171,["wangy@DESKTOP-LU247VS",[[1,8761,"$$\nx = \\frac{N+1}{2}\n$$\n\n"]],[8759,8759],[8786,8786]]],[1575355486818,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"."]],[8786,8786],[8786,8786]]],[1575355488156,["wangy@DESKTOP-LU247VS",[[-1,8785,"."],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355488757,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786," "]],[8785,8785],[8786,8786]]],[1575355489577,["wangy@DESKTOP-LU247VS",[[-1,8785," "],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355490681,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"."]],[8785,8785],[8786,8786]]],[1575355491287,["wangy@DESKTOP-LU247VS",[[-1,8785,"."],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355491818,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"。"]],[8785,8785],[8786,8786]]],[1575355501434,["wangy@DESKTOP-LU247VS",[[-1,8785,"。"],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355537172,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"zh"]],[8785,8785],[8784,8787]]],[1575355541437,["wangy@DESKTOP-LU247VS",[[-1,8784,"\nzh"],[1,8787,"这意味着"]],[8784,8784],[8788,8788]]],[1575355542457,["wangy@DESKTOP-LU247VS",[[-1,8784,"这意味着"]],[8788,8788],[8784,8784]]],[1575355543111,["wangy@DESKTOP-LU247VS",[[1,8784,"\n\n"]],[8784,8784],[8785,8785]]],[1575355543734,["wangy@DESKTOP-LU247VS",[[1,8786,"\n"]],[8785,8785],[8786,8786]]],[1575355550048,["wangy@DESKTOP-LU247VS",[[-1,8786,"\n"],[1,8787,"这意味着"]],[8786,8786],[8790,8790]]],[1575355587639,["wangy@DESKTOP-LU247VS",[[1,8790,"平坦区域会 呈现浅绿色。然而，它们却呈现淡蓝色"]],[8790,8790],[8813,8813]]],[1575355640606,["wangy@DESKTOP-LU247VS",[[-1,8786,"这意味着"]],[8790,8790],[8786,8786]]],[1575355644795,["wangy@DESKTOP-LU247VS",[[1,8786,"这假设"]],[8786,8786],[8789,8789]]],[1575355647921,["wangy@DESKTOP-LU247VS",[[-1,8794," "]],[8795,8795],[8794,8794]]],[1575355653667,["wangy@DESKTOP-LU247VS",[[1,8808,"为"]],[8808,8808],[8809,8809]]],[1575355656777,["wangy@DESKTOP-LU247VS",[[1,8812,"。"]],[8812,8812],[8813,8813]]],[1575355718191,["wangy@DESKTOP-LU247VS",[[1,8813,"这是因为法向映射最常见的约定是将"]],[8813,8813],[8829,8829]]],[1575355724037,["wangy@DESKTOP-LU247VS",[[1,8829,"向上的方向"]],[8829,8829],[8834,8834]]],[1575355739762,["wangy@DESKTOP-LU247VS",[[-1,8819,"映射"]],[8821,8821],[8819,8819]]],[1575355741815,["wangy@DESKTOP-LU247VS",[[1,8819,"纹理"]],[8819,8819],[8821,8821]]],[1575355775162,["wangy@DESKTOP-LU247VS",[[1,8834,"存储在z分量中。在Unity看来"]],[8834,8834],[8850,8850]]],[1575355796624,["wangy@DESKTOP-LU247VS",[[1,8850,"，Y和Z坐标是交换的。"]],[8850,8850],[8861,8861]]],[1575355797910,["wangy@DESKTOP-LU247VS",[[1,8861,"\n\n"]],[8861,8861],[8862,8862]]],[1575355799006,["wangy@DESKTOP-LU247VS",[[1,8863,"\n"]],[8862,8862],[8863,8863]]],[1575355824621,["wangy@DESKTOP-LU247VS",[[1,8863,"## 对法线纹理"]],[8863,8863],[8871,8871]]],[1575355825405,["wangy@DESKTOP-LU247VS",[[-1,8869,"纹理"]],[8871,8871],[8869,8869]]],[1575355828470,["wangy@DESKTOP-LU247VS",[[1,8869,"贴图采样"]],[8869,8869],[8873,8873]]],[1575355830638,["wangy@DESKTOP-LU247VS",[[1,8874,"\n"]],[8873,8873],[8874,8874]]],[1575355831318,["wangy@DESKTOP-LU247VS",[[1,8875,"\n"]],[8874,8874],[8875,8875]]],[1575355849678,["wangy@DESKTOP-LU247VS",[[-1,8875,"\n"],[1,8876,"因为"]],[8875,8875],[8877,8877]]],[1575355899169,["wangy@DESKTOP-LU247VS",[[1,8877,"法线贴图和高度贴图有很大的不同，要相应地重命名"]],[8877,8877],[8900,8900]]],[1575355904280,["wangy@DESKTOP-LU247VS",[[1,8900,"着色器属性。"]],[8900,8900],[8906,8906]]],[1575355905926,["wangy@DESKTOP-LU247VS",[[1,8906,"\n\n"]],[8906,8906],[8907,8907]]],[1575355911190,["wangy@DESKTOP-LU247VS",[[1,8908,"\n"]],[8907,8907],[8908,8908]]],[1575355912707,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"],[1,8909,"·"]],[8908,8908],[8909,8909]]],[1575355913320,["wangy@DESKTOP-LU247VS",[[-1,8908,"·"],[1,8909,"\n"]],[8909,8909],[8908,8908]]],[1575355913969,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"],[1,8909,"`"]],[8908,8908],[8909,8909]]],[1575355914160,["wangy@DESKTOP-LU247VS",[[1,8909,"`"]],[8909,8909],[8910,8910]]],[1575355916279,["wangy@DESKTOP-LU247VS",[[-1,8909,"`"]],[8910,8910],[8909,8909]]],[1575355916465,["wangy@DESKTOP-LU247VS",[[-1,8908,"`"],[1,8909,"\n"]],[8909,8909],[8908,8908]]],[1575355916688,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"]],[8908,8908],[8907,8907]]],[1575355917670,["wangy@DESKTOP-LU247VS",[[1,8908,"\n"]],[8907,8907],[8908,8908]]],[1575355918227,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"],[1,8909,"`"]],[8908,8908],[8909,8909]]],[1575355920696,["wangy@DESKTOP-LU247VS",[[1,8909,"`c"]],[8909,8909],[8911,8911]]],[1575355922696,["wangy@DESKTOP-LU247VS",[[-1,8910,"c"]],[8911,8911],[8910,8910]]],[1575355923649,["wangy@DESKTOP-LU247VS",[[1,8910,"`"]],[8910,8910],[8911,8911]]],[1575355923714,["wangy@DESKTOP-LU247VS",[[1,8911,"language\n```\n"]],[8911,8911],[8911,8919]]],[1575355925104,["wangy@DESKTOP-LU247VS",[[-1,8911,"language"],[1,8919,"c"]],[8911,8919],[8912,8912]]],[1575355925997,["wangy@DESKTOP-LU247VS",[[1,8913,"\n"]],[8912,8912],[8913,8913]]],[1575355927016,["wangy@DESKTOP-LU247VS",[[1,8913,"**Properties** {\n\t\t_Tint (\"Tint\", **Color**) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n~~//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}~~\n\t\t[Gamma] _Metallic (\"Metallic\", **Range**(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", **Range**(0, 1)) = 0.1\n\t}"]],[8913,8913],[9240,9240]]],[1575355929356,["wangy@DESKTOP-LU247VS",[[-1,8913,"**Properties** {\n\t\t_Tint (\"Tint\", **Color**) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n~~//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}~~\n\t\t[Gamma] _Metallic (\"Metallic\", **Range**(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", **Range**(0, 1)) = 0.1\n\t}"]],[9240,9240],[8913,8913]]],[1575355933144,["wangy@DESKTOP-LU247VS",[[1,8913,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}"]],[8913,8913],[9220,9220]]],[1575355935179,["wangy@DESKTOP-LU247VS",[[-1,8913,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}"]],[9220,9220],[8913,8913]]],[1575355943873,["wangy@DESKTOP-LU247VS",[[1,8914,"\n"]],[8913,8913],[8914,8914]]],[1575355945434,["wangy@DESKTOP-LU247VS",[[-1,8914,"\n"]],[8914,8914],[8913,8913]]],[1575355956425,["wangy@DESKTOP-LU247VS",[[1,8913,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}"]],[8913,8913],[9220,9220]]],[1575355970638,["wangy@DESKTOP-LU247VS",[[1,9225,"\n"]],[9224,9224],[9225,9225]]],[1575355970806,["wangy@DESKTOP-LU247VS",[[1,9226,"\n"]],[9225,9225],[9226,9226]]],[1575355978542,["wangy@DESKTOP-LU247VS",[[1,9226,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/material-with-normal-map.png)"]],[9226,9226],[9333,9333]]],[1575355987712,["wangy@DESKTOP-LU247VS",[[1,9228,"shiyong"]],[9228,9228],[9235,9235]]],[1575355989231,["wangy@DESKTOP-LU247VS",[[-1,9228,"shiyong"]],[9235,9235],[9228,9228]]],[1575355998047,["wangy@DESKTOP-LU247VS",[[1,9228,"使用一个法线贴图"]],[9228,9228],[9236,9236]]],[1575356001399,["wangy@DESKTOP-LU247VS",[[1,9342,"\n"]],[9341,9341],[9342,9342]]],[1575356001543,["wangy@DESKTOP-LU247VS",[[1,9343,"\n"]],[9342,9342],[9343,9343]]],[1575356011575,["wangy@DESKTOP-LU247VS",[[-1,9343,"\n"],[1,9344,"我们"]],[9343,9343],[9345,9345]]],[1575356016805,["wangy@DESKTOP-LU247VS",[[1,9345,"可以删除所有的"]],[9345,9345],[9352,9352]]],[1575356078162,["wangy@DESKTOP-LU247VS",[[1,9352,"高度贴图代码，并将其替换为一个纹理采样，然后进行归一化。"]],[9352,9352],[9380,9380]]],[1575356079247,["wangy@DESKTOP-LU247VS",[[1,9380,"\n\n"]],[9380,9380],[9381,9381]]],[1575356085872,["wangy@DESKTOP-LU247VS",[[1,9382,"\n"]],[9381,9381],[9382,9382]]],[1575356086088,["wangy@DESKTOP-LU247VS",[[-1,9382,"\n"],[1,9383,"`"]],[9382,9382],[9383,9383]]],[1575356086457,["wangy@DESKTOP-LU247VS",[[1,9383,"``"]],[9383,9383],[9385,9385]]],[1575356086509,["wangy@DESKTOP-LU247VS",[[1,9385,"language\n```\n"]],[9385,9385],[9385,9393]]],[1575356089280,["wangy@DESKTOP-LU247VS",[[-1,9385,"language"],[1,9393,"c"]],[9385,9393],[9386,9386]]],[1575356089566,["wangy@DESKTOP-LU247VS",[[1,9387,"\n"]],[9386,9386],[9387,9387]]],[1575356090937,["wangy@DESKTOP-LU247VS",[[1,9387,"sampler2D _NormalMap;\n\n//sampler2D _HeightMap;\n//float4 _HeightMap_TexelSize;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = tex2D(_NormalMap, i.uv).rgb;\n\ti.normal = normalize(i.normal);\n}"]],[9387,9387],[9599,9599]]],[1575356094654,["wangy@DESKTOP-LU247VS",[[1,9604,"\n"]],[9603,9603],[9604,9604]]],[1575356094838,["wangy@DESKTOP-LU247VS",[[1,9605,"\n"]],[9604,9604],[9605,9605]]],[1575356102233,["wangy@DESKTOP-LU247VS",[[-1,9605,"\n"],[1,9606,"d"]],[9605,9605],[9606,9606]]],[1575356103027,["wangy@DESKTOP-LU247VS",[[-1,9605,"d"],[1,9606,"\n"]],[9606,9606],[9605,9605]]],[1575356104201,["wangy@DESKTOP-LU247VS",[[-1,9605,"\n"]],[9605,9605],[0,0]]],[1575356104514,["wangy@DESKTOP-LU247VS",[[-1,9604,"\n"],[1,9605,"d"]],[0,0],[9604,9605]]],[1575356104602,["wangy@DESKTOP-LU247VS",[[1,9605,"a"]],[9604,9604],[9603,9606]]],[1575356108211,["wangy@DESKTOP-LU247VS",[[-1,9603,"\nda"]],[9603,9603],[9603,9603]]],[1575356108495,["wangy@DESKTOP-LU247VS",[[1,9603,"\n\n"]],[9603,9603],[9604,9604]]],[1575356108807,["wangy@DESKTOP-LU247VS",[[1,9605,"\n"]],[9604,9604],[9605,9605]]],[1575356110744,["wangy@DESKTOP-LU247VS",[[-1,9605,"\n"],[1,9606,"当然"]],[9605,9605],[9607,9607]]],[1575356138111,["wangy@DESKTOP-LU247VS",[[1,9607,"，我们必须通过计算2N-1来将法线转换回它们"]],[9607,9607],[9629,9629]]],[1575356153185,["wangy@DESKTOP-LU247VS",[[1,9631,"的-1~1的范围。"]],[9631,9631],[9640,9640]]],[1575356153638,["wangy@DESKTOP-LU247VS",[[1,9640,"\n\n"]],[9640,9640],[9641,9641]]],[1575356159807,["wangy@DESKTOP-LU247VS",[[1,9642,"\n"]],[9641,9641],[9642,9642]]],[1575356160376,["wangy@DESKTOP-LU247VS",[[-1,9642,"\n"],[1,9643,"`"]],[9642,9642],[9643,9643]]],[1575356160720,["wangy@DESKTOP-LU247VS",[[1,9643,"``"]],[9643,9643],[9645,9645]]],[1575356160779,["wangy@DESKTOP-LU247VS",[[1,9645,"language\n```\n"]],[9645,9645],[9645,9653]]],[1575356162312,["wangy@DESKTOP-LU247VS",[[-1,9645,"language"],[1,9653,"c"]],[9645,9653],[9646,9646]]],[1575356163063,["wangy@DESKTOP-LU247VS",[[1,9647,"\n"]],[9646,9646],[9647,9647]]],[1575356164160,["wangy@DESKTOP-LU247VS",[[1,9647,"i.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;"]],[9647,9647],[9694,9694]]],[1575356166021,["wangy@DESKTOP-LU247VS",[[1,9699,"\n"]],[9698,9698],[9699,9699]]],[1575356166382,["wangy@DESKTOP-LU247VS",[[1,9700,"\n"]],[9699,9699],[9700,9700]]],[1575356174664,["wangy@DESKTOP-LU247VS",[[-1,9700,"\n"],[1,9701,"s"]],[9700,9700],[9701,9701]]],[1575356175207,["wangy@DESKTOP-LU247VS",[[-1,9700,"s"],[1,9701,"\n"]],[9701,9701],[9700,9700]]],[1575356176509,["wangy@DESKTOP-LU247VS",[[-1,9700,"\n"]],[9700,9700],[0,0]]],[1575356177454,["wangy@DESKTOP-LU247VS",[[1,0,"\n"]],[0,0],[1,1]]],[1575356183814,["wangy@DESKTOP-LU247VS",[[1,9701,"\n"]],[9700,9700],[9701,9701]]],[1575356186166,["wangy@DESKTOP-LU247VS",[[-1,9701,"\n"],[1,9702,"此外"]],[9701,9701],[9703,9703]]],[1575356196212,["wangy@DESKTOP-LU247VS",[[1,9703,"，记得要交换Y和Z。"]],[9703,9703],[9713,9713]]],[1575356197990,["wangy@DESKTOP-LU247VS",[[1,9713,"\n\n"]],[9713,9713],[9714,9714]]],[1575356216477,[null,[[1,9630,"原来"],[-1,9641,"\n"],[-1,9645,"lc`"],[1,9648,"c\n"],[-1,9698,"\n"],[1,9699,"`"]],[9630,9630],[9700,9700]]],[1575356216478,[null,[[-1,9630,"原来"],[1,9643,"\n"],[1,9646,"lc`"],[-1,9646,"c\n"],[1,9698,"\n"],[-1,9698,"`"]],[9700,9700],[9630,9630]]],[1575356203998,["wangy@DESKTOP-LU247VS",[[1,9715,"\n"]],[9714,9714],[9715,9715]]],[1575356204218,["wangy@DESKTOP-LU247VS",[[-1,9715,"\n"],[1,9716,"`"]],[9715,9715],[9716,9716]]],[1575356204560,["wangy@DESKTOP-LU247VS",[[1,9716,"``"]],[9716,9716],[9718,9718]]],[1575356204643,["wangy@DESKTOP-LU247VS",[[1,9718,"language\n```\n"]],[9718,9718],[9718,9726]]],[1575356205464,["wangy@DESKTOP-LU247VS",[[-1,9718,"language"],[1,9726,"c"]],[9718,9726],[9719,9719]]],[1575356205916,["wangy@DESKTOP-LU247VS",[[1,9720,"\n"]],[9719,9719],[9720,9720]]],[1575356206628,["wangy@DESKTOP-LU247VS",[[1,9720,"i.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;\n\ti.normal = i.normal.xzy;"]],[9720,9720],[9793,9793]]],[1575356214750,["wangy@DESKTOP-LU247VS",[[1,9720,"    "]],[9720,9720],[9724,9724]]],[1575356249680,[null,[[1,9630,"原来"],[-1,9641,"\n"],[-1,9645,"lc`"],[1,9648,"c\n"],[-1,9698,"\n"],[1,9699,"`"]],[9630,9630],[9700,9700]]],[1575356249680,[null,[[-1,9630,"原来"],[1,9643,"\n"],[1,9646,"lc`"],[-1,9646,"c\n"],[1,9698,"\n"],[-1,9698,"`"]],[9700,9700],[9630,9630]]],[1575356218142,["wangy@DESKTOP-LU247VS",[[1,9802,"\n"]],[9801,9801],[9802,9802]]],[1575356218286,["wangy@DESKTOP-LU247VS",[[1,9803,"\n"]],[9802,9802],[9803,9803]]],[1575356222178,["wangy@DESKTOP-LU247VS",[[1,9803,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/normals.png)"]],[9803,9803],[9893,9893]]],[1575356227699,["wangy@DESKTOP-LU247VS",[[1,9805,"s"]],[9805,9805],[9806,9806]]],[1575356228423,["wangy@DESKTOP-LU247VS",[[-1,9805,"s"]],[9806,9806],[9805,9805]]],[1575356235793,["wangy@DESKTOP-LU247VS",[[1,9805,"使用一个纹理贴图"]],[9805,9805],[9813,9813]]],[1575356238648,["wangy@DESKTOP-LU247VS",[[-1,9809,"纹理"]],[9811,9811],[9809,9809]]],[1575356246268,["wangy@DESKTOP-LU247VS",[[1,9809,"法线"]],[9809,9809],[9811,9811]]]],null,"wangy@DESKTOP-LU247VS"]]}