{"compress":true,"commitItems":[["86a921f2-2d2c-4bec-98f8-0f77f05cd490",1575355361026,"> 扰动法线模拟凹凸\n>\n> 从高度场计算法线\n>\n> 采样和混合法线\n>\n> 从切线空间转换为世界空间\n\n这是渲染教程系列的第6部分。前一部分增加了对更复杂的照明的支持。这一次，我们将创建更复杂表面的错觉。\n\n本教程是用Unity 5.4.0f3制作的。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/tutorial-image.jpg)\n\n# 凹凸映射\n\n我们可以使用反照率纹理来创建具有复杂颜色图案的材质。我们可以用法线来调整表面的曲率。有了这些工具，我们可以制造出各种各样的表面。然而，一个三角形的表面总是光滑的。它只能在三个法向量之间插值。所以它不能代表粗糙或多变的表面。当放弃反照率纹理而只使用一种纯色时，这一点就很明显了。\n\n体现平滑度的一个很好的例子是一个简单的四边形。添加一个到场景中，通过沿着x轴旋转90°，并使它指向上方。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/flat.png)\n\n因为默认的天空盒非常亮，很难看到其他灯光的作用。在本教程中，我们将其关闭。你可以通过在照明设置中将环境强度降低到零来做到这一点。然后只开启主方向灯。在场景视图中找到一个好的视角，这样你就可以在四边形上看到一些光线的差异。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/ambient-intensity.png)\n\n![scene](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/no-ambient.png)\n\n我们怎样才能使这个四边形看起来不平坦呢？我们可以通过在反照率纹理中加入烘焙阴影来模拟粗糙度。然而，这将是完全静态的。如果灯光改变了，或者物体移动了，阴影也应该改变。否则，假象就会破灭。在镜面反射的情况下，甚至相机都不允许移动。\n\n我们可以改变法线来创建曲面的错觉。但是每四个顶点只有四个法线。这只能产生平滑的过渡。如果我们想要一个多变而粗糙的表面，我们需要更多的法线。\n\n我们可以把四边形分成更小的四边形。这给了我们更多的法线。事实上，一旦我们有更多的顶点，我们也可以移动它们。那么我们就不需要表面粗糙的假象了，我们可以做出一个真正粗糙的表面！但是子四边形仍然有同样的问题。我们还要再细分吗？这将导致大量的网格与大量的三角形。这在创建3D模型时是可行的，但在游戏中并不可行。\n\n## 高度纹理\n\n与平面相比，粗糙的表面具有不均匀的仰角。如果我们将这些高度数据存储在纹理中，我们可能会使用它生成的每个片段的法向量，而不是每个顶点。这个想法被称为凹凸映射，是由James Blinn首先提出的。\n\n这是一个高度贴图，以配合我们的大理石纹理。它是一个RGB纹理，每个通道都设置相同的值。使用默认导入设置其导入到项目中。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/marble-heights.png)\n\n添加一个_HeightMap纹理属性到*My First Lighting Shader*。因为它将使用与我们的反照率相同的UV，所以它不需要自己的缩放和偏移参数。默认的纹理并不重要，只要它是一致的。灰色的就可以了。\n\n```c\n\tProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/heights-inspector.png)\n\n将匹配的变量添加到My Lighting 包含文件中，这样我们就可以访问纹理了。让我们看看它是怎样的，把它与反照率相乘。\n\n```c\nfloat4 _Tint;\nsampler2D _MainTex;\nfloat4 _MainTex_ST;\n\nsampler2D _HeightMap;\n\n…\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\ti.normal = normalize(i.normal);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-color.png)\n\n## 调整法线\n\n因为我们的片段法线将变得更加复杂，我们将它们的初始化移到一个单独的函数中。另外，去掉高度纹理测试代码。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = normalize(i.normal);\n}\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\tInitializeFragmentNormal(i);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n//\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n因为我们现在处理的是一个位于XZ平面上的四边形，它的法向量总是（0，1，0），所以我们可以使用一个常数法向量，忽略顶点数据。我们先做这个，稍后再考虑不同的朝向。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = float3(0, 1, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n我们怎么把高度数据包含进来呢？一种简单的方法是在归一化之前使用高度作为法线的Y分量。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat h = tex2D(_HeightMap, i.uv);\n\ti.normal = float3(0, h, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-normal.png)\n\n这是行不通的，因为归一化会把每个向量都转换回（0，1，0）.我们需要一个不同的方法。\n\n## 有限差分\n\n因为我们处理的是纹理数据，我们有二维数据。有U维度和V维度。这些高度可以被认为是在三维空间中向上的。我们可以说纹理代表了一个函数，f(u,v)=h。我们先把自己限制在U维度上。所以这个函数被简化为f（u）=h。我们能从这个函数推出法向量吗？\n\n如果我们知道函数的斜率，然后我们就可以用它来计算任意点的法向量。斜率由h的变化率决定。这是它的导数。h′。因为h是一个函数的结果，h‘同样也是一个函数的结果。我们有导数函数f’(u)=h‘。\n\n不幸的是，我们不知道这些函数是什么。但是我们可以近似它们。我们可以比较纹理中两个不同点的高度。例如，在极端情况下，使用U坐标0和1。这两个样本之间的插值就是坐标之间的变化率，用函数表示，即f(1)-f(0)。我们可以使用它来构建一个切线向量，![1574845121482](1574845121482.png)。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent-diagram.png)\n\n![1574845208030](1574845208030.png)\n\n这当然是对切向量的粗略近似。它把整个纹理当作一个线性的斜率。我们可以通过采样两个距离更近的点来做得更好。例如，U坐标取0和1/2.在两个点之间的变化率是f(1/2 )-f(0)。半个单位的U。因为处理每整个单位的变化率比较简单，我们用它除以两点之间的距离。所以我们得到![1574847363057](1574847363057.png)。这就得到了切向量![1574847393342](1574847393342.png)。\n\n一般来说，我们要做的是相对于我们渲染的每个片段的U坐标。到下一点的距离由一个常数定义。它的导数是通过![1574849122811](1574849122811.png)来近似。\n\nδ越小，我们近似的导数就越接近于真实。当然它不可能变成零，但当达到理论极限时，你得到![1574849339141](1574849339141.png)。这种近似导数的方法称为有限差分法。有了它，我们可以构造任意点的切向量，![1574850029282](1574850029282.png)。\n\n## 从切线到法线\n\n在我们的着色器代码中，可以用什么值去当作是δ 。最小的感知差异将覆盖我们纹理的单个像素。我们可以通过一个带有_TexelSize后缀float4类型的变量在着色器中获取这些信息。Unity设置那些变量，类似于__ST变量。\n\n**_TexelSize变量中存储了什么？**\n\n> 它的前两个分量包含了Texel的大小，就像U和V一样。其他两个分量包含像素的数量。例如，在256×128大小的纹理中，它将包含(0.00390625, 0.0078125, 256, 128)。\n\n现在我们可以对纹理采样两次，计算高度导数，并构造一个切向量。我们直接用它作为法向量。\n\n```c\n    float2 delta = float2(_HeightMap_TexelSize.x, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(1, (h2 - h1) / delta.x, 0);\n\n\ti.normal = normalize(i.normal);\n```\n\n事实上，因为我们会归一化。我们可以扩展我们的切向量δ。这消除了除法并提高了精度。\n\n```c\ni.normal = float3(delta.x, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent.png)\n\n我们得到了一个非常明显的结果。这是因为这些高度只有一个单位范围，这就产生了非常陡峭的斜坡。由于扰动的法线并不会改变表面，所以我们不希望有如此大的差异。我们可以用任意因子来缩放高度。让我们将范围缩小到单个Texel。我们可以通过乘以δ的高度差，或简单地在切向处用1取代δ。\n\n```c\n\ti.normal = float3(1, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/scaled-height.png)\n\n这看起来不错，但是灯光不对。这看起来太暗了。因为我们直接用正切作为法向量。为了把它变成一个向上的法向量，我们必须绕Z轴旋转tangent 90°。\n\n```c\ni.normal = float3(h1 - h2, 1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/rotated.png)\n\n**矢量旋转是如何工作的？**\n\n你可以通过交换向量的X和Y向量，以及翻转新的X分量的符号来逆时针旋转一个2D向量90°。最后得到![1575016532726](1575016532726.png)\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/vector-rotation.png)\n\n## 中心差分\n\n我们已经使用有限差分近似来创建法向量。具体来说，是通过使用正向差分法。我们取一个点，然后看一个方向来确定斜率。结果，法线是偏向那个方向的。为了得到法向的更好的近似值，我们可以在两个方向上偏移采样点。这种方法将线性逼近集中在当前点上，称为中心差分法。这就把导数变成了![1575017187421](1575017187421.png)。\n\n```c\n\tfloat2 delta = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv - delta);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(h1 - h2, 1, 0);\n```\n\n这稍微移动了凹凸点，使它们更好地与高度场对齐。除此之外，它们的形状不会改变。\n\n## 使用两个维度\n\n我们创建的法线只考虑沿U方向的变化。我们已经使用了函数f(u,v)关于u的偏微分。就是![1575018677399](1575018677399.png)，或者简写为 f<sub>u</sub><sup>‘</sup>。我们可以通过使用f<sub>u</sub><sup>’</sup>沿着V创建法线。在这种情况下，那么切向量是![1575020057277](1575020057277.png)并且法向量是![1575020086626](1575020086626.png)。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\ti.normal = float3(u1 - u2, 1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\ti.normal = float3(0, 1, v1 - v2);\n\n\ti.normal = normalize(i.normal);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/other-dimension.png)\n\n我们现在可以得到U和V的切线。这些向量一起描述了在片段处表面的高度场。通过计算他们的外积，我们的得到了二维高度场的法向量。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\tfloat3 tv = float3(0, v2 - v1, 1);\n\n\ti.normal = cross(tv, tu);\n\ti.normal = normalize(i.normal);\n```\n\n![quad](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals.png)\n\n![details](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals-details.png)\n\n当你计算切向量的外积时，你会看到![1575021052831](1575021052831.png)。\t所以我们可以直接构造这个向量，而不是依赖于叉乘函数。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n//\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n//\tfloat3 tv = float3(0, v2 - v1, 1);\n\n//\ti.normal = cross(tv, tu);\n\ti.normal = float3(u1 - u2, 1, v1 - v2);\n\ti.normal = normalize(i.normal);\n}\n```\n\n# 法线映射\n\n当凹凸贴图工作时，我们必须执行多个纹理样本和有限差分计算。这似乎是一种浪费，因为结果的法线应该总是相同的。为什么每帧做所有这些工作？我们可以只做一次，将法线存储在一个纹理中。\n\n这意味着我们需要一个法线贴图。我可以提供一个，但我们可以让Unity为我们做这些工作。将高度贴图的纹理类型改为法线贴图。Unity自动切换纹理去使用三线性过滤，并假设我们想要使用灰度图像数据来生成一个法线贴图。这正是我们想要的。但是将凹凸度为更低的值，比如0.05。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/inspector.png)\n\n![preview](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/preview.png)\n\n应用了导入设置后，Unity将计算法线贴图。原始的高度地图仍然存在，但Unity内部使用生成的地图。\n\n就像我们在法线可视化为颜色时所做的那样，它们必须进行调整以适应0-1的范围。所以它们被存储为 $x^4$\n\n",[[1575355345399,["wangy@DESKTOP-LU247VS",[[-1,8759," $x^4$"]],[8759,8765],[8759,8759]]],[1575355410171,["wangy@DESKTOP-LU247VS",[[1,8761,"$$\nx = \\frac{N+1}{2}\n$$\n\n"]],[8759,8759],[8786,8786]]],[1575355486818,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"."]],[8786,8786],[8786,8786]]],[1575355488156,["wangy@DESKTOP-LU247VS",[[-1,8785,"."],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355488757,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786," "]],[8785,8785],[8786,8786]]],[1575355489577,["wangy@DESKTOP-LU247VS",[[-1,8785," "],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355490681,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"."]],[8785,8785],[8786,8786]]],[1575355491287,["wangy@DESKTOP-LU247VS",[[-1,8785,"."],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355491818,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"。"]],[8785,8785],[8786,8786]]],[1575355501434,["wangy@DESKTOP-LU247VS",[[-1,8785,"。"],[1,8786,"\n"]],[8786,8786],[8785,8785]]],[1575355537172,["wangy@DESKTOP-LU247VS",[[-1,8785,"\n"],[1,8786,"zh"]],[8785,8785],[8784,8787]]],[1575355541437,["wangy@DESKTOP-LU247VS",[[-1,8784,"\nzh"],[1,8787,"这意味着"]],[8784,8784],[8788,8788]]],[1575355542457,["wangy@DESKTOP-LU247VS",[[-1,8784,"这意味着"]],[8788,8788],[8784,8784]]],[1575355543111,["wangy@DESKTOP-LU247VS",[[1,8784,"\n\n"]],[8784,8784],[8785,8785]]],[1575355543734,["wangy@DESKTOP-LU247VS",[[1,8786,"\n"]],[8785,8785],[8786,8786]]],[1575355550048,["wangy@DESKTOP-LU247VS",[[-1,8786,"\n"],[1,8787,"这意味着"]],[8786,8786],[8790,8790]]],[1575355587639,["wangy@DESKTOP-LU247VS",[[1,8790,"平坦区域会 呈现浅绿色。然而，它们却呈现淡蓝色"]],[8790,8790],[8813,8813]]],[1575355640606,["wangy@DESKTOP-LU247VS",[[-1,8786,"这意味着"]],[8790,8790],[8786,8786]]],[1575355644795,["wangy@DESKTOP-LU247VS",[[1,8786,"这假设"]],[8786,8786],[8789,8789]]],[1575355647921,["wangy@DESKTOP-LU247VS",[[-1,8794," "]],[8795,8795],[8794,8794]]],[1575355653667,["wangy@DESKTOP-LU247VS",[[1,8808,"为"]],[8808,8808],[8809,8809]]],[1575355656777,["wangy@DESKTOP-LU247VS",[[1,8812,"。"]],[8812,8812],[8813,8813]]],[1575355718191,["wangy@DESKTOP-LU247VS",[[1,8813,"这是因为法向映射最常见的约定是将"]],[8813,8813],[8829,8829]]],[1575355724037,["wangy@DESKTOP-LU247VS",[[1,8829,"向上的方向"]],[8829,8829],[8834,8834]]],[1575355739762,["wangy@DESKTOP-LU247VS",[[-1,8819,"映射"]],[8821,8821],[8819,8819]]],[1575355741815,["wangy@DESKTOP-LU247VS",[[1,8819,"纹理"]],[8819,8819],[8821,8821]]],[1575355775162,["wangy@DESKTOP-LU247VS",[[1,8834,"存储在z分量中。在Unity看来"]],[8834,8834],[8850,8850]]],[1575355796624,["wangy@DESKTOP-LU247VS",[[1,8850,"，Y和Z坐标是交换的。"]],[8850,8850],[8861,8861]]],[1575355797910,["wangy@DESKTOP-LU247VS",[[1,8861,"\n\n"]],[8861,8861],[8862,8862]]],[1575355799006,["wangy@DESKTOP-LU247VS",[[1,8863,"\n"]],[8862,8862],[8863,8863]]],[1575355824621,["wangy@DESKTOP-LU247VS",[[1,8863,"## 对法线纹理"]],[8863,8863],[8871,8871]]],[1575355825405,["wangy@DESKTOP-LU247VS",[[-1,8869,"纹理"]],[8871,8871],[8869,8869]]],[1575355828470,["wangy@DESKTOP-LU247VS",[[1,8869,"贴图采样"]],[8869,8869],[8873,8873]]],[1575355830638,["wangy@DESKTOP-LU247VS",[[1,8874,"\n"]],[8873,8873],[8874,8874]]],[1575355831318,["wangy@DESKTOP-LU247VS",[[1,8875,"\n"]],[8874,8874],[8875,8875]]],[1575355849678,["wangy@DESKTOP-LU247VS",[[-1,8875,"\n"],[1,8876,"因为"]],[8875,8875],[8877,8877]]],[1575355899169,["wangy@DESKTOP-LU247VS",[[1,8877,"法线贴图和高度贴图有很大的不同，要相应地重命名"]],[8877,8877],[8900,8900]]],[1575355904280,["wangy@DESKTOP-LU247VS",[[1,8900,"着色器属性。"]],[8900,8900],[8906,8906]]],[1575355905926,["wangy@DESKTOP-LU247VS",[[1,8906,"\n\n"]],[8906,8906],[8907,8907]]],[1575355911190,["wangy@DESKTOP-LU247VS",[[1,8908,"\n"]],[8907,8907],[8908,8908]]],[1575355912707,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"],[1,8909,"·"]],[8908,8908],[8909,8909]]],[1575355913320,["wangy@DESKTOP-LU247VS",[[-1,8908,"·"],[1,8909,"\n"]],[8909,8909],[8908,8908]]],[1575355913969,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"],[1,8909,"`"]],[8908,8908],[8909,8909]]],[1575355914160,["wangy@DESKTOP-LU247VS",[[1,8909,"`"]],[8909,8909],[8910,8910]]],[1575355916279,["wangy@DESKTOP-LU247VS",[[-1,8909,"`"]],[8910,8910],[8909,8909]]],[1575355916465,["wangy@DESKTOP-LU247VS",[[-1,8908,"`"],[1,8909,"\n"]],[8909,8909],[8908,8908]]],[1575355916688,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"]],[8908,8908],[8907,8907]]],[1575355917670,["wangy@DESKTOP-LU247VS",[[1,8908,"\n"]],[8907,8907],[8908,8908]]],[1575355918227,["wangy@DESKTOP-LU247VS",[[-1,8908,"\n"],[1,8909,"`"]],[8908,8908],[8909,8909]]],[1575355920696,["wangy@DESKTOP-LU247VS",[[1,8909,"`c"]],[8909,8909],[8911,8911]]],[1575355922696,["wangy@DESKTOP-LU247VS",[[-1,8910,"c"]],[8911,8911],[8910,8910]]],[1575355923649,["wangy@DESKTOP-LU247VS",[[1,8910,"`"]],[8910,8910],[8911,8911]]],[1575355923714,["wangy@DESKTOP-LU247VS",[[1,8911,"language\n```\n"]],[8911,8911],[8911,8919]]],[1575355925104,["wangy@DESKTOP-LU247VS",[[-1,8911,"language"],[1,8919,"c"]],[8911,8919],[8912,8912]]],[1575355925997,["wangy@DESKTOP-LU247VS",[[1,8913,"\n"]],[8912,8912],[8913,8913]]],[1575355927016,["wangy@DESKTOP-LU247VS",[[1,8913,"**Properties** {\n\t\t_Tint (\"Tint\", **Color**) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n~~//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}~~\n\t\t[Gamma] _Metallic (\"Metallic\", **Range**(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", **Range**(0, 1)) = 0.1\n\t}"]],[8913,8913],[9240,9240]]],[1575355929356,["wangy@DESKTOP-LU247VS",[[-1,8913,"**Properties** {\n\t\t_Tint (\"Tint\", **Color**) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n~~//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}~~\n\t\t[Gamma] _Metallic (\"Metallic\", **Range**(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", **Range**(0, 1)) = 0.1\n\t}"]],[9240,9240],[8913,8913]]],[1575355933144,["wangy@DESKTOP-LU247VS",[[1,8913,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}"]],[8913,8913],[9220,9220]]],[1575355935179,["wangy@DESKTOP-LU247VS",[[-1,8913,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}"]],[9220,9220],[8913,8913]]],[1575355943873,["wangy@DESKTOP-LU247VS",[[1,8914,"\n"]],[8913,8913],[8914,8914]]],[1575355945434,["wangy@DESKTOP-LU247VS",[[-1,8914,"\n"]],[8914,8914],[8913,8913]]],[1575355956425,["wangy@DESKTOP-LU247VS",[[1,8913,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}"]],[8913,8913],[9220,9220]]],[1575355970638,["wangy@DESKTOP-LU247VS",[[1,9225,"\n"]],[9224,9224],[9225,9225]]],[1575355970806,["wangy@DESKTOP-LU247VS",[[1,9226,"\n"]],[9225,9225],[9226,9226]]],[1575355978542,["wangy@DESKTOP-LU247VS",[[1,9226,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/material-with-normal-map.png)"]],[9226,9226],[9333,9333]]],[1575355987712,["wangy@DESKTOP-LU247VS",[[1,9228,"shiyong"]],[9228,9228],[9235,9235]]],[1575355989231,["wangy@DESKTOP-LU247VS",[[-1,9228,"shiyong"]],[9235,9235],[9228,9228]]],[1575355998047,["wangy@DESKTOP-LU247VS",[[1,9228,"使用一个法线贴图"]],[9228,9228],[9236,9236]]],[1575356001399,["wangy@DESKTOP-LU247VS",[[1,9342,"\n"]],[9341,9341],[9342,9342]]],[1575356001543,["wangy@DESKTOP-LU247VS",[[1,9343,"\n"]],[9342,9342],[9343,9343]]],[1575356011575,["wangy@DESKTOP-LU247VS",[[-1,9343,"\n"],[1,9344,"我们"]],[9343,9343],[9345,9345]]],[1575356016805,["wangy@DESKTOP-LU247VS",[[1,9345,"可以删除所有的"]],[9345,9345],[9352,9352]]],[1575356078162,["wangy@DESKTOP-LU247VS",[[1,9352,"高度贴图代码，并将其替换为一个纹理采样，然后进行归一化。"]],[9352,9352],[9380,9380]]],[1575356079247,["wangy@DESKTOP-LU247VS",[[1,9380,"\n\n"]],[9380,9380],[9381,9381]]],[1575356085872,["wangy@DESKTOP-LU247VS",[[1,9382,"\n"]],[9381,9381],[9382,9382]]],[1575356086088,["wangy@DESKTOP-LU247VS",[[-1,9382,"\n"],[1,9383,"`"]],[9382,9382],[9383,9383]]],[1575356086457,["wangy@DESKTOP-LU247VS",[[1,9383,"``"]],[9383,9383],[9385,9385]]],[1575356086509,["wangy@DESKTOP-LU247VS",[[1,9385,"language\n```\n"]],[9385,9385],[9385,9393]]],[1575356089280,["wangy@DESKTOP-LU247VS",[[-1,9385,"language"],[1,9393,"c"]],[9385,9393],[9386,9386]]],[1575356089566,["wangy@DESKTOP-LU247VS",[[1,9387,"\n"]],[9386,9386],[9387,9387]]],[1575356090937,["wangy@DESKTOP-LU247VS",[[1,9387,"sampler2D _NormalMap;\n\n//sampler2D _HeightMap;\n//float4 _HeightMap_TexelSize;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = tex2D(_NormalMap, i.uv).rgb;\n\ti.normal = normalize(i.normal);\n}"]],[9387,9387],[9599,9599]]],[1575356094654,["wangy@DESKTOP-LU247VS",[[1,9604,"\n"]],[9603,9603],[9604,9604]]],[1575356094838,["wangy@DESKTOP-LU247VS",[[1,9605,"\n"]],[9604,9604],[9605,9605]]],[1575356102233,["wangy@DESKTOP-LU247VS",[[-1,9605,"\n"],[1,9606,"d"]],[9605,9605],[9606,9606]]],[1575356103027,["wangy@DESKTOP-LU247VS",[[-1,9605,"d"],[1,9606,"\n"]],[9606,9606],[9605,9605]]],[1575356104201,["wangy@DESKTOP-LU247VS",[[-1,9605,"\n"]],[9605,9605],[0,0]]],[1575356104514,["wangy@DESKTOP-LU247VS",[[-1,9604,"\n"],[1,9605,"d"]],[0,0],[9604,9605]]],[1575356104602,["wangy@DESKTOP-LU247VS",[[1,9605,"a"]],[9604,9604],[9603,9606]]],[1575356108211,["wangy@DESKTOP-LU247VS",[[-1,9603,"\nda"]],[9603,9603],[9603,9603]]],[1575356108495,["wangy@DESKTOP-LU247VS",[[1,9603,"\n\n"]],[9603,9603],[9604,9604]]],[1575356108807,["wangy@DESKTOP-LU247VS",[[1,9605,"\n"]],[9604,9604],[9605,9605]]],[1575356110744,["wangy@DESKTOP-LU247VS",[[-1,9605,"\n"],[1,9606,"当然"]],[9605,9605],[9607,9607]]],[1575356138111,["wangy@DESKTOP-LU247VS",[[1,9607,"，我们必须通过计算2N-1来将法线转换回它们"]],[9607,9607],[9629,9629]]],[1575356153185,["wangy@DESKTOP-LU247VS",[[1,9631,"的-1~1的范围。"]],[9631,9631],[9640,9640]]],[1575356153638,["wangy@DESKTOP-LU247VS",[[1,9640,"\n\n"]],[9640,9640],[9641,9641]]],[1575356159807,["wangy@DESKTOP-LU247VS",[[1,9642,"\n"]],[9641,9641],[9642,9642]]],[1575356160376,["wangy@DESKTOP-LU247VS",[[-1,9642,"\n"],[1,9643,"`"]],[9642,9642],[9643,9643]]],[1575356160720,["wangy@DESKTOP-LU247VS",[[1,9643,"``"]],[9643,9643],[9645,9645]]],[1575356160779,["wangy@DESKTOP-LU247VS",[[1,9645,"language\n```\n"]],[9645,9645],[9645,9653]]],[1575356162312,["wangy@DESKTOP-LU247VS",[[-1,9645,"language"],[1,9653,"c"]],[9645,9653],[9646,9646]]],[1575356163063,["wangy@DESKTOP-LU247VS",[[1,9647,"\n"]],[9646,9646],[9647,9647]]],[1575356164160,["wangy@DESKTOP-LU247VS",[[1,9647,"i.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;"]],[9647,9647],[9694,9694]]],[1575356166021,["wangy@DESKTOP-LU247VS",[[1,9699,"\n"]],[9698,9698],[9699,9699]]],[1575356166382,["wangy@DESKTOP-LU247VS",[[1,9700,"\n"]],[9699,9699],[9700,9700]]],[1575356174664,["wangy@DESKTOP-LU247VS",[[-1,9700,"\n"],[1,9701,"s"]],[9700,9700],[9701,9701]]],[1575356175207,["wangy@DESKTOP-LU247VS",[[-1,9700,"s"],[1,9701,"\n"]],[9701,9701],[9700,9700]]],[1575356176509,["wangy@DESKTOP-LU247VS",[[-1,9700,"\n"]],[9700,9700],[0,0]]],[1575356177454,["wangy@DESKTOP-LU247VS",[[1,0,"\n"]],[0,0],[1,1]]],[1575356183814,["wangy@DESKTOP-LU247VS",[[1,9701,"\n"]],[9700,9700],[9701,9701]]],[1575356186166,["wangy@DESKTOP-LU247VS",[[-1,9701,"\n"],[1,9702,"此外"]],[9701,9701],[9703,9703]]],[1575356196212,["wangy@DESKTOP-LU247VS",[[1,9703,"，记得要交换Y和Z。"]],[9703,9703],[9713,9713]]],[1575356197990,["wangy@DESKTOP-LU247VS",[[1,9713,"\n\n"]],[9713,9713],[9714,9714]]],[1575356216477,[null,[[1,9630,"原来"],[-1,9641,"\n"],[-1,9645,"lc`"],[1,9648,"c\n"],[-1,9698,"\n"],[1,9699,"`"]],[9630,9630],[9700,9700]]],[1575356216478,[null,[[-1,9630,"原来"],[1,9643,"\n"],[1,9646,"lc`"],[-1,9646,"c\n"],[1,9698,"\n"],[-1,9698,"`"]],[9700,9700],[9630,9630]]],[1575356203998,["wangy@DESKTOP-LU247VS",[[1,9715,"\n"]],[9714,9714],[9715,9715]]],[1575356204218,["wangy@DESKTOP-LU247VS",[[-1,9715,"\n"],[1,9716,"`"]],[9715,9715],[9716,9716]]],[1575356204560,["wangy@DESKTOP-LU247VS",[[1,9716,"``"]],[9716,9716],[9718,9718]]],[1575356204643,["wangy@DESKTOP-LU247VS",[[1,9718,"language\n```\n"]],[9718,9718],[9718,9726]]],[1575356205464,["wangy@DESKTOP-LU247VS",[[-1,9718,"language"],[1,9726,"c"]],[9718,9726],[9719,9719]]],[1575356205916,["wangy@DESKTOP-LU247VS",[[1,9720,"\n"]],[9719,9719],[9720,9720]]],[1575356206628,["wangy@DESKTOP-LU247VS",[[1,9720,"i.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;\n\ti.normal = i.normal.xzy;"]],[9720,9720],[9793,9793]]],[1575356214750,["wangy@DESKTOP-LU247VS",[[1,9720,"    "]],[9720,9720],[9724,9724]]],[1575356249680,[null,[[1,9630,"原来"],[-1,9641,"\n"],[-1,9645,"lc`"],[1,9648,"c\n"],[-1,9698,"\n"],[1,9699,"`"]],[9630,9630],[9700,9700]]],[1575356249680,[null,[[-1,9630,"原来"],[1,9643,"\n"],[1,9646,"lc`"],[-1,9646,"c\n"],[1,9698,"\n"],[-1,9698,"`"]],[9700,9700],[9630,9630]]],[1575356218142,["wangy@DESKTOP-LU247VS",[[1,9802,"\n"]],[9801,9801],[9802,9802]]],[1575356218286,["wangy@DESKTOP-LU247VS",[[1,9803,"\n"]],[9802,9802],[9803,9803]]],[1575356222178,["wangy@DESKTOP-LU247VS",[[1,9803,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/normals.png)"]],[9803,9803],[9893,9893]]],[1575356227699,["wangy@DESKTOP-LU247VS",[[1,9805,"s"]],[9805,9805],[9806,9806]]],[1575356228423,["wangy@DESKTOP-LU247VS",[[-1,9805,"s"]],[9806,9806],[9805,9805]]],[1575356235793,["wangy@DESKTOP-LU247VS",[[1,9805,"使用一个纹理贴图"]],[9805,9805],[9813,9813]]],[1575356238648,["wangy@DESKTOP-LU247VS",[[-1,9809,"纹理"]],[9811,9811],[9809,9809]]],[1575356246268,["wangy@DESKTOP-LU247VS",[[1,9809,"法线"]],[9809,9809],[9811,9811]]]],null,"wangy@DESKTOP-LU247VS"],["014912c4-6a32-4b05-acee-60446a7df843",1575451738187,"\n> 扰动法线模拟凹凸\n>\n> 从高度场计算法线\n>\n> 采样和混合法线\n>\n> 从切线空间转换为世界空间\n\n这是渲染教程系列的第6部分。前一部分增加了对更复杂的照明的支持。这一次，我们将创建更复杂表面的错觉。\n\n本教程是用Unity 5.4.0f3制作的。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/tutorial-image.jpg)\n\n# 凹凸映射\n\n我们可以使用反照率纹理来创建具有复杂颜色图案的材质。我们可以用法线来调整表面的曲率。有了这些工具，我们可以制造出各种各样的表面。然而，一个三角形的表面总是光滑的。它只能在三个法向量之间插值。所以它不能代表粗糙或多变的表面。当放弃反照率纹理而只使用一种纯色时，这一点就很明显了。\n\n体现平滑度的一个很好的例子是一个简单的四边形。添加一个到场景中，通过沿着x轴旋转90°，并使它指向上方。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/flat.png)\n\n因为默认的天空盒非常亮，很难看到其他灯光的作用。在本教程中，我们将其关闭。你可以通过在照明设置中将环境强度降低到零来做到这一点。然后只开启主方向灯。在场景视图中找到一个好的视角，这样你就可以在四边形上看到一些光线的差异。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/ambient-intensity.png)\n\n![scene](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/no-ambient.png)\n\n我们怎样才能使这个四边形看起来不平坦呢？我们可以通过在反照率纹理中加入烘焙阴影来模拟粗糙度。然而，这将是完全静态的。如果灯光改变了，或者物体移动了，阴影也应该改变。否则，假象就会破灭。在镜面反射的情况下，甚至相机都不允许移动。\n\n我们可以改变法线来创建曲面的错觉。但是每四个顶点只有四个法线。这只能产生平滑的过渡。如果我们想要一个多变而粗糙的表面，我们需要更多的法线。\n\n我们可以把四边形分成更小的四边形。这给了我们更多的法线。事实上，一旦我们有更多的顶点，我们也可以移动它们。那么我们就不需要表面粗糙的假象了，我们可以做出一个真正粗糙的表面！但是子四边形仍然有同样的问题。我们还要再细分吗？这将导致大量的网格与大量的三角形。这在创建3D模型时是可行的，但在游戏中并不可行。\n\n## 高度纹理\n\n与平面相比，粗糙的表面具有不均匀的仰角。如果我们将这些高度数据存储在纹理中，我们可能会使用它生成的每个片段的法向量，而不是每个顶点。这个想法被称为凹凸映射，是由James Blinn首先提出的。\n\n这是一个高度贴图，以配合我们的大理石纹理。它是一个RGB纹理，每个通道都设置相同的值。使用默认导入设置其导入到项目中。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/marble-heights.png)\n\n添加一个_HeightMap纹理属性到*My First Lighting Shader*。因为它将使用与我们的反照率相同的UV，所以它不需要自己的缩放和偏移参数。默认的纹理并不重要，只要它是一致的。灰色的就可以了。\n\n```c\n\tProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/heights-inspector.png)\n\n将匹配的变量添加到My Lighting 包含文件中，这样我们就可以访问纹理了。让我们看看它是怎样的，把它与反照率相乘。\n\n```c\nfloat4 _Tint;\nsampler2D _MainTex;\nfloat4 _MainTex_ST;\n\nsampler2D _HeightMap;\n\n…\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\ti.normal = normalize(i.normal);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-color.png)\n\n## 调整法线\n\n因为我们的片段法线将变得更加复杂，我们将它们的初始化移到一个单独的函数中。另外，去掉高度纹理测试代码。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = normalize(i.normal);\n}\n\nfloat4 MyFragmentProgram (Interpolators i) : SV_TARGET {\n\tInitializeFragmentNormal(i);\n\n\tfloat3 viewDir = normalize(_WorldSpaceCameraPos - i.worldPos);\n\n\tfloat3 albedo = tex2D(_MainTex, i.uv).rgb * _Tint.rgb;\n//\talbedo *= tex2D(_HeightMap, i.uv);\n\n\t…\n}\n```\n\n因为我们现在处理的是一个位于XZ平面上的四边形，它的法向量总是（0，1，0），所以我们可以使用一个常数法向量，忽略顶点数据。我们先做这个，稍后再考虑不同的朝向。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = float3(0, 1, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n我们怎么把高度数据包含进来呢？一种简单的方法是在归一化之前使用高度作为法线的Y分量。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat h = tex2D(_HeightMap, i.uv);\n\ti.normal = float3(0, h, 0);\n\ti.normal = normalize(i.normal);\n}\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/height-as-normal.png)\n\n这是行不通的，因为归一化会把每个向量都转换回（0，1，0）.我们需要一个不同的方法。\n\n## 有限差分\n\n因为我们处理的是纹理数据，我们有二维数据。有U维度和V维度。这些高度可以被认为是在三维空间中向上的。我们可以说纹理代表了一个函数，f(u,v)=h。我们先把自己限制在U维度上。所以这个函数被简化为f（u）=h。我们能从这个函数推出法向量吗？\n\n如果我们知道函数的斜率，然后我们就可以用它来计算任意点的法向量。斜率由h的变化率决定。这是它的导数。h′。因为h是一个函数的结果，h‘同样也是一个函数的结果。我们有导数函数f’(u)=h‘。\n\n不幸的是，我们不知道这些函数是什么。但是我们可以近似它们。我们可以比较纹理中两个不同点的高度。例如，在极端情况下，使用U坐标0和1。这两个样本之间的插值就是坐标之间的变化率，用函数表示，即f(1)-f(0)。我们可以使用它来构建一个切线向量，![1574845121482](1574845121482.png)。\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent-diagram.png)\n\n![1574845208030](1574845208030.png)\n\n这当然是对切向量的粗略近似。它把整个纹理当作一个线性的斜率。我们可以通过采样两个距离更近的点来做得更好。例如，U坐标取0和1/2.在两个点之间的变化率是f(1/2 )-f(0)。半个单位的U。因为处理每整个单位的变化率比较简单，我们用它除以两点之间的距离。所以我们得到![1574847363057](1574847363057.png)。这就得到了切向量![1574847393342](1574847393342.png)。\n\n一般来说，我们要做的是相对于我们渲染的每个片段的U坐标。到下一点的距离由一个常数定义。它的导数是通过![1574849122811](1574849122811.png)来近似。\n\nδ越小，我们近似的导数就越接近于真实。当然它不可能变成零，但当达到理论极限时，你得到![1574849339141](1574849339141.png)。这种近似导数的方法称为有限差分法。有了它，我们可以构造任意点的切向量，![1574850029282](1574850029282.png)。\n\n## 从切线到法线\n\n在我们的着色器代码中，可以用什么值去当作是δ 。最小的感知差异将覆盖我们纹理的单个像素。我们可以通过一个带有_TexelSize后缀float4类型的变量在着色器中获取这些信息。Unity设置那些变量，类似于__ST变量。\n\n**_TexelSize变量中存储了什么？**\n\n> 它的前两个分量包含了Texel的大小，就像U和V一样。其他两个分量包含像素的数量。例如，在256×128大小的纹理中，它将包含(0.00390625, 0.0078125, 256, 128)。\n\n现在我们可以对纹理采样两次，计算高度导数，并构造一个切向量。我们直接用它作为法向量。\n\n```c\n    float2 delta = float2(_HeightMap_TexelSize.x, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(1, (h2 - h1) / delta.x, 0);\n\n\ti.normal = normalize(i.normal);\n```\n\n事实上，因为我们会归一化。我们可以扩展我们的切向量δ。这消除了除法并提高了精度。\n\n```c\ni.normal = float3(delta.x, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/tangent.png)\n\n我们得到了一个非常明显的结果。这是因为这些高度只有一个单位范围，这就产生了非常陡峭的斜坡。由于扰动的法线并不会改变表面，所以我们不希望有如此大的差异。我们可以用任意因子来缩放高度。让我们将范围缩小到单个Texel。我们可以通过乘以δ的高度差，或简单地在切向处用1取代δ。\n\n```c\n\ti.normal = float3(1, h2 - h1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/scaled-height.png)\n\n这看起来不错，但是灯光不对。这看起来太暗了。因为我们直接用正切作为法向量。为了把它变成一个向上的法向量，我们必须绕Z轴旋转tangent 90°。\n\n```c\ni.normal = float3(h1 - h2, 1, 0);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/rotated.png)\n\n**矢量旋转是如何工作的？**\n\n你可以通过交换向量的X和Y向量，以及翻转新的X分量的符号来逆时针旋转一个2D向量90°。最后得到![1575016532726](1575016532726.png)\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/vector-rotation.png)\n\n## 中心差分\n\n我们已经使用有限差分近似来创建法向量。具体来说，是通过使用正向差分法。我们取一个点，然后看一个方向来确定斜率。结果，法线是偏向那个方向的。为了得到法向的更好的近似值，我们可以在两个方向上偏移采样点。这种方法将线性逼近集中在当前点上，称为中心差分法。这就把导数变成了![1575017187421](1575017187421.png)。\n\n```c\n\tfloat2 delta = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat h1 = tex2D(_HeightMap, i.uv - delta);\n\tfloat h2 = tex2D(_HeightMap, i.uv + delta);\n\ti.normal = float3(h1 - h2, 1, 0);\n```\n\n这稍微移动了凹凸点，使它们更好地与高度场对齐。除此之外，它们的形状不会改变。\n\n## 使用两个维度\n\n我们创建的法线只考虑沿U方向的变化。我们已经使用了函数f(u,v)关于u的偏微分。就是![1575018677399](1575018677399.png)，或者简写为 f<sub>u</sub><sup>‘</sup>。我们可以通过使用f<sub>u</sub><sup>’</sup>沿着V创建法线。在这种情况下，那么切向量是![1575020057277](1575020057277.png)并且法向量是![1575020086626](1575020086626.png)。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\ti.normal = float3(u1 - u2, 1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\ti.normal = float3(0, 1, v1 - v2);\n\n\ti.normal = normalize(i.normal);\n```\n\n![img](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/other-dimension.png)\n\n我们现在可以得到U和V的切线。这些向量一起描述了在片段处表面的高度场。通过计算他们的外积，我们的得到了二维高度场的法向量。\n\n```c\nfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n\tfloat3 tv = float3(0, v2 - v1, 1);\n\n\ti.normal = cross(tv, tu);\n\ti.normal = normalize(i.normal);\n```\n\n![quad](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals.png)\n\n![details](https://catlikecoding.com/unity/tutorials/rendering/part-6/bump-mapping/normals-details.png)\n\n当你计算切向量的外积时，你会看到![1575021052831](1575021052831.png)。\t所以我们可以直接构造这个向量，而不是依赖于叉乘函数。\n\n```c\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\tfloat2 du = float2(_HeightMap_TexelSize.x * 0.5, 0);\n\tfloat u1 = tex2D(_HeightMap, i.uv - du);\n\tfloat u2 = tex2D(_HeightMap, i.uv + du);\n//\tfloat3 tu = float3(1, u2 - u1, 0);\n\n\tfloat2 dv = float2(0, _HeightMap_TexelSize.y * 0.5);\n\tfloat v1 = tex2D(_HeightMap, i.uv - dv);\n\tfloat v2 = tex2D(_HeightMap, i.uv + dv);\n//\tfloat3 tv = float3(0, v2 - v1, 1);\n\n//\ti.normal = cross(tv, tu);\n\ti.normal = float3(u1 - u2, 1, v1 - v2);\n\ti.normal = normalize(i.normal);\n}\n```\n\n# 法线映射\n\n当凹凸贴图工作时，我们必须执行多个纹理样本和有限差分计算。这似乎是一种浪费，因为结果的法线应该总是相同的。为什么每帧做所有这些工作？我们可以只做一次，将法线存储在一个纹理中。\n\n这意味着我们需要一个法线贴图。我可以提供一个，但我们可以让Unity为我们做这些工作。将高度贴图的纹理类型改为法线贴图。Unity自动切换纹理去使用三线性过滤，并假设我们想要使用灰度图像数据来生成一个法线贴图。这正是我们想要的。但是将凹凸度为更低的值，比如0.05。\n\n![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/inspector.png)\n\n![preview](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/preview.png)\n\n应用了导入设置后，Unity将计算法线贴图。原始的高度地图仍然存在，但Unity内部使用生成的地图。\n\n就像我们在法线可视化为颜色时所做的那样，它们必须进行调整以适应0-1的范围。所以它们被存储为\n\n$$\nx = \\frac{N+1}{2}\n$$\n\n这假设平坦区域会呈现浅绿色。然而，它们却呈现为淡蓝色。这是因为法向纹理最常见的约定是将向上的方向存储在z分量中。在Unity看来，Y和Z坐标是交换的。\n\n## 对法线贴图采样\n\n因为法线贴图和高度贴图有很大的不同，要相应地重命名着色器属性。\n\n```c\nProperties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n//\t\t[NoScaleOffset] _HeightMap (\"Heights\", 2D) = \"gray\" {}\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}\n```\n\n![使用一个法线贴图](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/material-with-normal-map.png)\n\n我们可以删除所有的高度贴图代码，并将其替换为一个纹理采样，然后进行归一化。\n\n```c\nsampler2D _NormalMap;\n\n//sampler2D _HeightMap;\n//float4 _HeightMap_TexelSize;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal = tex2D(_NormalMap, i.uv).rgb;\n\ti.normal = normalize(i.normal);\n}\n```\n\n当然，我们必须通过计算2N-1来将法线转换回它们原来的-1~1的范围。\n\n```c\ni.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;\n```\n\n此外，记得要交换Y和Z。\n\n```c\n    i.normal = tex2D(_NormalMap, i.uv).xyz * 2 - 1;\n\ti.normal = i.normal.xzy;\n```\n\n![使用一个法线贴图](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/normals.png)\n\n",[[1575451688089,["wangy@DESKTOP-LU247VS",[[1,9903,"\n"]],[9902,9902],[9903,9903]]],[1575451724484,["wangy@DESKTOP-LU247VS",[[1,9903,"## DXT5nm"]],[9903,9903],[9912,9912]]],[1575451725477,["wangy@DESKTOP-LU247VS",[[1,9913,"\n"]],[9912,9912],[9913,9913]]],[1575451726599,["wangy@DESKTOP-LU247VS",[[1,9914,"\n"]],[9913,9913],[9914,9914]]],[1575451745466,["wangy@DESKTOP-LU247VS",[[-1,9914,"\n"],[1,9915,"我们"]],[9914,9914],[9916,9916]]],[1575451747560,["wangy@DESKTOP-LU247VS",[[1,9916,"得法线"]],[9916,9916],[9919,9919]]],[1575451757680,["wangy@DESKTOP-LU247VS",[[-1,9916,"得"]],[9917,9917],[9916,9916]]],[1575451758519,["wangy@DESKTOP-LU247VS",[[1,9916,"的"]],[9916,9916],[9917,9917]]],[1575451796959,["wangy@DESKTOP-LU247VS",[[1,9919,"肯定是有一些问题的。这是因为Unity最终以一种不同于我们预期"]],[9919,9919],[9950,9950]]],[1575451855115,["wangy@DESKTOP-LU247VS",[[1,9950,"的方式对法线进行编码。即使纹理预览是RGB编码。Unity"]],[9950,9950],[9979,9979]]],[1575451870602,["wangy@DESKTOP-LU247VS",[[1,9979,"实际上使用的是DXT5nm。"]],[9979,9979],[9993,9993]]],[1575451871494,["wangy@DESKTOP-LU247VS",[[1,9993,"\n\n"]],[9993,9993],[9994,9994]]],[1575451886326,["wangy@DESKTOP-LU247VS",[[1,9995,"\n"]],[9994,9994],[9995,9995]]],[1575451899064,["wangy@DESKTOP-LU247VS",[[-1,9995,"\n"],[1,9996,"DXT"]],[9995,9995],[9998,9998]]],[1575451913713,["wangy@DESKTOP-LU247VS",[[1,9998,"5nm格式只存储"]],[9998,9998],[10006,10006]]],[1575451938427,["wangy@DESKTOP-LU247VS",[[1,10006,"法线的X和Y分量。它的Z分量被丢弃了"]],[10006,10006],[10024,10024]]],[1575451939695,["wangy@DESKTOP-LU247VS",[[-1,10023,"了"]],[10024,10024],[10023,10023]]],[1575451974752,["wangy@DESKTOP-LU247VS",[[1,10023,"。正如你所期望的，Y分量存储在G通道中。但是，X分量存储在A"]],[10023,10023],[10053,10053]]],[1575451985933,["wangy@DESKTOP-LU247VS",[[1,10053,"通道中。但是，X"]],[10053,10053],[10061,10061]]],[1575451995877,["wangy@DESKTOP-LU247VS",[[-1,10057,"但是，X"]],[10061,10061],[10057,10057]]],[1575452009464,["wangy@DESKTOP-LU247VS",[[1,10057,"没有使用R和B通道。"]],[10057,10057],[10067,10067]]],[1575452009700,["wangy@DESKTOP-LU247VS",[[1,10067,"\n\n"]],[10067,10067],[10068,10068]]],[1575452047069,["wangy@DESKTOP-LU247VS",[[1,10069,"\n"]],[10068,10068],[10069,10069]]],[1575452056319,["wangy@DESKTOP-LU247VS",[[-1,10069,"\n"],[1,10070,"因此"]],[10069,10069],[10071,10071]]],[1575452085631,["wangy@DESKTOP-LU247VS",[[1,10071,"，当使用DXT5nm时，我们只能检索正常的前两个分量。"]],[10071,10071],[10098,10098]]],[1575452087662,["wangy@DESKTOP-LU247VS",[[1,10098,"\n\n"]],[10098,10098],[10099,10099]]],[1575452093950,["wangy@DESKTOP-LU247VS",[[1,10100,"\n"]],[10099,10099],[10100,10100]]],[1575452094903,["wangy@DESKTOP-LU247VS",[[-1,10100,"\n"],[1,10101,"`"]],[10100,10100],[10101,10101]]],[1575452095240,["wangy@DESKTOP-LU247VS",[[1,10101,"``"]],[10101,10101],[10103,10103]]],[1575452095280,["wangy@DESKTOP-LU247VS",[[1,10103,"language\n```\n"]],[10103,10103],[10103,10111]]],[1575452097215,["wangy@DESKTOP-LU247VS",[[-1,10103,"language"],[1,10111,"c"]],[10103,10111],[10104,10104]]],[1575452098437,["wangy@DESKTOP-LU247VS",[[1,10105,"\n"]],[10104,10104],[10105,10105]]],[1575452100366,["wangy@DESKTOP-LU247VS",[[1,10105,"\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;"]],[10105,10105],[10155,10155]]],[1575452118204,["wangy@DESKTOP-LU247VS",[[1,10160,"\n"]],[10159,10159],[10160,10160]]],[1575452118445,["wangy@DESKTOP-LU247VS",[[1,10161,"\n"]],[10160,10160],[10161,10161]]],[1575452446688,["wangy@DESKTOP-LU247VS",[[-1,10161,"\n"],[1,10162,"w"]],[10161,10161],[10162,10162]]],[1575452447117,["wangy@DESKTOP-LU247VS",[[1,10162,"omen"]],[10162,10162],[10166,10166]]],[1575452448050,["wangy@DESKTOP-LU247VS",[[-1,10162,"omen"]],[10166,10166],[10162,10162]]],[1575452448243,["wangy@DESKTOP-LU247VS",[[-1,10161,"w"],[1,10162,"\n"]],[10162,10162],[10161,10161]]],[1575452449896,["wangy@DESKTOP-LU247VS",[[-1,10161,"\n"],[1,10162,"我们"]],[10161,10161],[10163,10163]]],[1575452455223,["wangy@DESKTOP-LU247VS",[[1,10163,"必须从其他"]],[10163,10163],[10168,10168]]],[1575452481505,["wangy@DESKTOP-LU247VS",[[1,10168,"两项中推断出第三项。因为法向量是单位向量。"]],[10168,10168],[10189,10189]]],[1575452482851,["wangy@DESKTOP-LU247VS",[[1,10189,"\n\n"]],[10189,10189],[10190,10190]]],[1575452489444,["wangy@DESKTOP-LU247VS",[[1,10191,"\n"]],[10190,10190],[10191,10191]]],[1575452492959,["wangy@DESKTOP-LU247VS",[[-1,10191,"\n"],[1,10192,"$"]],[10191,10191],[10192,10192]]],[1575452493180,["wangy@DESKTOP-LU247VS",[[1,10192,"$\n\n$$\n"]],[10192,10192],[10194,10194]]],[1575452606694,["wangy@DESKTOP-LU247VS",[[1,10191,"\\"]],[10191,10191],[10192,10192]]],[1575452607787,["wangy@DESKTOP-LU247VS",[[-1,10191,"\\"]],[10192,10192],[10191,10191]]],[1575452643946,["wangy@DESKTOP-LU247VS",[[1,10194,"||N"]],[10194,10194],[10197,10197]]],[1575452654075,["wangy@DESKTOP-LU247VS",[[1,10196,"_"],[1,10197,"_"]],[10196,10197],[10196,10199]]],[1575452665319,["wangy@DESKTOP-LU247VS",[[1,10199,"||=||N"]],[10199,10199],[10205,10205]]],[1575452668541,["wangy@DESKTOP-LU247VS",[[1,10204,"_"],[1,10205,"_"]],[10204,10205],[10204,10207]]],[1575452686163,["wangy@DESKTOP-LU247VS",[[1,10207,"||^2="]],[10207,10207],[10212,10212]]],[1575453271507,["wangy@DESKTOP-LU247VS",[[-1,10196,"_"],[-1,10198,"_"],[-1,10201,"=||_N_||"],[1,10209,"^2=N_x^2+N_y^2+N_z"],[1,10212,"1。然后N_z=\\sqrt[]{1-N_x^2-N_y^2}。"],[1,10216,"\n"]],[10193,10193],[10255,10255]]],[1575453289564,["wangy@DESKTOP-LU247VS",[[1,10256,"\n"]],[10255,10255],[10256,10256]]],[1575453293715,["wangy@DESKTOP-LU247VS",[[-1,10256,"\n"],[1,10257,"`"]],[10256,10256],[10257,10257]]],[1575453294006,["wangy@DESKTOP-LU247VS",[[1,10257,"``"]],[10257,10257],[10259,10259]]],[1575453294045,["wangy@DESKTOP-LU247VS",[[1,10259,"language\n```\n"]],[10259,10259],[10259,10267]]],[1575453295271,["wangy@DESKTOP-LU247VS",[[-1,10259,"language"],[1,10267,"c"]],[10259,10267],[10260,10260]]],[1575453296083,["wangy@DESKTOP-LU247VS",[[1,10261,"\n"]],[10260,10260],[10261,10261]]],[1575453297053,["wangy@DESKTOP-LU247VS",[[1,10261,"i.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n\ti.normal.z = sqrt(1 - dot(i.normal.xy, i.normal.xy));\n\ti.normal = i.normal.xzy;"]],[10261,10261],[10391,10391]]],[1575453303301,["wangy@DESKTOP-LU247VS",[[1,10261,"        "]],[10261,10261],[10269,10269]]],[1575453306780,["wangy@DESKTOP-LU247VS",[[1,10404,"\n"]],[10403,10403],[10404,10404]]],[1575453306914,["wangy@DESKTOP-LU247VS",[[1,10405,"\n"]],[10404,10404],[10405,10405]]],[1575453312534,["wangy@DESKTOP-LU247VS",[[-1,10405,"\n"],[1,10406,"l"]],[10405,10405],[10406,10406]]],[1575453312643,["wangy@DESKTOP-LU247VS",[[1,10406,"i"]],[10406,10406],[10407,10407]]],[1575453312979,["wangy@DESKTOP-LU247VS",[[-1,10406,"i"]],[10407,10407],[10406,10406]]],[1575453313122,["wangy@DESKTOP-LU247VS",[[-1,10405,"l"],[1,10406,"\n"]],[10406,10406],[10405,10405]]],[1575453315895,["wangy@DESKTOP-LU247VS",[[-1,10405,"\n"],[1,10406,"理论上"]],[10405,10405],[10408,10408]]],[1575453354947,["wangy@DESKTOP-LU247VS",[[1,10408,"，结果应该等于原始的Z分量。但是，由于纹理的精度有限，而且由于纹理滤波"]],[10408,10408],[10443,10443]]],[1575453375251,["wangy@DESKTOP-LU247VS",[[1,10443,"，结果往往有所不同，不过一i纪念馆"]],[10443,10443],[10460,10460]]],[1575453380457,["wangy@DESKTOP-LU247VS",[[-1,10455,"一i纪念馆"]],[10460,10460],[10455,10455]]],[1575453386215,["wangy@DESKTOP-LU247VS",[[1,10455,"已经很接近了。"]],[10455,10455],[10462,10462]]],[1575453389931,["wangy@DESKTOP-LU247VS",[[1,10462,"\n\n"]],[10462,10462],[10463,10463]]],[1575453391570,["wangy@DESKTOP-LU247VS",[[1,10464,"\n"]],[10463,10463],[10464,10464]]],[1575453398666,["wangy@DESKTOP-LU247VS",[[-1,10464,"\n"],[1,10465,"此外"]],[10464,10464],[10466,10466]]],[1575453409999,["wangy@DESKTOP-LU247VS",[[1,10466,"，由于精度限制，"]],[10466,10466],[10474,10474]]],[1575453433232,["wangy@DESKTOP-LU247VS",[[1,10474,"$$ "]],[10474,10474],[10477,10477]]],[1575453434249,["wangy@DESKTOP-LU247VS",[[-1,10474,"$$ "]],[10477,10477],[10474,10474]]],[1575453501099,["wangy@DESKTOP-LU247VS",[[1,10474,"$N_x^2+N_y^2$"]],[10474,10474],[10487,10487]]],[1575453546018,["wangy@DESKTOP-LU247VS",[[1,10474,"\n"]],[10474,10474],[10475,10475]]],[1575453546690,["wangy@DESKTOP-LU247VS",[[1,10475,"\n"]],[10475,10475],[10476,10476]]],[1575453548768,["wangy@DESKTOP-LU247VS",[[1,10477,"$"]],[10476,10476],[10477,10477]]],[1575453551508,["wangy@DESKTOP-LU247VS",[[1,10478,"\n"]],[10478,10478],[10479,10479]]],[1575453557084,["wangy@DESKTOP-LU247VS",[[1,10490,"\n"]],[10490,10490],[10491,10491]]],[1575453558528,["wangy@DESKTOP-LU247VS",[[1,10492,"$"]],[10491,10491],[10492,10492]]],[1575453562442,["wangy@DESKTOP-LU247VS",[[-1,10475,"\n"]],[10475,10475],[10474,10474]]],[1575453572019,["wangy@DESKTOP-LU247VS",[[1,10492,"\n\n"]],[10492,10492],[10493,10493]]],[1575453572323,["wangy@DESKTOP-LU247VS",[[1,10494,"\n"]],[10493,10493],[10494,10494]]],[1575453591248,["wangy@DESKTOP-LU247VS",[[-1,10494,"\n"],[1,10495,"k"]],[10494,10494],[10495,10495]]],[1575453591789,["wangy@DESKTOP-LU247VS",[[1,10495,"eneng"]],[10495,10495],[10500,10500]]],[1575453592739,["wangy@DESKTOP-LU247VS",[[-1,10495,"eneng"]],[10500,10500],[10495,10495]]],[1575453592906,["wangy@DESKTOP-LU247VS",[[-1,10494,"k"],[1,10495,"\n"]],[10495,10495],[10494,10494]]],[1575453595393,["wangy@DESKTOP-LU247VS",[[-1,10494,"\n"],[1,10495,"可能"]],[10494,10494],[10496,10496]]],[1575453630348,["wangy@DESKTOP-LU247VS",[[1,10496,"会超过"]],[10496,10496],[10499,10499]]],[1575453630740,["wangy@DESKTOP-LU247VS",[[-1,10498,"过"]],[10499,10499],[10498,10498]]],[1575453642140,["wangy@DESKTOP-LU247VS",[[1,10498,"出界限。通过"]],[10498,10498],[10504,10504]]],[1575453665051,["wangy@DESKTOP-LU247VS",[[-1,10502,"通过"]],[10504,10504],[10502,10502]]],[1575453691987,["wangy@DESKTOP-LU247VS",[[1,10502,"通过限制点积，确保不会发生这种事情。"]],[10502,10502],[10520,10520]]],[1575453693355,["wangy@DESKTOP-LU247VS",[[1,10520,"\n\n"]],[10520,10520],[10521,10521]]],[1575453693826,["wangy@DESKTOP-LU247VS",[[1,10522,"\n"]],[10521,10521],[10522,10522]]],[1575453701397,["wangy@DESKTOP-LU247VS",[[1,10521,"```"]],[10521,10521],[10524,10524]]],[1575453701437,["wangy@DESKTOP-LU247VS",[[1,10524,"language\n```\n"]],[10524,10524],[10524,10532]]],[1575453703967,["wangy@DESKTOP-LU247VS",[[-1,10524,"language"],[1,10532,"c"]],[10524,10532],[10525,10525]]],[1575453704858,["wangy@DESKTOP-LU247VS",[[1,10526,"\n"]],[10525,10525],[10526,10526]]],[1575453705586,["wangy@DESKTOP-LU247VS",[[1,10526,"i.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));"]],[10526,10526],[10589,10589]]],[1575453708274,["wangy@DESKTOP-LU247VS",[[1,10521,"\n"]],[10520,10520],[10521,10521]]],[1575453712936,["wangy@DESKTOP-LU247VS",[[1,10596,"![](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/dxt5nm.png)"]],[10596,10596],[10685,10685]]],[1575453737036,["wangy@DESKTOP-LU247VS",[[1,10598,"解码DXT5nm法线"]],[10598,10598],[10608,10608]]],[1575453742162,["wangy@DESKTOP-LU247VS",[[1,10696,"\n"]],[10695,10695],[10696,10696]]],[1575453742356,["wangy@DESKTOP-LU247VS",[[1,10697,"\n"]],[10696,10696],[10697,10697]]],[1575453755222,["wangy@DESKTOP-LU247VS",[[1,10697,"## 缩放凹凸"]],[10697,10697],[10704,10704]]],[1575453988707,["wangy@DESKTOP-LU247VS",[[1,10705,"\n"]],[10704,10704],[10705,10705]]],[1575453989114,["wangy@DESKTOP-LU247VS",[[1,10706,"\n"]],[10705,10705],[10706,10706]]],[1575454001683,["wangy@DESKTOP-LU247VS",[[-1,10706,"\n"],[1,10707,"因为"]],[10706,10706],[10708,10708]]],[1575454014163,["wangy@DESKTOP-LU247VS",[[1,10708,"我们把法线烘焙"]],[10708,10708],[10715,10715]]],[1575454049370,["wangy@DESKTOP-LU247VS",[[1,10715,"成纹理，我们不能在片段着色器中缩放它。"]],[10715,10715],[10734,10734]]],[1575454049642,["wangy@DESKTOP-LU247VS",[[1,10734,"\n\n"]],[10734,10734],[10735,10735]]],[1575454061482,["wangy@DESKTOP-LU247VS",[[1,10736,"\n"]],[10735,10735],[10736,10736]]],[1575454066955,["wangy@DESKTOP-LU247VS",[[-1,10736,"\n"],[1,10737,"我们"]],[10736,10736],[10738,10738]]],[1575454072913,["wangy@DESKTOP-LU247VS",[[1,10738,"可以在计算Z"]],[10738,10738],[10744,10744]]],[1575454135222,["wangy@DESKTOP-LU247VS",[[1,10744,"之前缩放法线的X和Y分量。如果我们减少X和Y，那么"]],[10744,10744],[10769,10769]]],[1575454157119,["wangy@DESKTOP-LU247VS",[[1,10769,"Z会变大，导致一个更平坦的"]],[10769,10769],[10782,10782]]],[1575454255666,["wangy@DESKTOP-LU247VS",[[1,10782,"表面。如果我们增加它们，相反的情况会发生"]],[10782,10782],[10802,10802]]],[1575454295418,["wangy@DESKTOP-LU247VS",[[1,10803,"我们可以这样调整凹凸度。因为我们已经限制和X和Y的平方，我们呢"]],[10803,10803],[10834,10834]]],[1575454296833,["wangy@DESKTOP-LU247VS",[[-1,10833,"呢"]],[10834,10834],[10833,10833]]],[1575454312667,["wangy@DESKTOP-LU247VS",[[1,10833,"永远不会得到无效的法线。"]],[10833,10833],[10845,10845]]],[1575454377197,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454377197,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454327224,["wangy@DESKTOP-LU247VS",[[1,10845,"\n\n"]],[10845,10845],[10846,10846]]],[1575454327752,["wangy@DESKTOP-LU247VS",[[1,10847,"\n"]],[10846,10846],[10847,10847]]],[1575454437201,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454437201,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454426365,["wangy@DESKTOP-LU247VS",[[-1,10847,"\n"],[1,10848,"让我们"]],[10847,10847],[10850,10850]]],[1575454435032,["wangy@DESKTOP-LU247VS",[[1,10850,"添加一个凹凸"]],[10850,10850],[10856,10856]]],[1575454497184,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454497184,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454446049,["wangy@DESKTOP-LU247VS",[[1,10856,"缩放属性"]],[10856,10856],[10860,10860]]],[1575454617202,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454617202,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454616738,["wangy@DESKTOP-LU247VS",[[1,10860,"到我们的着色器，就像Unity的标准"]],[10860,10860],[10878,10878]]],[1575454677201,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454677201,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454626255,["wangy@DESKTOP-LU247VS",[[1,10878,"着色器一样。"]],[10878,10878],[10884,10884]]],[1575454627561,["wangy@DESKTOP-LU247VS",[[1,10884,"\n\n"]],[10884,10884],[10885,10885]]],[1575454628034,["wangy@DESKTOP-LU247VS",[[1,10886,"\n"]],[10885,10885],[10886,10886]]],[1575454655455,["wangy@DESKTOP-LU247VS",[[-1,10886,"\n"],[1,10887,"`"]],[10886,10886],[10887,10887]]],[1575454655803,["wangy@DESKTOP-LU247VS",[[1,10887,"``"]],[10887,10887],[10889,10889]]],[1575454655843,["wangy@DESKTOP-LU247VS",[[1,10889,"language\n```\n"]],[10889,10889],[10889,10897]]],[1575454657363,["wangy@DESKTOP-LU247VS",[[-1,10889,"language"],[1,10897,"c"]],[10889,10897],[10890,10890]]],[1575454657944,["wangy@DESKTOP-LU247VS",[[1,10891,"\n"]],[10890,10890],[10891,10891]]],[1575454660360,["wangy@DESKTOP-LU247VS",[[1,10891,"Properties {\n\t\t_Tint (\"Tint\", Color) = (1, 1, 1, 1)\n\t\t_MainTex (\"Albedo\", 2D) = \"white\" {}\n\t\t[NoScaleOffset] _NormalMap (\"Normals\", 2D) = \"bump\" {}\n\t\t_BumpScale (\"Bump Scale\", Float) = 1\n\t\t[Gamma] _Metallic (\"Metallic\", Range(0, 1)) = 0\n\t\t_Smoothness (\"Smoothness\", Range(0, 1)) = 0.1\n\t}"]],[10891,10891],[11178,11178]]],[1575454663769,["wangy@DESKTOP-LU247VS",[[1,11183,"\n"]],[11182,11182],[11183,11183]]],[1575454663976,["wangy@DESKTOP-LU247VS",[[1,11184,"\n"]],[11183,11183],[11184,11184]]],[1575454737204,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454737204,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454689088,["wangy@DESKTOP-LU247VS",[[-1,11184,"\n"],[1,11185,"b"]],[11184,11184],[11185,11185]]],[1575454689218,["wangy@DESKTOP-LU247VS",[[1,11185,"a"]],[11185,11185],[11186,11186]]],[1575454689961,["wangy@DESKTOP-LU247VS",[[-1,11185,"a"]],[11186,11186],[11185,11185]]],[1575454690120,["wangy@DESKTOP-LU247VS",[[-1,11184,"b"],[1,11185,"\n"]],[11185,11185],[11184,11184]]],[1575454694747,["wangy@DESKTOP-LU247VS",[[-1,11184,"\n"],[1,11185,"把这个"]],[11184,11184],[11187,11187]]],[1575454706116,["wangy@DESKTOP-LU247VS",[[1,11187,"缩放纳入我们的正常计算。"]],[11187,11187],[11199,11199]]],[1575454706728,["wangy@DESKTOP-LU247VS",[[1,11199,"\n\n"]],[11199,11199],[11200,11200]]],[1575454707536,["wangy@DESKTOP-LU247VS",[[1,11201,"\n"]],[11200,11200],[11201,11201]]],[1575454713958,["wangy@DESKTOP-LU247VS",[[-1,11201,"\n"],[1,11202,"`"]],[11201,11201],[11202,11202]]],[1575454714299,["wangy@DESKTOP-LU247VS",[[1,11202,"``"]],[11202,11202],[11204,11204]]],[1575454714339,["wangy@DESKTOP-LU247VS",[[1,11204,"language\n```\n"]],[11204,11204],[11204,11212]]],[1575454715338,["wangy@DESKTOP-LU247VS",[[-1,11204,"language"],[1,11212,"c"]],[11204,11212],[11205,11205]]],[1575454715856,["wangy@DESKTOP-LU247VS",[[1,11206,"\n"]],[11205,11205],[11206,11206]]],[1575454717320,["wangy@DESKTOP-LU247VS",[[1,11206,"sampler2D _NormalMap;\nfloat _BumpScale;\n\n…\n\nvoid InitializeFragmentNormal(inout Interpolators i) {\n\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n\ti.normal.xy *= _BumpScale;\n\ti.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}"]],[11206,11206],[11509,11509]]],[1575454720849,["wangy@DESKTOP-LU247VS",[[1,11514,"\n"]],[11513,11513],[11514,11514]]],[1575454721056,["wangy@DESKTOP-LU247VS",[[1,11515,"\n"]],[11514,11514],[11515,11515]]],[1575454797005,[null,[[1,10802,"。"],[-1,10832,"呢"]],[10802,10802],[10832,10832]]],[1575454797005,[null,[[-1,10802,"。"],[1,10833,"呢"]],[10832,10832],[10802,10802]]],[1575454746990,["wangy@DESKTOP-LU247VS",[[-1,11515,"\n"],[1,11516,"s"]],[11515,11515],[11516,11516]]],[1575454747520,["wangy@DESKTOP-LU247VS",[[-1,11515,"s"],[1,11516,"\n"]],[11516,11516],[11515,11515]]],[1575454748872,["wangy@DESKTOP-LU247VS",[[-1,11515,"\n"]],[11515,11515],[0,0]]],[1575454749730,["wangy@DESKTOP-LU247VS",[[1,0,"\n"]],[0,0],[1,1]]],[1575454755530,["wangy@DESKTOP-LU247VS",[[1,11516,"\n"]],[11515,11515],[11516,11516]]],[1575454762675,["wangy@DESKTOP-LU247VS",[[-1,11516,"\n"],[1,11517,"要得到"]],[11516,11516],[11519,11519]]],[1575454796276,["wangy@DESKTOP-LU247VS",[[1,11519,"和我们使用高度贴图时差不多的强度，把缩放降低到0.25左右。"]],[11519,11519],[11549,11549]]],[1575454857008,[null,[[1,10803,"。"],[-1,10833,"呢"]],[10803,10803],[10833,10833]]],[1575454857008,[null,[[-1,10803,"。"],[1,10834,"呢"]],[10833,10833],[10803,10803]]],[1575454798426,["wangy@DESKTOP-LU247VS",[[1,11549,"\n\n"]],[11549,11549],[11550,11550]]],[1575454799610,["wangy@DESKTOP-LU247VS",[[1,11551,"\n"]],[11550,11550],[11551,11551]]],[1575454803114,["wangy@DESKTOP-LU247VS",[[1,11551,"![inspector](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/bump-scale.png)"]],[11551,11551],[11653,11653]]],[1575454806353,["wangy@DESKTOP-LU247VS",[[1,11654,"\n"]],[11653,11653],[11654,11654]]],[1575454806969,["wangy@DESKTOP-LU247VS",[[1,11655,"\n"]],[11654,11654],[11655,11655]]],[1575454810762,["wangy@DESKTOP-LU247VS",[[1,11655,"![quad](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/scaled.png)"]],[11655,11655],[11748,11748]]],[1575454812761,["wangy@DESKTOP-LU247VS",[[1,11749,"\n"]],[11748,11748],[11749,11749]]],[1575454812914,["wangy@DESKTOP-LU247VS",[[1,11750,"\n"]],[11749,11749],[11750,11750]]],[1575454818747,["wangy@DESKTOP-LU247VS",[[1,11750,"![details](https://catlikecoding.com/unity/tutorials/rendering/part-6/normal-mapping/scaled-details.png)"]],[11750,11750],[11854,11854]]],[1575454820312,["wangy@DESKTOP-LU247VS",[[1,11855,"\n"]],[11854,11854],[11855,11855]]],[1575454820673,["wangy@DESKTOP-LU247VS",[[1,11856,"\n"]],[11855,11855],[11856,11856]]],[1575454832448,["wangy@DESKTOP-LU247VS",[[-1,11856,"\n"],[1,11857,"Unity"]],[11856,11856],[11861,11861]]],[1575454836889,["wangy@DESKTOP-LU247VS",[[1,11861,"Shader"]],[11861,11861],[11867,11867]]],[1575454840042,["wangy@DESKTOP-LU247VS",[[-1,11862,"hader"]],[11867,11867],[11862,11862]]],[1575454851402,["wangy@DESKTOP-LU247VS",[[1,11862,"tandardUtils"]],[11862,11862],[11874,11874]]],[1575454917038,[null,[[1,10803,"。"],[-1,10833,"呢"]],[10803,10803],[10833,10833]]],[1575454917038,[null,[[-1,10803,"。"],[1,10834,"呢"]],[10833,10833],[10803,10803]]],[1575454914455,["wangy@DESKTOP-LU247VS",[[1,11874,"包含了UnpackScaleNormal函数。它会自动地为法线贴图使用正确的编码，并且缩放法线。利用这个方便的函数 "]],[11874,11874],[11932,11932]]],[1575454916823,["wangy@DESKTOP-LU247VS",[[-1,11923,"用这个方便的函数 "]],[11932,11932],[11923,11923]]],[1575454977013,[null,[[1,10803,"。"],[-1,10833,"呢"]],[10803,10803],[10833,10833]]],[1575454977013,[null,[[-1,10803,"。"],[1,10834,"呢"]],[10833,10833],[10803,10803]]],[1575454928538,["wangy@DESKTOP-LU247VS",[[1,11922,"所以，让我们用这个方便的函数。"]],[11922,11922],[11937,11937]]],[1575454932584,["wangy@DESKTOP-LU247VS",[[1,11937,"\n\n"]],[11937,11937],[11938,11938]]],[1575454948688,["wangy@DESKTOP-LU247VS",[[1,11939,"\n"]],[11938,11938],[11939,11939]]],[1575454949155,["wangy@DESKTOP-LU247VS",[[-1,11939,"\n"],[1,11940,"`"]],[11939,11939],[11940,11940]]],[1575454949489,["wangy@DESKTOP-LU247VS",[[1,11940,"``"]],[11940,11940],[11942,11942]]],[1575454949537,["wangy@DESKTOP-LU247VS",[[1,11942,"language\n```\n"]],[11942,11942],[11942,11950]]],[1575454951661,["wangy@DESKTOP-LU247VS",[[-1,11942,"language"],[1,11950,"c"]],[11942,11950],[11943,11943]]],[1575454952496,["wangy@DESKTOP-LU247VS",[[1,11944,"\n"]],[11943,11943],[11944,11944]]],[1575454954051,["wangy@DESKTOP-LU247VS",[[1,11944,"void InitializeFragmentNormal(inout Interpolators i) {\n//\ti.normal.xy = tex2D(_NormalMap, i.uv).wy * 2 - 1;\n//\ti.normal.xy *= _BumpScale;\n//\ti.normal.z = sqrt(1 - saturate(dot(i.normal.xy, i.normal.xy)));\n\ti.normal = UnpackScaleNormal(tex2D(_NormalMap, i.uv), _BumpScale);\n\ti.normal = i.normal.xzy;\n\ti.normal = normalize(i.normal);\n}"]],[11944,11944],[12277,12277]]],[1575454959447,["wangy@DESKTOP-LU247VS",[[1,12282,"\n"]],[12281,12281],[12282,12282]]],[1575454959647,["wangy@DESKTOP-LU247VS",[[1,12283,"\n"]],[12282,12282],[12283,12283]]],[1575454968158,["wangy@DESKTOP-LU247VS",[[1,12283,"## s"]],[12283,12283],[12287,12287]]],[1575454968713,["wangy@DESKTOP-LU247VS",[[-1,12286,"s"]],[12287,12287],[12286,12286]]],[1575454976733,["wangy@DESKTOP-LU247VS",[[1,12286,"合并反照率和凹凸"]],[12286,12286],[12294,12294]]],[1575455010993,[null,[[1,10803,"。"],[-1,10833,"呢"],[-1,12295,"利"]],[10803,10803],[12295,12295]]],[1575455010993,[null,[[-1,10803,"。"],[1,10834,"呢"],[1,12295,"利"]],[12295,12295],[10803,10803]]],[1575454978258,["wangy@DESKTOP-LU247VS",[[1,12295,"\n"]],[12294,12294],[12295,12295]]],[1575454978825,["wangy@DESKTOP-LU247VS",[[1,12296,"\n"]],[12295,12295],[12296,12296]]],[1575454986268,["wangy@DESKTOP-LU247VS",[[-1,12296,"\n"],[1,12297,"现在"]],[12296,12296],[12298,12298]]],[1575455009566,["wangy@DESKTOP-LU247VS",[[1,12298,"我们有了一个有功能的法线贴图。"]],[12298,12298],[12313,12313]]]],null,"wangy@DESKTOP-LU247VS"]]}